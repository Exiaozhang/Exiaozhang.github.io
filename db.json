{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/Brian.png","path":"img/Brian.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/Cover_CsharpAsync.png","path":"img/Cover_CsharpAsync.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/Cover_LeetCode.png","path":"img/Cover_LeetCode.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/Top_img.jpg","path":"img/Top_img.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon-32x32-next.ico","path":"img/favicon-32x32-next.ico","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/Cover_SingleChip.png","path":"img/Cover_SingleChip.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/Cover_UbuntuNodejs.png","path":"img/Cover_UbuntuNodejs.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/categories/index.md","hash":"4b6facdefc05136466c9d1269a21d489dfe3af81","modified":1681109142694},{"_id":"source/_posts/CsharpAsync.md","hash":"96f6ab0d23b4b9d645515cc63dca8db1df0b5f2a","modified":1681203811372},{"_id":"source/_posts/ET框架TulipBubble实现逻辑.md","hash":"d5110af8543d3658a25b29b680f6a9b663b46a3e","modified":1680863829337},{"_id":"source/_posts/ET框架初步理解.md","hash":"279391453c56e90b78b4d738960667faece99513","modified":1680706286123},{"_id":"source/_posts/SingleChip.md","hash":"9984fc676d9c96b1fb23b8aeb11f31fc544bf0e5","modified":1681317194968},{"_id":"source/_posts/Github使用.md","hash":"8ab2ff89fff59e3e00c95add787438327d1e59c7","modified":1680706286126},{"_id":"source/_posts/Ubuntu-Nodejs.md","hash":"d5f54b540510611ecc101dcbb4745b1b410f1e12","modified":1681317900492},{"_id":"source/_posts/leetCode.md","hash":"f13a8d8d4158bc47d319d718bc15da380e7066fb","modified":1681374996537},{"_id":"source/_posts/videos.md","hash":"1cf381b68faa66be03d09ffb274a087bc2cbbfec","modified":1680706286166},{"_id":"source/tags/index.md","hash":"effbfca207a477b9ed957f54d23883b4f51f7004","modified":1680706286167},{"_id":"source/_posts/ET框架TulipBubble实现逻辑/2023-03-23-21-05-52-image.png","hash":"bde4ff7002cd030fa1102020239644bcb1173e63","modified":1680706286123},{"_id":"source/_posts/ET框架初步理解/4a45803c69ed8b7283f933aa6e1748973976ef4c.png","hash":"099947dcd47ccf15acd4bfb492893de18f6d44e3","modified":1680706286123},{"_id":"source/_posts/ET框架初步理解/6e285ffc782c8443b1070964510e9530573f6c2d.png","hash":"e69da7540315e68734be8a58acde9fe38b18705c","modified":1680706286124},{"_id":"source/_posts/ET框架初步理解/7845ce3fdee147fca9d5c7fe4d86a890b717ecfe.png","hash":"a3e70c29093723ed7e586ae84e722ba191e1cb41","modified":1680706286124},{"_id":"source/_posts/ET框架初步理解/BackConfig.png","hash":"e69da7540315e68734be8a58acde9fe38b18705c","modified":1680706286125},{"_id":"source/_posts/ET框架初步理解/BackEnd.png","hash":"a3e70c29093723ed7e586ae84e722ba191e1cb41","modified":1680706286125},{"_id":"source/_posts/ET框架初步理解/front.png","hash":"099947dcd47ccf15acd4bfb492893de18f6d44e3","modified":1680706286125},{"_id":"source/_posts/Github使用/089c68368fd64dc9463fcbb493992b46998e45ad.png","hash":"4d47c07f05640c03c28bbdb717d7a95bb5f24bb1","modified":1680706286126},{"_id":"source/_posts/Github使用/14.png","hash":"7677a6db1891da89ab84e408979b0c7c424678c3","modified":1680706286130},{"_id":"source/_posts/Github使用/15.png","hash":"2fbdb63fdcf5c2bdcbedff9dab6ab024fb7ee1c3","modified":1680706286130},{"_id":"source/_posts/Github使用/2ac963f71072ecd1cc7f56f9153107153b737a36.png","hash":"10bb4f3cb67e25f5b2519d76448c673b7747527d","modified":1680706286132},{"_id":"source/_posts/Github使用/3aa70b0531dc3e2625c09c1ef8eac0078a29f54e.png","hash":"75abf9f7efe0ee474d0411193e1198dc68f86fd3","modified":1680706286132},{"_id":"source/_posts/Github使用/62a3a7a6fbde2da426ced06d782dbd6ee43fb5c4.png","hash":"6775f387bca276e70ff2514007ad175aaf9ebbc1","modified":1680706286138},{"_id":"source/_posts/Github使用/69a4adad5fa74c60aa7fdd3ac358f9bb718b3b4b.png","hash":"2fbdb63fdcf5c2bdcbedff9dab6ab024fb7ee1c3","modified":1680706286138},{"_id":"source/_posts/Github使用/c81d9e95a6974e43bb3d62b5ce7029b0c535f29d.png","hash":"7677a6db1891da89ab84e408979b0c7c424678c3","modified":1680706286143},{"_id":"source/_posts/Github使用/c96a2283efc6cc31030410ff42e59ac41209443a.png","hash":"1b48b87d2eaea4bbea51fc48cf0343873ac0f6be","modified":1680706286143},{"_id":"source/_posts/Github使用/dfd1bcd4b5e9efbe1d7e8d52c289e292c4bd2b04.png","hash":"5996a234a8b2c6e464289dccc762abe582f41ad4","modified":1680706286144},{"_id":"source/_posts/Github使用/fc261c3347d67a16ae3d5eef1b72182071954565.png","hash":"95c5bc92ed845f1ebe8ec0b1ab0bafdfa2f11421","modified":1680706286144},{"_id":"source/_posts/Github使用/git.png","hash":"95c5bc92ed845f1ebe8ec0b1ab0bafdfa2f11421","modified":1680706286144},{"_id":"source/_posts/Github使用/practice00.png","hash":"75abf9f7efe0ee474d0411193e1198dc68f86fd3","modified":1680706286147},{"_id":"source/_posts/Github使用/practice05.png","hash":"1b48b87d2eaea4bbea51fc48cf0343873ac0f6be","modified":1680706286151},{"_id":"source/_posts/Github使用/practice04.png","hash":"6775f387bca276e70ff2514007ad175aaf9ebbc1","modified":1680706286151},{"_id":"source/_posts/Github使用/practice06.png","hash":"10bb4f3cb67e25f5b2519d76448c673b7747527d","modified":1680706286152},{"_id":"source/_posts/Github使用/practice11.png","hash":"4d47c07f05640c03c28bbdb717d7a95bb5f24bb1","modified":1680706286156},{"_id":"source/_posts/Github使用/practice12.png","hash":"5996a234a8b2c6e464289dccc762abe582f41ad4","modified":1680706286156},{"_id":"source/_posts/SingleChip/08a01404c19e5459d57c8e384f5eaf22869a43eb.png","hash":"bba592f3efaa9b21a2b296813d157b34d4ccf4ad","modified":1680706286157},{"_id":"source/_posts/SingleChip/2023-04-07-17-11-07-Screenshot from 2023-04-07 17-10-50.png","hash":"7450fca37eb18343abf09714f7397dd82f204e3d","modified":1680863829343},{"_id":"source/_posts/SingleChip/426941f16f054370a2e48c0b9334b919349fd85a.png","hash":"c7d0fe0ba21e89f4b93ee55462adcadf094607cf","modified":1680706286162},{"_id":"source/_posts/SingleChip/4c9eeaf452c81e4203aab3ab35f203b530e08202.png","hash":"7dfc6fc126437e107817781a48e0fc6d620d7919","modified":1680706286162},{"_id":"source/_posts/SingleChip/54c588817fcd205435a974f1d8077220d5485bf4.png","hash":"db1f87f906380a51ec28b7fb9ba5f1a4598fa466","modified":1680706286164},{"_id":"source/_posts/SingleChip/57037c8bea42c86053227fe549874b419653b56c.png","hash":"7a43492f3bbbb9e7a242a88d2383d7a3991abd02","modified":1680706286164},{"_id":"source/_posts/SingleChip/d5a14db6ef5b8ee6e4e4628c1290b38445a7835e.png","hash":"039d45d98182217a3d581bcc86a3d499be2df101","modified":1680706286166},{"_id":"source/_posts/Ubuntu-Nodejs/2023-04-07-15-36-35-Screenshot from 2023-04-07 15-36-21.png","hash":"2fdc1f87a71bf81e8ff1637a502b8a78a32e7810","modified":1680863829347},{"_id":"source/_posts/videos/CodWar.jpg","hash":"d8a2da35a9f9aeee81cec02721bc69e52a929fe5","modified":1680706286167},{"_id":"source/_posts/videos/b4c79bb4937a8fe3e059d09f307c0293b448d348.jpg","hash":"d8a2da35a9f9aeee81cec02721bc69e52a929fe5","modified":1680706286167},{"_id":"source/_posts/.idea/.idea._posts.dir/.idea/.gitignore","hash":"dc620c7e5fd72d6fee27376ca5375d3372b48544","modified":1680706286121},{"_id":"source/_posts/.idea/.idea._posts.dir/.idea/encodings.xml","hash":"b9895f40ffe3c6c336eca36b85b8be81e5108e41","modified":1680706286122},{"_id":"source/_posts/.idea/.idea._posts.dir/.idea/indexLayout.xml","hash":"2b7e7e06b17b70c4e9365a46b16e2e4d5e60c055","modified":1680706286122},{"_id":"source/_posts/.idea/.idea._posts.dir/.idea/workspace.xml","hash":"3ed02351f34242ef3d4b5e301bbb2d672c67dbbc","modified":1679312828213},{"_id":"source/_posts/.idea/.idea._posts.dir/.idea/projectSettingsUpdater.xml","hash":"07432f8bd3756c287ae6e3555a697f9c725e1b08","modified":1679312729838},{"_id":"themes/butterfly/README.md","hash":"15e7f6386b4fd3fa4a6c179ddf641e1ae57eafa2","modified":1681108554447},{"_id":"themes/butterfly/README_CN.md","hash":"d0f7a24732855ae340f94e8286085d5387850cde","modified":1681108554447},{"_id":"themes/butterfly/LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1681108554447},{"_id":"themes/butterfly/_config.yml","hash":"51ee19506cdccdd61f388f7ec0d160e9dfda1601","modified":1681298695384},{"_id":"themes/butterfly/package.json","hash":"861ab8b6d38e2ffb37f224342f1123d5f37b87e0","modified":1681108554480},{"_id":"themes/butterfly/plugins.yml","hash":"589f1446c5ef64f77bd7bfb466743a8ddb59d2c9","modified":1681108554480},{"_id":"themes/butterfly/languages/default.yml","hash":"a62bfe75c32dd0c2754b6fc70df027947ed1e711","modified":1681108554448},{"_id":"themes/butterfly/languages/en.yml","hash":"9d83a52e3fe3c086eadcdd9bca50829ca9b3a188","modified":1681108554448},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"c2f1111d0cffddbf04248a7daa55c7895b9e4cf3","modified":1681108554448},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"30b69c969394392e4bdd3763873ceed0d473cfcb","modified":1681108554449},{"_id":"themes/butterfly/layout/archive.pug","hash":"115fa5ee8864e5c97549eff91a17c66101d724ab","modified":1681108554449},{"_id":"themes/butterfly/layout/category.pug","hash":"bf979aec88d78b644fc5d31518f8679ad7625792","modified":1681108554449},{"_id":"themes/butterfly/layout/index.pug","hash":"648dcbdb3d145a710de81c909e000e8664d2ac9c","modified":1681108554479},{"_id":"themes/butterfly/layout/page.pug","hash":"bf2d6c6d2d156777b55292e51be02b0b3acf0af8","modified":1681108554479},{"_id":"themes/butterfly/layout/post.pug","hash":"fdbb508b5e6dec30fb8753c5a7fdd494410c4fc0","modified":1681108554479},{"_id":"themes/butterfly/layout/tag.pug","hash":"4bb5efc6dabdf1626685bf6771aaa1467155ae86","modified":1681108554480},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"92683cb785a29e5a73701b33dba73d3afac268c3","modified":1681108554446},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"d9ff4bad9c9664e12729c7a531169a05698a3fd1","modified":1681108554446},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"6e0f9470b18bd37d4891282ac73d61676b040e8c","modified":1681108554446},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"e320b40c051bae1549156cd5ea4a51383cf78598","modified":1681108554447},{"_id":"themes/butterfly/.github/workflows/stale.yml","hash":"4040c76547e270aaf184e9b219a44ca41bbb1b9f","modified":1681108554447},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"aace9ddff469de4226e47a52ede1c81e66d66d5c","modified":1681108554450},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"28b425b486c009e043169c1532a2b62150613c2c","modified":1681108554450},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"8715948b93e7508b84d913be1969b28c6b067b9b","modified":1681108554450},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"ab32b8d4ef682bd1d9b727b9d25a19dc06f3e68e","modified":1681108554450},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"ab3ff72ecaa7da09fcb7d03a8b341a061e870826","modified":1681108554455},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"c5c58714fb3cb839653e5c32e6094784c8662935","modified":1681108554458},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"5f96a28a4eac046b68ccc10e8c24ab01525e3245","modified":1681108554459},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"4f41fc46410e1e3018ff87e1d1a5c28be7258119","modified":1681108554459},{"_id":"themes/butterfly/scripts/events/404.js","hash":"f1d1c378356b776e9b2a8411e6dca88dc8c3245c","modified":1681108554481},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"39a2f0088841abb89b3b801469266cc9568fced0","modified":1681108554481},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"95479790234c291b064d031577d71214cdd1d820","modified":1681108554481},{"_id":"themes/butterfly/scripts/events/init.js","hash":"72605a00bf623b6cbc9fa0f90069ea2ae584c5c0","modified":1681108554482},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"218add7e9b39b6fb6e69921abb9e44891a6cc3ce","modified":1681108554482},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"f59e10305fef59ea3e62a7395106c0927582879d","modified":1681108554482},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"5fd6c9659262dc8f61d87866d0417fd534292c88","modified":1681108554482},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"d33f0a055bacaa96ee5b69f821292d87658f4b0c","modified":1681108554483},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"4f712b4ea383b59a3122683db1d54c04a79ccc5d","modified":1681108554483},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"376e1884ea764404c38b1e73b16de0358ece519e","modified":1681108554483},{"_id":"themes/butterfly/scripts/helpers/findArchiveLength.js","hash":"8ff03b35385f9162e1eb54dceb5fa7f781306caf","modified":1681108554483},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"688b424e4fae8db268033dd1f78b999932b22e57","modified":1681108554484},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"3609660803ee8ff6b662d9326b34cd1ab65ae4d7","modified":1681108554484},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"76343ac8422c9c8539082e77eda6ffee4b877eb2","modified":1681108554484},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"44cca49ddc76921bb455465ef912cab46c993cef","modified":1681108554484},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"3ba7677969ff01fab06fc6713455ddc6861f0024","modified":1681108554484},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"3267d4a7fe849b8e1b4d338670cefc502721e247","modified":1681108554485},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"e01a3967e5884881bab858b11635457df412de80","modified":1681108554485},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"7641adb0d520c5ff29dd36fc1fb8617c52ecc9fb","modified":1681108554485},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"551f1b8edc973bd8afc5cce2eae546f002fa84c3","modified":1681108554486},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"fd683ccc090db3122d77c7ee73e8d35dc8735ee3","modified":1681108554486},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"56a5d41487d74654b75305c5325167a116495900","modified":1681108554486},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"08ea00791bd4738952234cb5d8360e119df6f875","modified":1681108554486},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"4c7056d3cd56f10bd209d2ba4d3cc2027aad1440","modified":1681108554486},{"_id":"themes/butterfly/source/css/index.styl","hash":"c7924868adcb046b46498626a9223c7a7b3f2e30","modified":1681108554501},{"_id":"themes/butterfly/source/css/var.styl","hash":"e1e37a2e932163886789b72624c7348545003f1d","modified":1681108554501},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1681108554501},{"_id":"themes/butterfly/source/img/Cover_CsharpAsync.png","hash":"d7f4a502101c37e1c7afaef57b5cca2353c8b039","modified":1681214972009},{"_id":"themes/butterfly/source/img/Cover_LeetCode.png","hash":"10fbcff84bef167e42fe7e2a3d64e2d160cdb2a3","modified":1681216170047},{"_id":"themes/butterfly/source/img/favicon-32x32-next.ico","hash":"1466029f6ce1e8d3b5069357cf4daeb947994818","modified":1679144712341},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1681108554502},{"_id":"themes/butterfly/source/js/main.js","hash":"ab1eb2ae2fc7937aa0579d5293432fa986bf49b2","modified":1681108554503},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"c4dac81869b33fa1590fae60a45b2e915a59c3ec","modified":1681108554504},{"_id":"themes/butterfly/source/js/utils.js","hash":"002c21bdbf1c3f4e02d86ff6927d47fd18c09730","modified":1681108554505},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"c8dbdfe6145a0bc6f7691c9551be8169a2698f0a","modified":1681108554451},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"c7666a10448edd93f5ace37296051b7670495f1b","modified":1681108554451},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"f4b80b4a3ff5dd877b447b42d078f01ee3ecab24","modified":1681108554452},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"bd5dd5452e28a4fe94c3241a758ec6f4fdb7a149","modified":1681108554452},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1681108554452},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"72efaa09ff60843567458bd54152e06f0cb2757e","modified":1681108554452},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"fd55f0e09827ef40c53c48d184a553464aac3e03","modified":1681108554453},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"6dc2c9b85df9ab4f5b554305339fd80a90a6cf43","modified":1681108554453},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1681108554453},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"ca8bcd90ad9467819330bfe7c02b76322754bccf","modified":1681108554454},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"e9f952f1b66a0116fccb812b14db0f229666e586","modified":1681108554454},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"962ee70a35e60a13c31eea47d16b9f98069fe417","modified":1681108554454},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"50b4b9c7f6a4771910be4198639cfcfc6d7b8925","modified":1681108554454},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"631ec7000fd4d6cfa2de118ee02ad8a42ffb34f5","modified":1681108554455},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"767ca9b4dad126ba5fbd2f3ea5ca8d07c0d2b32c","modified":1681108554455},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"00ae419f527d8225a2dc03d4f977cec737248423","modified":1681108554455},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"39847b8a1f0fad7889954a4ac936b7681949f16c","modified":1681108554456},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"9155f01d4c644a2e19b2b13b2d3c6d5e34dd0abf","modified":1681108554456},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"39c205027296dbd9fc9eb3cfd9d033bc5bd031b7","modified":1681108554456},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1681108554457},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"e9459f122af7b733398578f9f0f8ab3c5e12a217","modified":1681108554457},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"a60d9cc9083142e3d92b618561abd557fcab502b","modified":1681108554457},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"12be059c536490af216a397e8f2a7abbf6d4610e","modified":1681108554457},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"cc1f7ae8a7ce5445277215821092e712ec8cc296","modified":1681108554459},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"594626a18b7efbf771232855dfbce143fb244bc6","modified":1681108554459},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"e939344fd389aeb11864ee697d5fd9b036d8325f","modified":1681108554460},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"4e37535c63149708ecbedb262336014524ad8723","modified":1681108554468},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"f0898509da70388b5c532f19e762756d74080200","modified":1681108554472},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"558456d85100606c14e0a59801b0ee2ee67aadd9","modified":1681108554472},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"08979afbfecb4476a5ae8e360947b92624d285b8","modified":1681108554472},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"d4836a2ce1c87a59cfa8e4986346bf353710277f","modified":1681108554475},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1681108554475},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"21e019bdc3b1e796bb00976bb29af2d51f873624","modified":1681108554476},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"08641633d38903351a7424baf9893d9038ba057d","modified":1681108554476},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"73d33b6930e7944187a4b3403daf25d27077a2dd","modified":1681108554476},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"1dba77d250eeebfb6e293d504352c7e9ea31980b","modified":1681108554477},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1681108554477},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"c02b1779bd0ebca6749f195be096b6ca574bfa29","modified":1681108554477},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"59d979702fa21d960443824198614d63aaf69662","modified":1681108554477},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"bb842d2aa6469d65bf06af1372f0a19a9e4ef44c","modified":1681108554478},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"8a8aa922be1824df17f30ba08ee6b55e2af05787","modified":1681108554478},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"7b5ae404a1205546b7de4be42291315cf918f2b3","modified":1681108554478},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"12185713f9ca08984fc74e3b69d8cd6828d23da8","modified":1681108554478},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"ba94ceb40d7c81372a76103d958dcc2cc6a84f00","modified":1681108554479},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"6a7a926b72c5083aa14051a0eca8d49e1c6261f1","modified":1681108554487},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"fde51780f525b002885c9f189cccc459542f5dc6","modified":1681108554487},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"a2aa5caf338ff5323b6ff0601ebcc09e710d8398","modified":1681108554488},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"3c178608406c31d768af355ef1d7326da37cc75f","modified":1681108554490},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"e6107800576bf465dad87494758f6694f0bd27d4","modified":1681108554491},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"792a04d36de32f230ca3256ad87a90fe8392f333","modified":1681108554491},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"0abe05309a186682772a94e5e759b63f8028e61a","modified":1681108554491},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"d33f2d9001a82d9a72d6f4088743762fbd016e4c","modified":1681108554492},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"f0b01bbf321c2c24fdccaee367dd9fd448031a72","modified":1681108554492},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"bd099f7d3adef4b7edd24c0a25a07415b156e587","modified":1681108554492},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"b0ba6f72848bc711bcf534c56b04ae14ab21b320","modified":1681108554493},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"077ce6932261cf51696834a25d1d988fec6cd7d0","modified":1681108554492},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"6dcf19c0933c8828a439f801b0f4b256447dec07","modified":1681108554493},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"b5ba2c3339ad406ce611d12d3f8cc84f864fbc03","modified":1681108554493},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"824b2b2d2ee72583b9e009c0bb13e29e806534cc","modified":1681108554493},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"7e9b65dcae7ac54e0183bc841fea0f4bd4d78e5c","modified":1681108554493},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"956ed11cc5d65941b49192b9be47cecfaed57a91","modified":1681108554494},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"01ba993e7bd384827c0f5499ae0c5f82e068d844","modified":1681108554494},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"d072872714854cdc3d2975fb131ac31cb82b13e3","modified":1681108554494},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"a7223a8fcc4fa7b81e552c9a2554be7df9de312e","modified":1681108554495},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"5dd1ba997741d02894ff846eda939ad8051c0bb2","modified":1681108554495},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"68bc8cbea25dbb3cdc170f09f9b43ce130547717","modified":1681108554495},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"a714776e3d585369f2285b6bb4e1564539c58d8b","modified":1681108554496},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"ecc2b2e28c179eb9406fc2c6f00e141078249cdd","modified":1681108554496},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"d83389e07f8851f1b9afafe0eacd1bf10ad334ef","modified":1681108554496},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"9e35f91847773b915c74a78b8aa66c7bdb950ad0","modified":1681108554496},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"85f5f2c9150061bae8a5188c10f23a63e7e01a4f","modified":1681108554497},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"cced94e70b4b90130cfa215582be2adbf883efba","modified":1681108554497},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"f7d3d598a27467d24b0b37f49c012b5759394c0a","modified":1681108554497},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"62da1de0d5b8453fcecbfacddb16985265638ba5","modified":1681108554498},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"7c463ba25b3b54f0f46dfd75971d792816e942a8","modified":1681108554498},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"985b183db7b7bfd8f9bdb60494549fb7f850348b","modified":1681108554498},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"b7cf7753479fcf2fe07287ffdb0e568adbba4c18","modified":1681108554499},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"5a873d01fabebcf7ddf7a6b1c2e2e5e2714097f4","modified":1681108554499},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"2f83bd145b870d80d4b18b0ac603235229a5694e","modified":1681108554499},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"331c89ecfb79fab68466944a43e9e3d0ff49c646","modified":1681108554499},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"ec81ea316c82b83d6aee31e52f248d329559d5d3","modified":1681108554500},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"07ea7134db7a66c87658116f089fb1a2a6906563","modified":1681108554500},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"8549829fb7d3c21cd9e119884962e8c463a4a267","modified":1681108554500},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"73027a5e8b49d62b5b5a4d51663d5189f8eb7b4c","modified":1681108554504},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"1ada177b1635bd7d1b6f02b33f7a81823d8bce0c","modified":1681108554504},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"645087801624a73cbee63269cfd399e9da39c663","modified":1681108554460},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"aff5c34b6061b281c66a986cf017e9021dc11ac6","modified":1681108554461},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"f4d21dcbc3b00eed9b1f604e132c4c6811a0a059","modified":1681108554461},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"846cabae287ae31b3bbfac3da022475713dd5ecc","modified":1681108554461},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"716dc463fe4ef5112e7018ed60804125fdfa5cad","modified":1681108554461},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"38b85d216d9377ddbaa2e5867e2f03805227237c","modified":1681108554462},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"cd4fc9c5a61608a5dedf645c1295430a1623040f","modified":1681108554462},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"3f59333064c4fc754c638f13a417b7be2569ca09","modified":1681108554462},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"f3f6eaecbcf9352342e259f4a5a3ad7160f31fc9","modified":1681108554463},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"b741b5e942481d779a8a1fe94c45154a62a6b748","modified":1681108554463},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"e5af55cdb87d1ffd3d8702bc77097159acf95b54","modified":1681108554463},{"_id":"themes/butterfly/layout/includes/third-party/chat/gitter.pug","hash":"794ce3911f17d354b7196deb8c36d191afac63fb","modified":1681108554463},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"a5ddcf84ce8855c7801289270009e29c3a103150","modified":1681108554464},{"_id":"themes/butterfly/layout/includes/third-party/chat/messenger.pug","hash":"e703319ae5395273e81de11ba2366f21a104cf47","modified":1681108554464},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"cd7ab4a776be93eea96a6f6fd0a547977fbe1ea3","modified":1681108554464},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"d6a2a828689d619943838d42f2c3a45551e2c6c4","modified":1681108554464},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"3b551ab7618b36795480015b5cf565288df5b957","modified":1681108554465},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"fe599836225b835bd19fe1a6831fb4d41bcec071","modified":1681108554465},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"ca1337586aafc85e7f6d730ed0a1984a1a12aba7","modified":1681108554465},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"319463fc8ff993b798f2293b659b522ad7770cf0","modified":1681108554465},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"77729ecfae68ad21ff1d22ff2c8aa212f4d405c6","modified":1681108554466},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"5b44b4e5f2445260811de81edd3eeeb97d8bb583","modified":1681108554466},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"3abbaaa4ea575c45b3cebffd40bad1acc6ffce84","modified":1681108554466},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"589f8503f264d4fda971c8daf2028f45c4f2867b","modified":1681108554466},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"f04263a3bd7efb7f1b250cfee112e82f49805492","modified":1681108554467},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"ccb5c3f2a821b87986998595743387d7c997c16e","modified":1681108554467},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"d48d59ebf8c0142fb3c4592a0d35874f85e6fd4c","modified":1681108554467},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"cba55cbbd0962bf84b8956195e686b0e158ed247","modified":1681108554468},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"bf6b1453096dd7f53d81cde078c233d301e14304","modified":1681108554468},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"2afa4c21dd19890f47fb568cfb0d90efb676a253","modified":1681108554469},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"f0d3eddd2bed68e5517274b3530bfe0fa5057d8e","modified":1681108554469},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"fad70676346f194f166ac4e714ac6ff37cbf50ea","modified":1681108554469},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"297d34d83e7bff8ec3b8bc19bb0f4d901c35fe5a","modified":1681108554469},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"75ebfe533dd7ee59113b84c2972694cadd92c6a9","modified":1681108554470},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"cd1ce86441dc508e4c3dbf8b829046455ba8a6b4","modified":1681108554470},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"b2ede1f6b41026ebd233ac076a405889a6eec76b","modified":1681108554470},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"f8b65460c399973090c1fb7ab81e3708c252e7cc","modified":1681108554471},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"bc207dcb771fc2c2c329f29d01708ff6b18443da","modified":1681108554471},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"91a72e94743befa21a7b1c557fbb3751efb87ab0","modified":1681108554471},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"33368c0b80e4c4e78f3c7ee9bec0fed70ad838ca","modified":1681108554471},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"f434dce30f8faee0db5a8e4d2c81196b0e3605f4","modified":1681108554472},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"6c90af5e9b4d7f8147f4484f27e1b41e29d5a629","modified":1681108554473},{"_id":"themes/butterfly/layout/includes/third-party/search/docsearch.pug","hash":"ba04174d977da988a1d49c06641262c413352346","modified":1681108554473},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"3adcf28a8d205ea3ee19828eda0e668702fac07a","modified":1681108554473},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"0785346c1d8c49a10f02481b701138ed5898f4ac","modified":1681108554474},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"8b4034e53ca5bf85097f681a6e76a53ce685c205","modified":1681108554474},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"1f02a26730e5f36cc2dfec7ff4d5c93a099ed5ba","modified":1681108554474},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4898a09d8e67fb358ffd74b3a1f0014f555dd856","modified":1681108554475},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"8106bd031586f075a994956ee4438eb13be25d7b","modified":1681108554475},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"6e77f1ca0cfb0db6b028f5c0238780e66d344f3d","modified":1681108554489},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"fc702a4614d0562a381907b083f71ba63d301d86","modified":1681108554489},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"1309292f1c8c53d96cd7333507b106bcc24ca8fc","modified":1681108554489},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"01ff9e77eb1bd454bec65a6ff5972c8e219bc708","modified":1681108554490},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"0b8aea62d1550113e1fcc237fae1b03743190208","modified":1681108554490},{"_id":"source/_posts/Github使用/265bf46b38778fb7476094dda85d00debb635e85.png","hash":"bfb25df7eec92350e8320d2bb12879e0192560dc","modified":1680706286131},{"_id":"source/_posts/Github使用/5ea18123f9a50a08ca1fd5562c479b4aa184a2e4.png","hash":"8d3132d4b3e9cb6d8403a26a224a63488e83df51","modified":1680706286137},{"_id":"source/_posts/Github使用/practice01.png","hash":"bfb25df7eec92350e8320d2bb12879e0192560dc","modified":1680706286148},{"_id":"source/_posts/Github使用/practice08.png","hash":"8d3132d4b3e9cb6d8403a26a224a63488e83df51","modified":1680706286154},{"_id":"source/_posts/SingleChip/53dd30183091b0bb68dfbdb15031cc2dfa2e0306.png","hash":"4b87b76ad8ee5a78483ec34af4602d89bf102769","modified":1680706286163},{"_id":"source/_posts/SingleChip/62d506ea99c99e2d95a5c5d0b00410291b1a7de4.png","hash":"8e789ab593ccf3bfecc41e9d019808797448d7ef","modified":1680706286165},{"_id":"source/_posts/SingleChip/ba71358b9ca3c9a533af1de889672b443827b2b5.png","hash":"25e64925ccd989e516653983aa286b3ed756b7ef","modified":1680706286165},{"_id":"source/_posts/Ubuntu-Nodejs/1b20eb77d85e7959657003b7b219a44065b0876d.png","hash":"4c470fc0a265cb7adbf4148b478a6d617d1c8279","modified":1680863829346},{"_id":"source/_posts/Ubuntu-Nodejs/2023-04-07-15-31-01-Screenshot from 2023-04-07 15-30-53.png","hash":"5accee79ee52949f6e61674997ef81c213296076","modified":1680863829347},{"_id":"themes/butterfly/source/img/Brian.png","hash":"7de9fd48da2eede4010942677beb0cec567f85ec","modified":1681111579601},{"_id":"source/_posts/Github使用/13.png","hash":"83c9405fddb316a574fed3b4c4e53f97cfae2434","modified":1680706286129},{"_id":"source/_posts/Github使用/51204e17ea43f7a1992ea9abbf9ecb48768694fa.png","hash":"d2e4845c696d32fa1b277633f3c51d96beb9bef8","modified":1680706286134},{"_id":"source/_posts/Github使用/578439ae227066f02d1319f645f09b0567c46bd6.png","hash":"dfdf31f250ed49d7bcbadc87543eebfa19ef70d5","modified":1680706286135},{"_id":"source/_posts/Github使用/5a1f2bfbce2c6557b2d3442934c0a92b8a606944.png","hash":"84a8316c92b9fb561f279cdd2c47e2993b73bd07","modified":1680706286136},{"_id":"source/_posts/Github使用/6aa5405ba7ffbe9c8760c5891854c1041e688d10.png","hash":"7f6a71fbc1baa1cda2ca035ba6c9869a5bfc2707","modified":1680706286139},{"_id":"source/_posts/Github使用/86324066a24e3eb32af8305f91c0a064582ae9d5.png","hash":"5a51c07bcd6d4ffc9d848b8255be5311f7c52336","modified":1680706286142},{"_id":"source/_posts/Github使用/git01.png","hash":"5a51c07bcd6d4ffc9d848b8255be5311f7c52336","modified":1680706286147},{"_id":"source/_posts/Github使用/practice02.png","hash":"84a8316c92b9fb561f279cdd2c47e2993b73bd07","modified":1680706286149},{"_id":"source/_posts/Github使用/practice03.png","hash":"dfdf31f250ed49d7bcbadc87543eebfa19ef70d5","modified":1680706286151},{"_id":"source/_posts/Github使用/practice07.png","hash":"d2e4845c696d32fa1b277633f3c51d96beb9bef8","modified":1680706286153},{"_id":"source/_posts/Github使用/practice09.png","hash":"7f6a71fbc1baa1cda2ca035ba6c9869a5bfc2707","modified":1680706286155},{"_id":"source/_posts/Github使用/10.png","hash":"571fa7d797a24a5fc7062744c82fadad88818d7b","modified":1680706286128},{"_id":"source/_posts/Github使用/7e1e6ca628c6bcc92afce94e8ce7a0cd9a491ac1.png","hash":"571fa7d797a24a5fc7062744c82fadad88818d7b","modified":1680706286141},{"_id":"source/_posts/SingleChip/2023-04-02-02-04-46-image.png","hash":"76b60efcdb909622a52e2370f92b54a420e875c6","modified":1680706286159},{"_id":"source/_posts/SingleChip/2023-04-02-02-04-59-image.png","hash":"76b60efcdb909622a52e2370f92b54a420e875c6","modified":1680706286160},{"_id":"source/_posts/SingleChip/2023-04-02-02-05-40-image.png","hash":"76b60efcdb909622a52e2370f92b54a420e875c6","modified":1680706286162},{"_id":"source/_posts/SingleChip/2023-04-07-15-48-18-Screenshot from 2023-04-07 15-47-51.png","hash":"cd8a29cbfb9485256fae756650dfee5a74984a83","modified":1680863829340},{"_id":"source/_posts/SingleChip/2023-04-07-16-44-34-Screenshot from 2023-04-07 15-47-51.png","hash":"cd8a29cbfb9485256fae756650dfee5a74984a83","modified":1680863829342},{"_id":"source/_posts/SingleChip/5dd629b107312e0c0f858dd937af777ac3045bcd.png","hash":"cd8a29cbfb9485256fae756650dfee5a74984a83","modified":1680863829345},{"_id":"themes/butterfly/source/img/Top_img.jpg","hash":"c3f02f90c66d0840bd4391c2dea49bc3dc224c65","modified":1681113781716},{"_id":"public/categories/index.html","hash":"e3035d0d11104da8e5278496386680b747d124f9","modified":1681376636412},{"_id":"public/tags/index.html","hash":"bef67c51da32b2a83aa3e143c67eeb04378876d6","modified":1681376636412},{"_id":"public/2023/04/11/leetCode/index.html","hash":"360fffae2127c6ac7afb7aabdf38020d0a57b12c","modified":1681376636412},{"_id":"public/2023/04/11/CsharpAsync/index.html","hash":"71d65eb6ca05f4bb18dcbdb4b756f58c01130c41","modified":1681317913061},{"_id":"public/2023/04/07/Ubuntu-Nodejs/index.html","hash":"34e0d790afa328f0b80b91f986986d5182dab6e2","modified":1681317913061},{"_id":"public/2023/04/02/SingleChip/index.html","hash":"06722a000d4846063f41acf55c927ca8e5ef22a2","modified":1681317913061},{"_id":"public/2023/03/23/ET框架TulipBubble实现逻辑/index.html","hash":"a3a6017332842f04d7ddc2bcd24115a0cc4fa9a2","modified":1681317913061},{"_id":"public/2023/03/20/ET框架初步理解/index.html","hash":"7874f64326e1102245f529df70da71b4c8639910","modified":1681317913061},{"_id":"public/2023/03/16/Github使用/index.html","hash":"3e9fb2a13a27f66dd925860a69cce513f6aef4ea","modified":1681317913061},{"_id":"public/2023/02/25/videos/index.html","hash":"10c08f3218651aaf179806e013be4b8b06a910fc","modified":1681317913061},{"_id":"public/archives/index.html","hash":"44f6ff02d1171e7fb5ed2c15ceef0977c3f5684f","modified":1681376636412},{"_id":"public/archives/2023/index.html","hash":"8b310cb203856453a92885c9c8dcd0808f631c28","modified":1681376636412},{"_id":"public/archives/2023/02/index.html","hash":"838904a78704b486013d12d29e9c4f51102c4136","modified":1681376636412},{"_id":"public/archives/2023/03/index.html","hash":"a389b87d0e46d18568e0b04b66b7723744617ad5","modified":1681376636412},{"_id":"public/archives/2023/04/index.html","hash":"e8e91c47c07687e8887ffa9bb9d22c145f1dc625","modified":1681376636412},{"_id":"public/categories/学习/index.html","hash":"37dfa9aff1359549857e0ccdac6757b59bb13741","modified":1681376636412},{"_id":"public/index.html","hash":"f26721e530c2825976f37c7b38de20ad7aaad019","modified":1681376636412},{"_id":"public/tags/C/index.html","hash":"d147a08dbf02c63f8b27f39a4d3d5a0d0e1ab680","modified":1681376636412},{"_id":"public/tags/异步编程/index.html","hash":"2e96dee65ea808055dbbdff6ef350960899a9193","modified":1681376636412},{"_id":"public/tags/算法/index.html","hash":"13d46c2134e165642a25abb2dd6e4043da46a090","modified":1681376636412},{"_id":"public/tags/冷战/index.html","hash":"62231bd9fbd6e404b11fd31e533a8eb47aab6408","modified":1681376636412},{"_id":"public/tags/历史/index.html","hash":"fc2888185b2aaa4a896e7385c30e1f392437edc5","modified":1681376636412},{"_id":"public/tags/美国/index.html","hash":"76ea4ede87751ccdaafda5022116e5fa0752bd8a","modified":1681376636412},{"_id":"public/tags/苏联/index.html","hash":"7c7aeadf8d8489989332d87fb32134ac7d12e829","modified":1681376636412},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1681217299530},{"_id":"public/img/Cover_CsharpAsync.png","hash":"d7f4a502101c37e1c7afaef57b5cca2353c8b039","modified":1681217299530},{"_id":"public/img/Cover_LeetCode.png","hash":"10fbcff84bef167e42fe7e2a3d64e2d160cdb2a3","modified":1681217299530},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1681217299530},{"_id":"public/img/favicon-32x32-next.ico","hash":"1466029f6ce1e8d3b5069357cf4daeb947994818","modified":1681217299530},{"_id":"public/2023/03/20/ET框架初步理解/4a45803c69ed8b7283f933aa6e1748973976ef4c.png","hash":"099947dcd47ccf15acd4bfb492893de18f6d44e3","modified":1681217299530},{"_id":"public/2023/03/23/ET框架TulipBubble实现逻辑/2023-03-23-21-05-52-image.png","hash":"bde4ff7002cd030fa1102020239644bcb1173e63","modified":1681217299530},{"_id":"public/2023/03/20/ET框架初步理解/6e285ffc782c8443b1070964510e9530573f6c2d.png","hash":"e69da7540315e68734be8a58acde9fe38b18705c","modified":1681217299530},{"_id":"public/2023/03/20/ET框架初步理解/BackConfig.png","hash":"e69da7540315e68734be8a58acde9fe38b18705c","modified":1681217299530},{"_id":"public/2023/03/20/ET框架初步理解/BackEnd.png","hash":"a3e70c29093723ed7e586ae84e722ba191e1cb41","modified":1681217299530},{"_id":"public/2023/03/20/ET框架初步理解/7845ce3fdee147fca9d5c7fe4d86a890b717ecfe.png","hash":"a3e70c29093723ed7e586ae84e722ba191e1cb41","modified":1681217299530},{"_id":"public/2023/03/20/ET框架初步理解/front.png","hash":"099947dcd47ccf15acd4bfb492893de18f6d44e3","modified":1681217299530},{"_id":"public/2023/03/16/Github使用/089c68368fd64dc9463fcbb493992b46998e45ad.png","hash":"4d47c07f05640c03c28bbdb717d7a95bb5f24bb1","modified":1681217299530},{"_id":"public/2023/03/16/Github使用/14.png","hash":"7677a6db1891da89ab84e408979b0c7c424678c3","modified":1681217299530},{"_id":"public/2023/03/16/Github使用/15.png","hash":"2fbdb63fdcf5c2bdcbedff9dab6ab024fb7ee1c3","modified":1681217299530},{"_id":"public/2023/03/16/Github使用/2ac963f71072ecd1cc7f56f9153107153b737a36.png","hash":"10bb4f3cb67e25f5b2519d76448c673b7747527d","modified":1681217299530},{"_id":"public/2023/03/16/Github使用/3aa70b0531dc3e2625c09c1ef8eac0078a29f54e.png","hash":"75abf9f7efe0ee474d0411193e1198dc68f86fd3","modified":1681217299530},{"_id":"public/2023/03/16/Github使用/62a3a7a6fbde2da426ced06d782dbd6ee43fb5c4.png","hash":"6775f387bca276e70ff2514007ad175aaf9ebbc1","modified":1681217299530},{"_id":"public/2023/03/16/Github使用/69a4adad5fa74c60aa7fdd3ac358f9bb718b3b4b.png","hash":"2fbdb63fdcf5c2bdcbedff9dab6ab024fb7ee1c3","modified":1681217299530},{"_id":"public/2023/03/16/Github使用/c96a2283efc6cc31030410ff42e59ac41209443a.png","hash":"1b48b87d2eaea4bbea51fc48cf0343873ac0f6be","modified":1681217299530},{"_id":"public/2023/03/16/Github使用/c81d9e95a6974e43bb3d62b5ce7029b0c535f29d.png","hash":"7677a6db1891da89ab84e408979b0c7c424678c3","modified":1681217299530},{"_id":"public/2023/03/16/Github使用/dfd1bcd4b5e9efbe1d7e8d52c289e292c4bd2b04.png","hash":"5996a234a8b2c6e464289dccc762abe582f41ad4","modified":1681217299530},{"_id":"public/2023/03/16/Github使用/fc261c3347d67a16ae3d5eef1b72182071954565.png","hash":"95c5bc92ed845f1ebe8ec0b1ab0bafdfa2f11421","modified":1681217299530},{"_id":"public/2023/03/16/Github使用/git.png","hash":"95c5bc92ed845f1ebe8ec0b1ab0bafdfa2f11421","modified":1681217299530},{"_id":"public/2023/03/16/Github使用/practice00.png","hash":"75abf9f7efe0ee474d0411193e1198dc68f86fd3","modified":1681217299530},{"_id":"public/2023/03/16/Github使用/practice04.png","hash":"6775f387bca276e70ff2514007ad175aaf9ebbc1","modified":1681217299530},{"_id":"public/2023/03/16/Github使用/practice05.png","hash":"1b48b87d2eaea4bbea51fc48cf0343873ac0f6be","modified":1681217299530},{"_id":"public/2023/03/16/Github使用/practice06.png","hash":"10bb4f3cb67e25f5b2519d76448c673b7747527d","modified":1681217299530},{"_id":"public/2023/03/16/Github使用/practice11.png","hash":"4d47c07f05640c03c28bbdb717d7a95bb5f24bb1","modified":1681217299530},{"_id":"public/2023/03/16/Github使用/practice12.png","hash":"5996a234a8b2c6e464289dccc762abe582f41ad4","modified":1681217299530},{"_id":"public/2023/04/02/SingleChip/08a01404c19e5459d57c8e384f5eaf22869a43eb.png","hash":"bba592f3efaa9b21a2b296813d157b34d4ccf4ad","modified":1681217299530},{"_id":"public/2023/04/02/SingleChip/2023-04-07-17-11-07-Screenshot from 2023-04-07 17-10-50.png","hash":"7450fca37eb18343abf09714f7397dd82f204e3d","modified":1681217299530},{"_id":"public/2023/04/02/SingleChip/426941f16f054370a2e48c0b9334b919349fd85a.png","hash":"c7d0fe0ba21e89f4b93ee55462adcadf094607cf","modified":1681217299530},{"_id":"public/2023/04/02/SingleChip/4c9eeaf452c81e4203aab3ab35f203b530e08202.png","hash":"7dfc6fc126437e107817781a48e0fc6d620d7919","modified":1681217299530},{"_id":"public/2023/04/02/SingleChip/54c588817fcd205435a974f1d8077220d5485bf4.png","hash":"db1f87f906380a51ec28b7fb9ba5f1a4598fa466","modified":1681217299530},{"_id":"public/2023/04/02/SingleChip/57037c8bea42c86053227fe549874b419653b56c.png","hash":"7a43492f3bbbb9e7a242a88d2383d7a3991abd02","modified":1681217299530},{"_id":"public/2023/04/02/SingleChip/d5a14db6ef5b8ee6e4e4628c1290b38445a7835e.png","hash":"039d45d98182217a3d581bcc86a3d499be2df101","modified":1681217299530},{"_id":"public/2023/04/07/Ubuntu-Nodejs/2023-04-07-15-36-35-Screenshot from 2023-04-07 15-36-21.png","hash":"2fdc1f87a71bf81e8ff1637a502b8a78a32e7810","modified":1681217299530},{"_id":"public/2023/02/25/videos/b4c79bb4937a8fe3e059d09f307c0293b448d348.jpg","hash":"d8a2da35a9f9aeee81cec02721bc69e52a929fe5","modified":1681217299530},{"_id":"public/2023/02/25/videos/CodWar.jpg","hash":"d8a2da35a9f9aeee81cec02721bc69e52a929fe5","modified":1681217299530},{"_id":"public/img/Brian.png","hash":"7de9fd48da2eede4010942677beb0cec567f85ec","modified":1681217299530},{"_id":"public/2023/03/16/Github使用/265bf46b38778fb7476094dda85d00debb635e85.png","hash":"bfb25df7eec92350e8320d2bb12879e0192560dc","modified":1681217299530},{"_id":"public/2023/03/16/Github使用/5ea18123f9a50a08ca1fd5562c479b4aa184a2e4.png","hash":"8d3132d4b3e9cb6d8403a26a224a63488e83df51","modified":1681217299530},{"_id":"public/2023/03/16/Github使用/practice01.png","hash":"bfb25df7eec92350e8320d2bb12879e0192560dc","modified":1681217299530},{"_id":"public/2023/03/16/Github使用/practice08.png","hash":"8d3132d4b3e9cb6d8403a26a224a63488e83df51","modified":1681217299530},{"_id":"public/2023/04/02/SingleChip/53dd30183091b0bb68dfbdb15031cc2dfa2e0306.png","hash":"4b87b76ad8ee5a78483ec34af4602d89bf102769","modified":1681217299530},{"_id":"public/2023/04/02/SingleChip/62d506ea99c99e2d95a5c5d0b00410291b1a7de4.png","hash":"8e789ab593ccf3bfecc41e9d019808797448d7ef","modified":1681217299530},{"_id":"public/2023/04/02/SingleChip/ba71358b9ca3c9a533af1de889672b443827b2b5.png","hash":"25e64925ccd989e516653983aa286b3ed756b7ef","modified":1681217299530},{"_id":"public/2023/04/07/Ubuntu-Nodejs/1b20eb77d85e7959657003b7b219a44065b0876d.png","hash":"4c470fc0a265cb7adbf4148b478a6d617d1c8279","modified":1681217299530},{"_id":"public/2023/04/07/Ubuntu-Nodejs/2023-04-07-15-31-01-Screenshot from 2023-04-07 15-30-53.png","hash":"5accee79ee52949f6e61674997ef81c213296076","modified":1681217299530},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1681217299530},{"_id":"public/js/utils.js","hash":"85bae4adcec638fa3ef1e734414025c6b2c90f3c","modified":1681217299530},{"_id":"public/js/search/algolia.js","hash":"5f4294337c28324e088908ed0ceb237a2a360ae5","modified":1681217299530},{"_id":"public/js/search/local-search.js","hash":"5f2ddfd705a85c6a6d327ffcb51d530d8f167e52","modified":1681217299530},{"_id":"public/css/index.css","hash":"8a575040eaf41321c9814339f35af6906598fca4","modified":1681217299530},{"_id":"public/js/main.js","hash":"05c825962e365af62096d3f1b4d7c9ee1b5fc2f5","modified":1681217299530},{"_id":"public/js/tw_cn.js","hash":"76d0c5c172cae44b34b0bd3125fd068b2c3cbd4a","modified":1681217299530},{"_id":"public/2023/03/16/Github使用/13.png","hash":"83c9405fddb316a574fed3b4c4e53f97cfae2434","modified":1681217299530},{"_id":"public/2023/03/16/Github使用/51204e17ea43f7a1992ea9abbf9ecb48768694fa.png","hash":"d2e4845c696d32fa1b277633f3c51d96beb9bef8","modified":1681217299530},{"_id":"public/2023/03/16/Github使用/578439ae227066f02d1319f645f09b0567c46bd6.png","hash":"dfdf31f250ed49d7bcbadc87543eebfa19ef70d5","modified":1681217299530},{"_id":"public/2023/03/16/Github使用/5a1f2bfbce2c6557b2d3442934c0a92b8a606944.png","hash":"84a8316c92b9fb561f279cdd2c47e2993b73bd07","modified":1681217299530},{"_id":"public/2023/03/16/Github使用/6aa5405ba7ffbe9c8760c5891854c1041e688d10.png","hash":"7f6a71fbc1baa1cda2ca035ba6c9869a5bfc2707","modified":1681217299530},{"_id":"public/2023/03/16/Github使用/86324066a24e3eb32af8305f91c0a064582ae9d5.png","hash":"5a51c07bcd6d4ffc9d848b8255be5311f7c52336","modified":1681217299530},{"_id":"public/2023/03/16/Github使用/git01.png","hash":"5a51c07bcd6d4ffc9d848b8255be5311f7c52336","modified":1681217299530},{"_id":"public/2023/03/16/Github使用/practice02.png","hash":"84a8316c92b9fb561f279cdd2c47e2993b73bd07","modified":1681217299530},{"_id":"public/2023/03/16/Github使用/practice03.png","hash":"dfdf31f250ed49d7bcbadc87543eebfa19ef70d5","modified":1681217299530},{"_id":"public/2023/03/16/Github使用/practice07.png","hash":"d2e4845c696d32fa1b277633f3c51d96beb9bef8","modified":1681217299530},{"_id":"public/2023/03/16/Github使用/practice09.png","hash":"7f6a71fbc1baa1cda2ca035ba6c9869a5bfc2707","modified":1681217299530},{"_id":"public/2023/03/16/Github使用/10.png","hash":"571fa7d797a24a5fc7062744c82fadad88818d7b","modified":1681217299530},{"_id":"public/2023/03/16/Github使用/7e1e6ca628c6bcc92afce94e8ce7a0cd9a491ac1.png","hash":"571fa7d797a24a5fc7062744c82fadad88818d7b","modified":1681217299530},{"_id":"public/2023/04/02/SingleChip/2023-04-02-02-04-46-image.png","hash":"76b60efcdb909622a52e2370f92b54a420e875c6","modified":1681217299530},{"_id":"public/2023/04/02/SingleChip/2023-04-02-02-04-59-image.png","hash":"76b60efcdb909622a52e2370f92b54a420e875c6","modified":1681217299530},{"_id":"public/2023/04/02/SingleChip/2023-04-02-02-05-40-image.png","hash":"76b60efcdb909622a52e2370f92b54a420e875c6","modified":1681217299530},{"_id":"public/2023/04/02/SingleChip/2023-04-07-15-48-18-Screenshot from 2023-04-07 15-47-51.png","hash":"cd8a29cbfb9485256fae756650dfee5a74984a83","modified":1681217299530},{"_id":"public/2023/04/02/SingleChip/2023-04-07-16-44-34-Screenshot from 2023-04-07 15-47-51.png","hash":"cd8a29cbfb9485256fae756650dfee5a74984a83","modified":1681217299530},{"_id":"public/2023/04/02/SingleChip/5dd629b107312e0c0f858dd937af777ac3045bcd.png","hash":"cd8a29cbfb9485256fae756650dfee5a74984a83","modified":1681217299530},{"_id":"public/img/Top_img.jpg","hash":"c3f02f90c66d0840bd4391c2dea49bc3dc224c65","modified":1681217299530},{"_id":"themes/butterfly/source/img/Cover_SingleChip.png","hash":"7c3f53f233a0d6ebb8e6fd397233a5ee08cec1ce","modified":1681317019591},{"_id":"themes/butterfly/source/img/Cover_UbuntuNodejs.png","hash":"70d15c94d332d1c42479f2a1228ee9b1b2e8f9eb","modified":1681317836056},{"_id":"public/tags/学习/index.html","hash":"2a7b46b98f37370e4e13a4d6af21772aca131a46","modified":1681376636412},{"_id":"public/img/Cover_UbuntuNodejs.png","hash":"70d15c94d332d1c42479f2a1228ee9b1b2e8f9eb","modified":1681317913061},{"_id":"public/img/Cover_SingleChip.png","hash":"7c3f53f233a0d6ebb8e6fd397233a5ee08cec1ce","modified":1681317913061}],"Category":[{"name":"学习","_id":"clgc9df2f00043cu47ud68szf"}],"Data":[],"Page":[{"title":"categories","date":"2023-04-10T06:45:02.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2023-04-10 14:45:02\ntype: \"categories\"\n---\n","updated":"2023-04-10T06:45:42.694Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clgc9df2700003cu43ees4d7t","content":"","site":{"data":{}},"cover":false,"excerpt":"","more":""},{"title":"tags","date":"2023-03-18T12:47:51.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2023-03-18 20:47:51\ntype: tags\n---\n","updated":"2023-04-05T14:51:26.167Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clgc9df2d00023cu46mz4g100","content":"","site":{"data":{}},"cover":false,"excerpt":"","more":""}],"Post":[{"title":"C#异步编程","date":"2023-04-10T18:10:37.000Z","top_img":"/img/Top_img.jpg","cover":"/img/Cover_CsharpAsync.png","_content":"","source":"_posts/CsharpAsync.md","raw":"---\ntitle: C#异步编程\ndate: 2023-04-11 02:10:37\ntags: ['C#','异步编程']\ncategories: ['学习']\ntop_img: /img/Top_img.jpg\ncover: /img/Cover_CsharpAsync.png\n---\n","slug":"CsharpAsync","published":1,"updated":"2023-04-11T09:03:31.372Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgc9df2a00013cu4c9lg5v4i","content":"","site":{"data":{}},"cover_type":"img","excerpt":"","more":""},{"title":"ET框架TulipBubble实现逻辑","date":"2023-03-23T11:54:39.000Z","_content":"\n* **登录注册逻辑**\n  \n  * UI\n    \n    有关脚本\n    \n    > UIEventType.cs\n    > \n    > TulipLobbyFactory.cs\n    > \n    > TulipLobbyComponent.cs\n    \n    UIEventType.cs：注册创建UI的事件去调用TulipLobbyFactory\n    \n    TulipLobbyFactory.cs：创建UI的事件给UI添加TulipLobbyComponent组件\n    \n    TulipLobbyComponent.cs：获取UI中的信息，给登录/注册按钮添加事件\n  \n  <!--more-->\n  \n  * 网络\n    \n    <img title=\"\" src=\"ET框架TulipBubble实现逻辑/2023-03-23-21-05-52-image.png\" alt=\"\" data-align=\"center\">\n    \n    有关脚本\n    \n    > - 前端\n    >   \n    >   TulipHelper.cs\n    > \n    > - 后端\n    >   \n    >   - Realm\n    >     \n    >     A0002_LoginHandler.cs\n    >     \n    >     A0001_RegisterHandler.cs\n    >   \n    >   - Gate\n    >     \n    >     A0006_GetLoginKey.cs\n    >     \n    >     A0003_LoginGateHandler.cs\n    \n    TulipHelper.cs：不多说，向Realm发送登录{account,password}和注册请求{account,password}；发送登录后接收到Realm服的Gate服ip地址和Key后向Gate服发送登录请求{key}\n    \n    <br/>\n    \n    A0002_LoginHandler.cs：\n    \n    > 接收C登录请求{account,password}\n    > \n    > 判断账号密码是否合法\n    > \n    > 如果合法发给G{UserId}请求Key\n    > \n    > 回复C{GateIP,Key}\n    \n    A0006_GetLoginKey.cs：\n    \n    > 接收R{UserID}\n    > \n    > 利用UserID在SeesionKeyComponent中绑定UserId和Key\n    > \n    > 回复R{Key}\n    \n    A0001_RegisterHandler.cs:\n    \n    > 接收C注册请求{account,password}\n    > \n    > 判断账号是否合法\n    > \n    > 如果合法将AccountInfo和UserInfo保存到数据库\n    > \n    > 回复C{注册成功}\n    \n    A0003_LoginGateHandler.cs：\n    \n    > 接收C登录请求{key}\n    > \n    > 验证Key合法性\n    > \n    > 如果合法将UserId和Key解绑\n    > \n    > 使用UserId创建User\n    > \n    > 添加User到UserComponent\n    > \n    > Session添加SessionUserComponent 绑定Seession和User\n    > \n    > Session添加MailBoxComponent 通过MailBox进行actor通信\n    > \n    > 设置User的参数GateAppID，GateSessionID，ActorID\n    > \n    > 回复C{UserID}\n","source":"_posts/ET框架TulipBubble实现逻辑.md","raw":"---\ntitle: ET框架TulipBubble实现逻辑\ndate: 2023-03-23 19:54:39\ntags: \n---\n\n* **登录注册逻辑**\n  \n  * UI\n    \n    有关脚本\n    \n    > UIEventType.cs\n    > \n    > TulipLobbyFactory.cs\n    > \n    > TulipLobbyComponent.cs\n    \n    UIEventType.cs：注册创建UI的事件去调用TulipLobbyFactory\n    \n    TulipLobbyFactory.cs：创建UI的事件给UI添加TulipLobbyComponent组件\n    \n    TulipLobbyComponent.cs：获取UI中的信息，给登录/注册按钮添加事件\n  \n  <!--more-->\n  \n  * 网络\n    \n    <img title=\"\" src=\"ET框架TulipBubble实现逻辑/2023-03-23-21-05-52-image.png\" alt=\"\" data-align=\"center\">\n    \n    有关脚本\n    \n    > - 前端\n    >   \n    >   TulipHelper.cs\n    > \n    > - 后端\n    >   \n    >   - Realm\n    >     \n    >     A0002_LoginHandler.cs\n    >     \n    >     A0001_RegisterHandler.cs\n    >   \n    >   - Gate\n    >     \n    >     A0006_GetLoginKey.cs\n    >     \n    >     A0003_LoginGateHandler.cs\n    \n    TulipHelper.cs：不多说，向Realm发送登录{account,password}和注册请求{account,password}；发送登录后接收到Realm服的Gate服ip地址和Key后向Gate服发送登录请求{key}\n    \n    <br/>\n    \n    A0002_LoginHandler.cs：\n    \n    > 接收C登录请求{account,password}\n    > \n    > 判断账号密码是否合法\n    > \n    > 如果合法发给G{UserId}请求Key\n    > \n    > 回复C{GateIP,Key}\n    \n    A0006_GetLoginKey.cs：\n    \n    > 接收R{UserID}\n    > \n    > 利用UserID在SeesionKeyComponent中绑定UserId和Key\n    > \n    > 回复R{Key}\n    \n    A0001_RegisterHandler.cs:\n    \n    > 接收C注册请求{account,password}\n    > \n    > 判断账号是否合法\n    > \n    > 如果合法将AccountInfo和UserInfo保存到数据库\n    > \n    > 回复C{注册成功}\n    \n    A0003_LoginGateHandler.cs：\n    \n    > 接收C登录请求{key}\n    > \n    > 验证Key合法性\n    > \n    > 如果合法将UserId和Key解绑\n    > \n    > 使用UserId创建User\n    > \n    > 添加User到UserComponent\n    > \n    > Session添加SessionUserComponent 绑定Seession和User\n    > \n    > Session添加MailBoxComponent 通过MailBox进行actor通信\n    > \n    > 设置User的参数GateAppID，GateSessionID，ActorID\n    > \n    > 回复C{UserID}\n","slug":"ET框架TulipBubble实现逻辑","published":1,"updated":"2023-04-07T10:37:09.337Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgc9df2d00033cu4bdnt29wb","content":"<ul>\n<li><strong>登录注册逻辑</strong><ul>\n<li>UI有关脚本<blockquote>\n<p>UIEventType.cs</p>\n<p>TulipLobbyFactory.cs</p>\n<p>TulipLobbyComponent.cs</p>\n</blockquote>\nUIEventType.cs：注册创建UI的事件去调用TulipLobbyFactoryTulipLobbyFactory.cs：创建UI的事件给UI添加TulipLobbyComponent组件TulipLobbyComponent.cs：获取UI中的信息，给登录/注册按钮添加事件</li>\n</ul>\n<span id=\"more\"></span>\n\n<ul>\n<li>网络<img title src=\"/2023/03/23/ET%E6%A1%86%E6%9E%B6TulipBubble%E5%AE%9E%E7%8E%B0%E9%80%BB%E8%BE%91/2023-03-23-21-05-52-image.png\" alt data-align=\"center\">\n\n有关脚本<blockquote>\n<ul>\n<li><p>前端</p>\n<p>TulipHelper.cs</p>\n</li>\n<li><p>后端</p>\n<ul>\n<li><p>Realm</p>\n<p>A0002_LoginHandler.cs</p>\n<p>A0001_RegisterHandler.cs</p>\n</li>\n<li><p>Gate</p>\n<p>A0006_GetLoginKey.cs</p>\n<p>A0003_LoginGateHandler.cs</p>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>\nTulipHelper.cs：不多说，向Realm发送登录{account,password}和注册请求{account,password}；发送登录后接收到Realm服的Gate服ip地址和Key后向Gate服发送登录请求{key}<br>\n\nA0002_LoginHandler.cs：<blockquote>\n<p>接收C登录请求{account,password}</p>\n<p>判断账号密码是否合法</p>\n<p>如果合法发给G{UserId}请求Key</p>\n<p>回复C{GateIP,Key}</p>\n</blockquote>\nA0006_GetLoginKey.cs：<blockquote>\n<p>接收R{UserID}</p>\n<p>利用UserID在SeesionKeyComponent中绑定UserId和Key</p>\n<p>回复R{Key}</p>\n</blockquote>\nA0001_RegisterHandler.cs:<blockquote>\n<p>接收C注册请求{account,password}</p>\n<p>判断账号是否合法</p>\n<p>如果合法将AccountInfo和UserInfo保存到数据库</p>\n<p>回复C{注册成功}</p>\n</blockquote>\nA0003_LoginGateHandler.cs：<blockquote>\n<p>接收C登录请求{key}</p>\n<p>验证Key合法性</p>\n<p>如果合法将UserId和Key解绑</p>\n<p>使用UserId创建User</p>\n<p>添加User到UserComponent</p>\n<p>Session添加SessionUserComponent 绑定Seession和User</p>\n<p>Session添加MailBoxComponent 通过MailBox进行actor通信</p>\n<p>设置User的参数GateAppID，GateSessionID，ActorID</p>\n<p>回复C{UserID}</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"cover":false,"excerpt":"<ul>\n<li><strong>登录注册逻辑</strong><ul>\n<li>UI有关脚本<blockquote>\n<p>UIEventType.cs</p>\n<p>TulipLobbyFactory.cs</p>\n<p>TulipLobbyComponent.cs</p>\n</blockquote>\nUIEventType.cs：注册创建UI的事件去调用TulipLobbyFactoryTulipLobbyFactory.cs：创建UI的事件给UI添加TulipLobbyComponent组件TulipLobbyComponent.cs：获取UI中的信息，给登录/注册按钮添加事件</li>\n</ul></li></ul>","more":"<ul>\n<li>网络<img title src=\"/2023/03/23/ET%E6%A1%86%E6%9E%B6TulipBubble%E5%AE%9E%E7%8E%B0%E9%80%BB%E8%BE%91/2023-03-23-21-05-52-image.png\" alt data-align=\"center\">\n\n有关脚本<blockquote>\n<ul>\n<li><p>前端</p>\n<p>TulipHelper.cs</p>\n</li>\n<li><p>后端</p>\n<ul>\n<li><p>Realm</p>\n<p>A0002_LoginHandler.cs</p>\n<p>A0001_RegisterHandler.cs</p>\n</li>\n<li><p>Gate</p>\n<p>A0006_GetLoginKey.cs</p>\n<p>A0003_LoginGateHandler.cs</p>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>\nTulipHelper.cs：不多说，向Realm发送登录{account,password}和注册请求{account,password}；发送登录后接收到Realm服的Gate服ip地址和Key后向Gate服发送登录请求{key}<br>\n\nA0002_LoginHandler.cs：<blockquote>\n<p>接收C登录请求{account,password}</p>\n<p>判断账号密码是否合法</p>\n<p>如果合法发给G{UserId}请求Key</p>\n<p>回复C{GateIP,Key}</p>\n</blockquote>\nA0006_GetLoginKey.cs：<blockquote>\n<p>接收R{UserID}</p>\n<p>利用UserID在SeesionKeyComponent中绑定UserId和Key</p>\n<p>回复R{Key}</p>\n</blockquote>\nA0001_RegisterHandler.cs:<blockquote>\n<p>接收C注册请求{account,password}</p>\n<p>判断账号是否合法</p>\n<p>如果合法将AccountInfo和UserInfo保存到数据库</p>\n<p>回复C{注册成功}</p>\n</blockquote>\nA0003_LoginGateHandler.cs：<blockquote>\n<p>接收C登录请求{key}</p>\n<p>验证Key合法性</p>\n<p>如果合法将UserId和Key解绑</p>\n<p>使用UserId创建User</p>\n<p>添加User到UserComponent</p>\n<p>Session添加SessionUserComponent 绑定Seession和User</p>\n<p>Session添加MailBoxComponent 通过MailBox进行actor通信</p>\n<p>设置User的参数GateAppID，GateSessionID，ActorID</p>\n<p>回复C{UserID}</p>\n</blockquote>\n</li>\n</ul>\n\n"},{"title":"Github使用","date":"2023-03-16T11:33:42.000Z","_content":"\n![](Github使用/fc261c3347d67a16ae3d5eef1b72182071954565.png)\n\n**常用的命令**\n\n1. 克隆仓库\n   \n   ```bash\n   $ git clone <repo> <directory>\n   ```\n   \n   * repo:Git 仓库\n   \n   * directory:本地目录\n\n<!-- more -->\n\n* 初始化仓库\n  \n  ```bash\n  $ git init <directory>\n  ```\n  \n  * directory:本地目录\n\n* 查看仓库状态\n  \n  ```bash\n  $ git status\n  ```\n\n* 添加文件\n  \n  ```bash\n  $ git add [file1] [file2] ...\n  $ git add [dir]\n  ```\n  \n  * file:文件\n  * dir:文件夹\n\n* 删除文件\n  \n  ```bash\n  $ git rm [-f | --force] [-n] [-r] [--cached] [--ignore-unmatch] [--quiet] [--pathspec-from-file=<file> [--pathspec-file-nul]] [--] [<pathspec>…​]\n  ```\n  \n  * f:覆盖最新的检测\n  * n/dry-run:不在硬盘上删除文件，只在仓库中删除文件\n  * r:递归删除文件夹\n  * cached:使用此选项仅从索引中取消和删除路径。工作树文件，无论是否修改，都将保持不变\n  * ignore-unmatch:即使没有匹配的文件，也会以0状态退出\n  * q/quiet:不打印输出\n  * pathspec:要删除的文件\n\n* 移动文件\n  \n  ```bash\n  $ git mv [-v] [-f] [-n] [-k] <source> <destination>\n  $ git mv [-v] [-f] [-n] [-k] <source> ... <destination directory>\n  ```\n  \n  * v/verbose:打印被移除文件的名称\n  * f/force:强制覆盖目标文件\n  * n/dry-run:只说明会做什么\n  * k:跳过重命名\n\n* 比较状态\n  \n  ```bash\n  $ git diff [file] 显示暂存区和工作区的差异\n  $ git diff --cached/staged [file] 显示暂存区和上一次提交(commit)的差异\n  $ git diff [first-branch]...[second-branch]\n  ```\n\n* 提交命令\n  \n  ```bash\n  $ git commit -m [message]\n  ```\n  \n  * message：可以是一些备注信息。\n\n* 回退版本\n  \n  ```bash\n  $ git reset [--soft | --mixed | --hard] [HEAD]\n  ```\n  \n  * mixed：为默认，可以不用带该参数，用于重置暂存区的文件与上一次的提交(commit)保持一致，工作区文件内容保持不变\n  * soft 参数用于回退到某个版本\n  * hard 参数撤销工作区中所有未提交的修改内容，将暂存区与工作区都回到上一次版本，并删除之前的所有信息提交\n\n* 分支相关\n  \n  ```bash\n  \\#列出本地所有分支\n  git branch\n  \\#列出所有远程分支\n  git branch -r\n  \\#新建一个分支，但依然停留在当前分支\n  git branch 分支名\n  \\#新建一个分支，并切换到该分支\n  git checkout -b 分支名\n  \\#合并指定分支到当前分支\n  git merge 分支名\n  \\#删除分支\n  git branch -d 分支名\n  \\#删除远程分支\n  git push origin --delete 分支名\n  git branch -dr 分支名\n  ```\n\n**提交代码**\n\n![](Github使用/86324066a24e3eb32af8305f91c0a064582ae9d5.png)\n\n向Github提交代码的两种情况\n\n1. 本地没有 Git 仓库，将远程仓库clone到本地\n   \n    通过clone命令创建的本地仓库，其本身就是一个 Git 仓库了，不用我们再进行\n    init初始化操作啦，而且自动关联远程仓库。我们只需要在这个仓库进行修改或者\n    添加等操作，然后commit即可。\n   \n   ```bash\n   $ git clone \"仓库地址\"\n   $ git push origin main\n   ```\n\n2. 本地有 Git 仓库，并且我们已经进行了多次commit操作\n   \n    进入仓库,关联远程仓库，origin为远程仓库的名字\n   \n   ```bash\n   $ git remote add origin 仓库地址\n   ```\n   \n    同步远程仓库和本地仓库\n   \n   ```bash\n   $ git pull origin main\n   ```\n   \n   强调:在向远程仓库提交代码的时候，一定要先进行pull操作，再进行push操作，防止本地仓库与远程仓库不同步导致冲突的问题，尤其是第二种提交代码的情况，很容易就出现问题。\n\n**实际使用**\n\n转载自[原文](https://blog.csdn.net/nrsc272420199/article/details/85219097)\n1.远程仓库只有一个master分支的情况\n   需要用到的命令\n\n```bash\ngit pull----------------从远程仓库拉取代码到本地\ngit stash---------------将你修改后的代码存储到本地(一个栈结构)-->一般会在git pull码失败时使用\ngit stash pop-----------将你stash到本地的代码与重新git pull下的代码合并\ngit add XXX-------------将XXX文件加入到暂存区\ngit commit -m \"注释\"----将暂存区的文件提交到本地仓库\ngit push----------------将本地仓库的内容推送到远程仓库\n```\n\n2. 实际场景\n   假设开发者A和开发者B都刚刚从远程仓库checkout了一份代码到本地.\n\nA:\n首先开发者A在README.md文件中进行了如下修改:\n\n![](Github使用/3aa70b0531dc3e2625c09c1ef8eac0078a29f54e.png)然后将修改内容按照如下方式提交到远程仓库:\n![](Github使用/265bf46b38778fb7476094dda85d00debb635e85.png)\n\nB:\n ![](Github使用/5a1f2bfbce2c6557b2d3442934c0a92b8a606944.png)  开发者B此时也要开发代码了,正常来讲,如果开发者B在开发完一个功能需要提交代码之前,肯定要git pull一下代码.比如说开发者B在README.md的第三行里增加了一句话,然后他去git pull代码,结果如下:\n\n**★注意点1★–git监控变化的单位是文件**\n   我不知道大家在这里会不会疑惑,反正我疑惑过很久,明明我在Git Bash里改动的是第二行,在Idea里改动的是第三行,不是说git监测的是变化吗?这里怎么就pull不下来呢?其实git所谓的监控变化,监控的单位是文件,也就是说假如其他开发者改动了XXX文件,并且同步到远程库了,你即使在XXX文件里改动了一个标点,加了一个空格,都无法pull成功.\n   git pull不成功时,你就需要使用git stash命令了,具体解决方式如下:\n\n![](Github使用/578439ae227066f02d1319f645f09b0567c46bd6.png)\n\n![](Github使用/62a3a7a6fbde2da426ced06d782dbd6ee43fb5c4.png)\n\n**★注意点2★–git pull可以把所有你上次push后没操作的文件pull下来**\nA:\n  接着上面的栗子,假设Git Bash用户同步了服务端的代码,并且在没跟IDEA用户商量的情况下,擅自修改了IDEA用户的代码,如下:\n\n![](Github使用/2ac963f71072ecd1cc7f56f9153107153b737a36.png)\n![](Github使用/c96a2283efc6cc31030410ff42e59ac41209443a.png)  并且Git Bash用户还创建了一个新的文件,如下:\n\nB:\n  开发者B如果没有进行开发,或者进行了其他文件的开发,而未对README.md文件进行操作,直接git pull,效果见下图.可以发现,git pull可以把所有你上次push后没操作的文件pull下来,并将你本地的代码变成和远程仓库一样的代码.\n\n![](Github使用/51204e17ea43f7a1992ea9abbf9ecb48768694fa.png)所以奉在pull代码的时候一定要多注意看一下代码有没有被改动过.\n\n3.使用idea的Update Project代替git pull + git stash +git stash pop\n\n![](Github使用/5ea18123f9a50a08ca1fd5562c479b4aa184a2e4.png)然后点击一下OK,就会弹出如下页面:\n\n![](Github使用/6aa5405ba7ffbe9c8760c5891854c1041e688d10.png)   然后双击一下有冲突的文件之后,就会弹出如下页面,自我感觉在这个界面里进行冲突解决,要比注意点1中第一个图,那种解决方式爽一些.\n\n![](Github使用/7e1e6ca628c6bcc92afce94e8ce7a0cd9a491ac1.png)并且解决完冲突后,立刻会弹出如下提示:\n\n![](Github使用/089c68368fd64dc9463fcbb493992b46998e45ad.png)点开提示之后,你就可以看到哪些文件修改了,哪些文件是新增的,而且你肯定会想去看看你原来操作过的文件有没有被updated过,从而避免注意点2中提到的情况.\n![{% asset_img practice12.png git图解 %}](Github使用/dfd1bcd4b5e9efbe1d7e8d52c289e292c4bd2b04.png)\n\n**git merge 相关**\n\n1. 在分支之后未对代码修改\n   \n   ![](Github使用/c81d9e95a6974e43bb3d62b5ce7029b0c535f29d.png)\n\n2. 在分支之对代码修改\n   \n   ![](Github使用/69a4adad5fa74c60aa7fdd3ac358f9bb718b3b4b.png)\n","source":"_posts/Github使用.md","raw":"---\ntitle: Github使用\ndate: 2023-03-16 19:33:42\ntags:\n---\n\n![](Github使用/fc261c3347d67a16ae3d5eef1b72182071954565.png)\n\n**常用的命令**\n\n1. 克隆仓库\n   \n   ```bash\n   $ git clone <repo> <directory>\n   ```\n   \n   * repo:Git 仓库\n   \n   * directory:本地目录\n\n<!-- more -->\n\n* 初始化仓库\n  \n  ```bash\n  $ git init <directory>\n  ```\n  \n  * directory:本地目录\n\n* 查看仓库状态\n  \n  ```bash\n  $ git status\n  ```\n\n* 添加文件\n  \n  ```bash\n  $ git add [file1] [file2] ...\n  $ git add [dir]\n  ```\n  \n  * file:文件\n  * dir:文件夹\n\n* 删除文件\n  \n  ```bash\n  $ git rm [-f | --force] [-n] [-r] [--cached] [--ignore-unmatch] [--quiet] [--pathspec-from-file=<file> [--pathspec-file-nul]] [--] [<pathspec>…​]\n  ```\n  \n  * f:覆盖最新的检测\n  * n/dry-run:不在硬盘上删除文件，只在仓库中删除文件\n  * r:递归删除文件夹\n  * cached:使用此选项仅从索引中取消和删除路径。工作树文件，无论是否修改，都将保持不变\n  * ignore-unmatch:即使没有匹配的文件，也会以0状态退出\n  * q/quiet:不打印输出\n  * pathspec:要删除的文件\n\n* 移动文件\n  \n  ```bash\n  $ git mv [-v] [-f] [-n] [-k] <source> <destination>\n  $ git mv [-v] [-f] [-n] [-k] <source> ... <destination directory>\n  ```\n  \n  * v/verbose:打印被移除文件的名称\n  * f/force:强制覆盖目标文件\n  * n/dry-run:只说明会做什么\n  * k:跳过重命名\n\n* 比较状态\n  \n  ```bash\n  $ git diff [file] 显示暂存区和工作区的差异\n  $ git diff --cached/staged [file] 显示暂存区和上一次提交(commit)的差异\n  $ git diff [first-branch]...[second-branch]\n  ```\n\n* 提交命令\n  \n  ```bash\n  $ git commit -m [message]\n  ```\n  \n  * message：可以是一些备注信息。\n\n* 回退版本\n  \n  ```bash\n  $ git reset [--soft | --mixed | --hard] [HEAD]\n  ```\n  \n  * mixed：为默认，可以不用带该参数，用于重置暂存区的文件与上一次的提交(commit)保持一致，工作区文件内容保持不变\n  * soft 参数用于回退到某个版本\n  * hard 参数撤销工作区中所有未提交的修改内容，将暂存区与工作区都回到上一次版本，并删除之前的所有信息提交\n\n* 分支相关\n  \n  ```bash\n  \\#列出本地所有分支\n  git branch\n  \\#列出所有远程分支\n  git branch -r\n  \\#新建一个分支，但依然停留在当前分支\n  git branch 分支名\n  \\#新建一个分支，并切换到该分支\n  git checkout -b 分支名\n  \\#合并指定分支到当前分支\n  git merge 分支名\n  \\#删除分支\n  git branch -d 分支名\n  \\#删除远程分支\n  git push origin --delete 分支名\n  git branch -dr 分支名\n  ```\n\n**提交代码**\n\n![](Github使用/86324066a24e3eb32af8305f91c0a064582ae9d5.png)\n\n向Github提交代码的两种情况\n\n1. 本地没有 Git 仓库，将远程仓库clone到本地\n   \n    通过clone命令创建的本地仓库，其本身就是一个 Git 仓库了，不用我们再进行\n    init初始化操作啦，而且自动关联远程仓库。我们只需要在这个仓库进行修改或者\n    添加等操作，然后commit即可。\n   \n   ```bash\n   $ git clone \"仓库地址\"\n   $ git push origin main\n   ```\n\n2. 本地有 Git 仓库，并且我们已经进行了多次commit操作\n   \n    进入仓库,关联远程仓库，origin为远程仓库的名字\n   \n   ```bash\n   $ git remote add origin 仓库地址\n   ```\n   \n    同步远程仓库和本地仓库\n   \n   ```bash\n   $ git pull origin main\n   ```\n   \n   强调:在向远程仓库提交代码的时候，一定要先进行pull操作，再进行push操作，防止本地仓库与远程仓库不同步导致冲突的问题，尤其是第二种提交代码的情况，很容易就出现问题。\n\n**实际使用**\n\n转载自[原文](https://blog.csdn.net/nrsc272420199/article/details/85219097)\n1.远程仓库只有一个master分支的情况\n   需要用到的命令\n\n```bash\ngit pull----------------从远程仓库拉取代码到本地\ngit stash---------------将你修改后的代码存储到本地(一个栈结构)-->一般会在git pull码失败时使用\ngit stash pop-----------将你stash到本地的代码与重新git pull下的代码合并\ngit add XXX-------------将XXX文件加入到暂存区\ngit commit -m \"注释\"----将暂存区的文件提交到本地仓库\ngit push----------------将本地仓库的内容推送到远程仓库\n```\n\n2. 实际场景\n   假设开发者A和开发者B都刚刚从远程仓库checkout了一份代码到本地.\n\nA:\n首先开发者A在README.md文件中进行了如下修改:\n\n![](Github使用/3aa70b0531dc3e2625c09c1ef8eac0078a29f54e.png)然后将修改内容按照如下方式提交到远程仓库:\n![](Github使用/265bf46b38778fb7476094dda85d00debb635e85.png)\n\nB:\n ![](Github使用/5a1f2bfbce2c6557b2d3442934c0a92b8a606944.png)  开发者B此时也要开发代码了,正常来讲,如果开发者B在开发完一个功能需要提交代码之前,肯定要git pull一下代码.比如说开发者B在README.md的第三行里增加了一句话,然后他去git pull代码,结果如下:\n\n**★注意点1★–git监控变化的单位是文件**\n   我不知道大家在这里会不会疑惑,反正我疑惑过很久,明明我在Git Bash里改动的是第二行,在Idea里改动的是第三行,不是说git监测的是变化吗?这里怎么就pull不下来呢?其实git所谓的监控变化,监控的单位是文件,也就是说假如其他开发者改动了XXX文件,并且同步到远程库了,你即使在XXX文件里改动了一个标点,加了一个空格,都无法pull成功.\n   git pull不成功时,你就需要使用git stash命令了,具体解决方式如下:\n\n![](Github使用/578439ae227066f02d1319f645f09b0567c46bd6.png)\n\n![](Github使用/62a3a7a6fbde2da426ced06d782dbd6ee43fb5c4.png)\n\n**★注意点2★–git pull可以把所有你上次push后没操作的文件pull下来**\nA:\n  接着上面的栗子,假设Git Bash用户同步了服务端的代码,并且在没跟IDEA用户商量的情况下,擅自修改了IDEA用户的代码,如下:\n\n![](Github使用/2ac963f71072ecd1cc7f56f9153107153b737a36.png)\n![](Github使用/c96a2283efc6cc31030410ff42e59ac41209443a.png)  并且Git Bash用户还创建了一个新的文件,如下:\n\nB:\n  开发者B如果没有进行开发,或者进行了其他文件的开发,而未对README.md文件进行操作,直接git pull,效果见下图.可以发现,git pull可以把所有你上次push后没操作的文件pull下来,并将你本地的代码变成和远程仓库一样的代码.\n\n![](Github使用/51204e17ea43f7a1992ea9abbf9ecb48768694fa.png)所以奉在pull代码的时候一定要多注意看一下代码有没有被改动过.\n\n3.使用idea的Update Project代替git pull + git stash +git stash pop\n\n![](Github使用/5ea18123f9a50a08ca1fd5562c479b4aa184a2e4.png)然后点击一下OK,就会弹出如下页面:\n\n![](Github使用/6aa5405ba7ffbe9c8760c5891854c1041e688d10.png)   然后双击一下有冲突的文件之后,就会弹出如下页面,自我感觉在这个界面里进行冲突解决,要比注意点1中第一个图,那种解决方式爽一些.\n\n![](Github使用/7e1e6ca628c6bcc92afce94e8ce7a0cd9a491ac1.png)并且解决完冲突后,立刻会弹出如下提示:\n\n![](Github使用/089c68368fd64dc9463fcbb493992b46998e45ad.png)点开提示之后,你就可以看到哪些文件修改了,哪些文件是新增的,而且你肯定会想去看看你原来操作过的文件有没有被updated过,从而避免注意点2中提到的情况.\n![{% asset_img practice12.png git图解 %}](Github使用/dfd1bcd4b5e9efbe1d7e8d52c289e292c4bd2b04.png)\n\n**git merge 相关**\n\n1. 在分支之后未对代码修改\n   \n   ![](Github使用/c81d9e95a6974e43bb3d62b5ce7029b0c535f29d.png)\n\n2. 在分支之对代码修改\n   \n   ![](Github使用/69a4adad5fa74c60aa7fdd3ac358f9bb718b3b4b.png)\n","slug":"Github使用","published":1,"updated":"2023-04-05T14:51:26.126Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgc9df2h00063cu487gaa557","content":"<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/fc261c3347d67a16ae3d5eef1b72182071954565.png\"></p>\n<p><strong>常用的命令</strong></p>\n<ol>\n<li>克隆仓库<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> &lt;repo&gt; &lt;directory&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>repo:Git 仓库</p>\n</li>\n<li><p>directory:本地目录</p>\n</li>\n</ul>\n</li>\n</ol>\n<span id=\"more\"></span>\n\n<ul>\n<li><p>初始化仓库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git init &lt;directory&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>directory:本地目录</li>\n</ul>\n</li>\n<li><p>查看仓库状态</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status</span><br></pre></td></tr></table></figure></li>\n<li><p>添加文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add [file1] [file2] ...</span><br><span class=\"line\">$ git add [<span class=\"built_in\">dir</span>]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>file:文件</li>\n<li>dir:文件夹</li>\n</ul>\n</li>\n<li><p>删除文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">rm</span> [-f | --force] [-n] [-r] [--cached] [--ignore-unmatch] [--quiet] [--pathspec-from-file=&lt;file&gt; [--pathspec-file-nul]] [--] [&lt;pathspec&gt;…​]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>f:覆盖最新的检测</li>\n<li>n/dry-run:不在硬盘上删除文件，只在仓库中删除文件</li>\n<li>r:递归删除文件夹</li>\n<li>cached:使用此选项仅从索引中取消和删除路径。工作树文件，无论是否修改，都将保持不变</li>\n<li>ignore-unmatch:即使没有匹配的文件，也会以0状态退出</li>\n<li>q/quiet:不打印输出</li>\n<li>pathspec:要删除的文件</li>\n</ul>\n</li>\n<li><p>移动文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">mv</span> [-v] [-f] [-n] [-k] &lt;<span class=\"built_in\">source</span>&gt; &lt;destination&gt;</span><br><span class=\"line\">$ git <span class=\"built_in\">mv</span> [-v] [-f] [-n] [-k] &lt;<span class=\"built_in\">source</span>&gt; ... &lt;destination directory&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>v/verbose:打印被移除文件的名称</li>\n<li>f/force:强制覆盖目标文件</li>\n<li>n/dry-run:只说明会做什么</li>\n<li>k:跳过重命名</li>\n</ul>\n</li>\n<li><p>比较状态</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff [file] 显示暂存区和工作区的差异</span><br><span class=\"line\">$ git diff --cached/staged [file] 显示暂存区和上一次提交(commit)的差异</span><br><span class=\"line\">$ git diff [first-branch]...[second-branch]</span><br></pre></td></tr></table></figure></li>\n<li><p>提交命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -m [message]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>message：可以是一些备注信息。</li>\n</ul>\n</li>\n<li><p>回退版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset [--soft | --mixed | --hard] [HEAD]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>mixed：为默认，可以不用带该参数，用于重置暂存区的文件与上一次的提交(commit)保持一致，工作区文件内容保持不变</li>\n<li>soft 参数用于回退到某个版本</li>\n<li>hard 参数撤销工作区中所有未提交的修改内容，将暂存区与工作区都回到上一次版本，并删除之前的所有信息提交</li>\n</ul>\n</li>\n<li><p>分支相关</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\<span class=\"comment\">#列出本地所有分支</span></span><br><span class=\"line\">git branch</span><br><span class=\"line\">\\<span class=\"comment\">#列出所有远程分支</span></span><br><span class=\"line\">git branch -r</span><br><span class=\"line\">\\<span class=\"comment\">#新建一个分支，但依然停留在当前分支</span></span><br><span class=\"line\">git branch 分支名</span><br><span class=\"line\">\\<span class=\"comment\">#新建一个分支，并切换到该分支</span></span><br><span class=\"line\">git checkout -b 分支名</span><br><span class=\"line\">\\<span class=\"comment\">#合并指定分支到当前分支</span></span><br><span class=\"line\">git merge 分支名</span><br><span class=\"line\">\\<span class=\"comment\">#删除分支</span></span><br><span class=\"line\">git branch -d 分支名</span><br><span class=\"line\">\\<span class=\"comment\">#删除远程分支</span></span><br><span class=\"line\">git push origin --delete 分支名</span><br><span class=\"line\">git branch -dr 分支名</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>提交代码</strong></p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/86324066a24e3eb32af8305f91c0a064582ae9d5.png\"></p>\n<p>向Github提交代码的两种情况</p>\n<ol>\n<li><p>本地没有 Git 仓库，将远程仓库clone到本地</p>\n<p> 通过clone命令创建的本地仓库，其本身就是一个 Git 仓库了，不用我们再进行<br> init初始化操作啦，而且自动关联远程仓库。我们只需要在这个仓库进行修改或者<br> 添加等操作，然后commit即可。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> <span class=\"string\">&quot;仓库地址&quot;</span></span><br><span class=\"line\">$ git push origin main</span><br></pre></td></tr></table></figure></li>\n<li><p>本地有 Git 仓库，并且我们已经进行了多次commit操作</p>\n<p> 进入仓库,关联远程仓库，origin为远程仓库的名字</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote add origin 仓库地址</span><br></pre></td></tr></table></figure>\n\n<p> 同步远程仓库和本地仓库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull origin main</span><br></pre></td></tr></table></figure>\n\n<p>强调:在向远程仓库提交代码的时候，一定要先进行pull操作，再进行push操作，防止本地仓库与远程仓库不同步导致冲突的问题，尤其是第二种提交代码的情况，很容易就出现问题。</p>\n</li>\n</ol>\n<p><strong>实际使用</strong></p>\n<p>转载自<a href=\"https://blog.csdn.net/nrsc272420199/article/details/85219097\">原文</a><br>1.远程仓库只有一个master分支的情况<br>   需要用到的命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull----------------从远程仓库拉取代码到本地</span><br><span class=\"line\">git stash---------------将你修改后的代码存储到本地(一个栈结构)--&gt;一般会在git pull码失败时使用</span><br><span class=\"line\">git stash pop-----------将你stash到本地的代码与重新git pull下的代码合并</span><br><span class=\"line\">git add XXX-------------将XXX文件加入到暂存区</span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;注释&quot;</span>----将暂存区的文件提交到本地仓库</span><br><span class=\"line\">git push----------------将本地仓库的内容推送到远程仓库</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>实际场景<br>假设开发者A和开发者B都刚刚从远程仓库checkout了一份代码到本地.</li>\n</ol>\n<p>A:<br>首先开发者A在README.md文件中进行了如下修改:</p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/3aa70b0531dc3e2625c09c1ef8eac0078a29f54e.png\">然后将修改内容按照如下方式提交到远程仓库:<br><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/265bf46b38778fb7476094dda85d00debb635e85.png\"></p>\n<p>B:<br> <img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/5a1f2bfbce2c6557b2d3442934c0a92b8a606944.png\">  开发者B此时也要开发代码了,正常来讲,如果开发者B在开发完一个功能需要提交代码之前,肯定要git pull一下代码.比如说开发者B在README.md的第三行里增加了一句话,然后他去git pull代码,结果如下:</p>\n<p><strong>★注意点1★–git监控变化的单位是文件</strong><br>   我不知道大家在这里会不会疑惑,反正我疑惑过很久,明明我在Git Bash里改动的是第二行,在Idea里改动的是第三行,不是说git监测的是变化吗?这里怎么就pull不下来呢?其实git所谓的监控变化,监控的单位是文件,也就是说假如其他开发者改动了XXX文件,并且同步到远程库了,你即使在XXX文件里改动了一个标点,加了一个空格,都无法pull成功.<br>   git pull不成功时,你就需要使用git stash命令了,具体解决方式如下:</p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/578439ae227066f02d1319f645f09b0567c46bd6.png\"></p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/62a3a7a6fbde2da426ced06d782dbd6ee43fb5c4.png\"></p>\n<p><strong>★注意点2★–git pull可以把所有你上次push后没操作的文件pull下来</strong><br>A:<br>  接着上面的栗子,假设Git Bash用户同步了服务端的代码,并且在没跟IDEA用户商量的情况下,擅自修改了IDEA用户的代码,如下:</p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/2ac963f71072ecd1cc7f56f9153107153b737a36.png\"><br><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/c96a2283efc6cc31030410ff42e59ac41209443a.png\">  并且Git Bash用户还创建了一个新的文件,如下:</p>\n<p>B:<br>  开发者B如果没有进行开发,或者进行了其他文件的开发,而未对README.md文件进行操作,直接git pull,效果见下图.可以发现,git pull可以把所有你上次push后没操作的文件pull下来,并将你本地的代码变成和远程仓库一样的代码.</p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/51204e17ea43f7a1992ea9abbf9ecb48768694fa.png\">所以奉在pull代码的时候一定要多注意看一下代码有没有被改动过.</p>\n<p>3.使用idea的Update Project代替git pull + git stash +git stash pop</p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/5ea18123f9a50a08ca1fd5562c479b4aa184a2e4.png\">然后点击一下OK,就会弹出如下页面:</p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/6aa5405ba7ffbe9c8760c5891854c1041e688d10.png\">   然后双击一下有冲突的文件之后,就会弹出如下页面,自我感觉在这个界面里进行冲突解决,要比注意点1中第一个图,那种解决方式爽一些.</p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/7e1e6ca628c6bcc92afce94e8ce7a0cd9a491ac1.png\">并且解决完冲突后,立刻会弹出如下提示:</p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/089c68368fd64dc9463fcbb493992b46998e45ad.png\">点开提示之后,你就可以看到哪些文件修改了,哪些文件是新增的,而且你肯定会想去看看你原来操作过的文件有没有被updated过,从而避免注意点2中提到的情况.<br><img 16 2023 src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/dfd1bcd4b5e9efbe1d7e8d52c289e292c4bd2b04.png\" alt=\"<img src=\" 03 github%e4%bd%bf%e7%94%a8 practice12.png\" class title=\"git图解\">\"></p>\n<p><strong>git merge 相关</strong></p>\n<ol>\n<li><p>在分支之后未对代码修改</p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/c81d9e95a6974e43bb3d62b5ce7029b0c535f29d.png\"></p>\n</li>\n<li><p>在分支之对代码修改</p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/69a4adad5fa74c60aa7fdd3ac358f9bb718b3b4b.png\"></p>\n</li>\n</ol>\n","site":{"data":{}},"cover":false,"excerpt":"<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/fc261c3347d67a16ae3d5eef1b72182071954565.png\"></p>\n<p><strong>常用的命令</strong></p>\n<ol>\n<li>克隆仓库<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> &lt;repo&gt; &lt;directory&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>repo:Git 仓库</p>\n</li>\n<li><p>directory:本地目录</p>\n</li>\n</ul>\n</li>\n</ol>","more":"<ul>\n<li><p>初始化仓库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git init &lt;directory&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>directory:本地目录</li>\n</ul>\n</li>\n<li><p>查看仓库状态</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status</span><br></pre></td></tr></table></figure></li>\n<li><p>添加文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add [file1] [file2] ...</span><br><span class=\"line\">$ git add [<span class=\"built_in\">dir</span>]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>file:文件</li>\n<li>dir:文件夹</li>\n</ul>\n</li>\n<li><p>删除文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">rm</span> [-f | --force] [-n] [-r] [--cached] [--ignore-unmatch] [--quiet] [--pathspec-from-file=&lt;file&gt; [--pathspec-file-nul]] [--] [&lt;pathspec&gt;…​]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>f:覆盖最新的检测</li>\n<li>n/dry-run:不在硬盘上删除文件，只在仓库中删除文件</li>\n<li>r:递归删除文件夹</li>\n<li>cached:使用此选项仅从索引中取消和删除路径。工作树文件，无论是否修改，都将保持不变</li>\n<li>ignore-unmatch:即使没有匹配的文件，也会以0状态退出</li>\n<li>q/quiet:不打印输出</li>\n<li>pathspec:要删除的文件</li>\n</ul>\n</li>\n<li><p>移动文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">mv</span> [-v] [-f] [-n] [-k] &lt;<span class=\"built_in\">source</span>&gt; &lt;destination&gt;</span><br><span class=\"line\">$ git <span class=\"built_in\">mv</span> [-v] [-f] [-n] [-k] &lt;<span class=\"built_in\">source</span>&gt; ... &lt;destination directory&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>v/verbose:打印被移除文件的名称</li>\n<li>f/force:强制覆盖目标文件</li>\n<li>n/dry-run:只说明会做什么</li>\n<li>k:跳过重命名</li>\n</ul>\n</li>\n<li><p>比较状态</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff [file] 显示暂存区和工作区的差异</span><br><span class=\"line\">$ git diff --cached/staged [file] 显示暂存区和上一次提交(commit)的差异</span><br><span class=\"line\">$ git diff [first-branch]...[second-branch]</span><br></pre></td></tr></table></figure></li>\n<li><p>提交命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -m [message]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>message：可以是一些备注信息。</li>\n</ul>\n</li>\n<li><p>回退版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset [--soft | --mixed | --hard] [HEAD]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>mixed：为默认，可以不用带该参数，用于重置暂存区的文件与上一次的提交(commit)保持一致，工作区文件内容保持不变</li>\n<li>soft 参数用于回退到某个版本</li>\n<li>hard 参数撤销工作区中所有未提交的修改内容，将暂存区与工作区都回到上一次版本，并删除之前的所有信息提交</li>\n</ul>\n</li>\n<li><p>分支相关</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\<span class=\"comment\">#列出本地所有分支</span></span><br><span class=\"line\">git branch</span><br><span class=\"line\">\\<span class=\"comment\">#列出所有远程分支</span></span><br><span class=\"line\">git branch -r</span><br><span class=\"line\">\\<span class=\"comment\">#新建一个分支，但依然停留在当前分支</span></span><br><span class=\"line\">git branch 分支名</span><br><span class=\"line\">\\<span class=\"comment\">#新建一个分支，并切换到该分支</span></span><br><span class=\"line\">git checkout -b 分支名</span><br><span class=\"line\">\\<span class=\"comment\">#合并指定分支到当前分支</span></span><br><span class=\"line\">git merge 分支名</span><br><span class=\"line\">\\<span class=\"comment\">#删除分支</span></span><br><span class=\"line\">git branch -d 分支名</span><br><span class=\"line\">\\<span class=\"comment\">#删除远程分支</span></span><br><span class=\"line\">git push origin --delete 分支名</span><br><span class=\"line\">git branch -dr 分支名</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>提交代码</strong></p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/86324066a24e3eb32af8305f91c0a064582ae9d5.png\"></p>\n<p>向Github提交代码的两种情况</p>\n<ol>\n<li><p>本地没有 Git 仓库，将远程仓库clone到本地</p>\n<p> 通过clone命令创建的本地仓库，其本身就是一个 Git 仓库了，不用我们再进行<br> init初始化操作啦，而且自动关联远程仓库。我们只需要在这个仓库进行修改或者<br> 添加等操作，然后commit即可。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> <span class=\"string\">&quot;仓库地址&quot;</span></span><br><span class=\"line\">$ git push origin main</span><br></pre></td></tr></table></figure></li>\n<li><p>本地有 Git 仓库，并且我们已经进行了多次commit操作</p>\n<p> 进入仓库,关联远程仓库，origin为远程仓库的名字</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote add origin 仓库地址</span><br></pre></td></tr></table></figure>\n\n<p> 同步远程仓库和本地仓库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull origin main</span><br></pre></td></tr></table></figure>\n\n<p>强调:在向远程仓库提交代码的时候，一定要先进行pull操作，再进行push操作，防止本地仓库与远程仓库不同步导致冲突的问题，尤其是第二种提交代码的情况，很容易就出现问题。</p>\n</li>\n</ol>\n<p><strong>实际使用</strong></p>\n<p>转载自<a href=\"https://blog.csdn.net/nrsc272420199/article/details/85219097\">原文</a><br>1.远程仓库只有一个master分支的情况<br>   需要用到的命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull----------------从远程仓库拉取代码到本地</span><br><span class=\"line\">git stash---------------将你修改后的代码存储到本地(一个栈结构)--&gt;一般会在git pull码失败时使用</span><br><span class=\"line\">git stash pop-----------将你stash到本地的代码与重新git pull下的代码合并</span><br><span class=\"line\">git add XXX-------------将XXX文件加入到暂存区</span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;注释&quot;</span>----将暂存区的文件提交到本地仓库</span><br><span class=\"line\">git push----------------将本地仓库的内容推送到远程仓库</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>实际场景<br>假设开发者A和开发者B都刚刚从远程仓库checkout了一份代码到本地.</li>\n</ol>\n<p>A:<br>首先开发者A在README.md文件中进行了如下修改:</p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/3aa70b0531dc3e2625c09c1ef8eac0078a29f54e.png\">然后将修改内容按照如下方式提交到远程仓库:<br><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/265bf46b38778fb7476094dda85d00debb635e85.png\"></p>\n<p>B:<br> <img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/5a1f2bfbce2c6557b2d3442934c0a92b8a606944.png\">  开发者B此时也要开发代码了,正常来讲,如果开发者B在开发完一个功能需要提交代码之前,肯定要git pull一下代码.比如说开发者B在README.md的第三行里增加了一句话,然后他去git pull代码,结果如下:</p>\n<p><strong>★注意点1★–git监控变化的单位是文件</strong><br>   我不知道大家在这里会不会疑惑,反正我疑惑过很久,明明我在Git Bash里改动的是第二行,在Idea里改动的是第三行,不是说git监测的是变化吗?这里怎么就pull不下来呢?其实git所谓的监控变化,监控的单位是文件,也就是说假如其他开发者改动了XXX文件,并且同步到远程库了,你即使在XXX文件里改动了一个标点,加了一个空格,都无法pull成功.<br>   git pull不成功时,你就需要使用git stash命令了,具体解决方式如下:</p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/578439ae227066f02d1319f645f09b0567c46bd6.png\"></p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/62a3a7a6fbde2da426ced06d782dbd6ee43fb5c4.png\"></p>\n<p><strong>★注意点2★–git pull可以把所有你上次push后没操作的文件pull下来</strong><br>A:<br>  接着上面的栗子,假设Git Bash用户同步了服务端的代码,并且在没跟IDEA用户商量的情况下,擅自修改了IDEA用户的代码,如下:</p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/2ac963f71072ecd1cc7f56f9153107153b737a36.png\"><br><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/c96a2283efc6cc31030410ff42e59ac41209443a.png\">  并且Git Bash用户还创建了一个新的文件,如下:</p>\n<p>B:<br>  开发者B如果没有进行开发,或者进行了其他文件的开发,而未对README.md文件进行操作,直接git pull,效果见下图.可以发现,git pull可以把所有你上次push后没操作的文件pull下来,并将你本地的代码变成和远程仓库一样的代码.</p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/51204e17ea43f7a1992ea9abbf9ecb48768694fa.png\">所以奉在pull代码的时候一定要多注意看一下代码有没有被改动过.</p>\n<p>3.使用idea的Update Project代替git pull + git stash +git stash pop</p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/5ea18123f9a50a08ca1fd5562c479b4aa184a2e4.png\">然后点击一下OK,就会弹出如下页面:</p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/6aa5405ba7ffbe9c8760c5891854c1041e688d10.png\">   然后双击一下有冲突的文件之后,就会弹出如下页面,自我感觉在这个界面里进行冲突解决,要比注意点1中第一个图,那种解决方式爽一些.</p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/7e1e6ca628c6bcc92afce94e8ce7a0cd9a491ac1.png\">并且解决完冲突后,立刻会弹出如下提示:</p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/089c68368fd64dc9463fcbb493992b46998e45ad.png\">点开提示之后,你就可以看到哪些文件修改了,哪些文件是新增的,而且你肯定会想去看看你原来操作过的文件有没有被updated过,从而避免注意点2中提到的情况.<br><img 16 2023 src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/dfd1bcd4b5e9efbe1d7e8d52c289e292c4bd2b04.png\" alt=\"<img src=\" 03 github%e4%bd%bf%e7%94%a8 practice12.png\" class title=\"git图解\">\"></p>\n<p><strong>git merge 相关</strong></p>\n<ol>\n<li><p>在分支之后未对代码修改</p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/c81d9e95a6974e43bb3d62b5ce7029b0c535f29d.png\"></p>\n</li>\n<li><p>在分支之对代码修改</p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/69a4adad5fa74c60aa7fdd3ac358f9bb718b3b4b.png\"></p>\n</li>\n</ol>"},{"title":"ET框架初步理解","date":"2023-03-20T11:42:31.000Z","_content":"\n**ET版本5.0**\n\n**项目文件与配置文件**\n\n* 前端\n  \n  ![](ET框架初步理解/4a45803c69ed8b7283f933aa6e1748973976ef4c.png)\n\n（关注）Bundles：制作的AssetBundles资源放在这个目录。\n\n（不关注）Editor：是自定义的一些unity编辑器中使用的一些扩展工具。\n\n<!--more-->\n\n（核心网络库）ET.Core：是ETCore框架的核心代码库，前后端相同并共用的。\n\n（当然关注）Model：是当前游戏项目本身的全部代码，是自己项目的代码。\n\n（不关注）Plugins：Unity生成的为游戏发布到各平台而准备的插件。\n\n（关注）Res：一些Config文本文件，FairyGUI导入的原始素材\n\n（不关注）Resources：游戏预制体目录\n\n（关注）Scenes：项目的场景文件\n\n（不关注）ThirdParty：需要用到的第三方C#调用库，mongo，Litjson，Google.Protobuf，FairyGUI\n\n* 后端\n  \n  ![](ET框架初步理解/7845ce3fdee147fca9d5c7fe4d86a890b717ecfe.png)\n\n（关注）App项目：ETCore网格框架的启动项目，里面只有一个Program.cs文件\n\n（关注）HotFix项目：后端的System与Handler代码，是我们项目后端主要的开发阵地，主要是调用ET.Core项目中的组件和类，来使用全部逻辑与同步请求及返回\n\n（关注）ET.Core项目：ETCore网络框架的核心组件与类，自己项目的功能组件与实体和其它类。\n\n   后端配置文件\n\n![](ET框架初步理解/6e285ffc782c8443b1070964510e9530573f6c2d.png)\n\n**重要知识点**\n\n* ETCore的使用\n\nUnity项目中，只需要要包含ET.Core项目（核心，与服务端代码一样），就能使用ET来进行网络请求与通信，Model项目中包含了少量现成提供可复用的组件，自己游戏的代码可以放在Model中，也可以另外创建一个项目引用ET.Core与Model即可。\n\n需要引用ThirdParty项目，这里有mongo,protobuf,fairgui这些第三方sdk。\n\n服务端项目中，系统逻辑与Handler都在Hotfix项目中编写，你自己项目的服务端代码主要在这里。后端ET.Core项目中可以加自己游戏的实体，组件，系统类。\n\nHandler是请求的响应，与功能逻辑实现的地方。System是组件的扩展方法，来帮助把需要的组件加入到系统的生命周期里（start,load,awake,update等）。\n\n消息指令与消息体在ET.Core项目中 \\ET.Core\\Module\\Message\\目录下。\n\n* Session使用\n\n用地址创建session \n\n远程地址：127.0.0.1:10002\n\n```C#\nSession sessionRealm = Game.Scene.GetComponent<NetOuterComponent>().Create(\"127.0.0.1:10002\");\nSession sessionRealm = Game.Scene.GetComponent<NetOuterComponent>().Create(GlobalConfigComponent.Instance.GlobalProto.Address);\n```\n\nGlobalConfigComponent.Instance.GlobalProto.Address就是配置文件中获取到像上面的远程地址。\n\n用IPEndPoint创建session \n\npublic IPEndPoint(long address, int port);\n\n```C#\nIPEndPoint realmIPEndPoint = new IPEndPoint(Int64.Parse(\"127.0.0.1\"),10002);\nSession realmSession = Game.Scene.GetComponent<NetOuterComponent>().Create(realmIPEndPoint);\n```\n\n不需要返回发送消息 session.Send\n\nSend方法的参数是一个消息体\n\n```C#\nrealmSession.Send(new A0004_PlayerOnline_G2R() { UserID = user.UserID, GateAppID = config.StartConfig.AppId });\n```\n\n发送请求获得返回 session.Call\n\nCall方法的参数是一个请求消息体，返回一个响应消息体\n\n```C#\nA1002_SetUserInfo_G2C SetUserInfo_Ack = (A1002_SetUserInfo_G2C)await SessionComponent.Instance.Session.Call(SetUserInfo_Req);\n```\n\n* 消息指令、消息体\n\n消息体，是把消息内容的不同字段构建一个消息体类型的实例，用实例属性来使用消息数据。\n\nET是先用数据构建消息体实例，把消息对象序列化为json或profobuf数据进行传送，收到消息再反序列化为消息对象在程序中使用。\n\n消息与handler命名参考举例：消息名需要先知道他是什么功能，再怎么往来。消息处理handler需要先知道从哪来，再是什么功能。方便开发时保持思路清晰。\n\n[功能表达]+[往来] ：GetUserInfo_C2G，GetUserInfo_G2C\n\n当然如果你更习惯统一：C2G_TestMessage\n\n如果是IActorMessage ：Actor_MatchSucess_M2G\n\n收到消息后处理handler ：M2G_MatchSucess_Handler\n\n认证服务Realm：R ，网关服务Gate：G，地图服务Map：M，客户端Client：C\n\n消息指令与消息体定义\n\nmessage C2G_TestMessage // IRequest\n\n请求名后面带上 // IRequest 这样生成的消息体就会继承IRequest\n\nmessage G2C_TestMessage // IResponse\n\n返回名后面带上 //IResponse 这样生成的消息体就会继承IResponse\n\n```Json\n//测试向服务器返回消息\nmessage G2C_TestMessage // IResponse\n{\n    int32 RpcId = 90;\n    int32 Error = 91;\n    string Message = 92;\n}\n```\n\nHotfixMessage.cs，HotfixOpcode.cs，InnerMessage.cs，InnerOpcode.cs，OuterMessage.cs，OuterOpcode.cs\n\n> InnerMessage：不同服务之间通信消息\n> \n> OuterMessage：前后端通信消息\n> \n> HotfixMessage：前后端通信消息，无热更的ETCore来说与OuterMessage没区别\n\n* 实体间Actor通信\n\n理解为什么要用actor通信：\n\nEntity.Id是实体的身份证号，instanceID是居住证号，实体instanceID是会换的，比如到了别的地图。actor系统会保存你的身份证和你在哪个地图的居住证。如果用居住证能找到你，就用instanceId把消息发给你了，如果找不到，就会用身份证找到你新的居住证，再把消息发给你。\n\n```C#\n //网关上的user实体是不是变动的，加消息组件，没有参数也没有AddLoaction()\n user.AddComponent<MailBoxComponent>();\n //session实体是客户端与网关的连接session，向此实体发消息，会转发到客户端，加消息组件带MailboxType.GateSession参数\n session.AddComponent<MailBoxComponent, string>(MailboxType.GateSession);\n //room,gamer实体会迁移地图，加消息组件有AddLoaction()\n room.AddComponent<MailBoxComponent>().AddLocation();\n newgamer.AddComponent<MailBoxComponent>().AddLocation();\n```\n\nET.Core事件\n\nHandler特性\n\n[MessageHandler(AppType.Gate)] \n\nUIFactory特性\n\n[UIFactory(FUIType.SetUserInfo)]\n\n创建实体或组件","source":"_posts/ET框架初步理解.md","raw":"---\ntitle: ET框架初步理解\ndate: 2023-03-20 19:42:31\ntags:\n\n---\n\n**ET版本5.0**\n\n**项目文件与配置文件**\n\n* 前端\n  \n  ![](ET框架初步理解/4a45803c69ed8b7283f933aa6e1748973976ef4c.png)\n\n（关注）Bundles：制作的AssetBundles资源放在这个目录。\n\n（不关注）Editor：是自定义的一些unity编辑器中使用的一些扩展工具。\n\n<!--more-->\n\n（核心网络库）ET.Core：是ETCore框架的核心代码库，前后端相同并共用的。\n\n（当然关注）Model：是当前游戏项目本身的全部代码，是自己项目的代码。\n\n（不关注）Plugins：Unity生成的为游戏发布到各平台而准备的插件。\n\n（关注）Res：一些Config文本文件，FairyGUI导入的原始素材\n\n（不关注）Resources：游戏预制体目录\n\n（关注）Scenes：项目的场景文件\n\n（不关注）ThirdParty：需要用到的第三方C#调用库，mongo，Litjson，Google.Protobuf，FairyGUI\n\n* 后端\n  \n  ![](ET框架初步理解/7845ce3fdee147fca9d5c7fe4d86a890b717ecfe.png)\n\n（关注）App项目：ETCore网格框架的启动项目，里面只有一个Program.cs文件\n\n（关注）HotFix项目：后端的System与Handler代码，是我们项目后端主要的开发阵地，主要是调用ET.Core项目中的组件和类，来使用全部逻辑与同步请求及返回\n\n（关注）ET.Core项目：ETCore网络框架的核心组件与类，自己项目的功能组件与实体和其它类。\n\n   后端配置文件\n\n![](ET框架初步理解/6e285ffc782c8443b1070964510e9530573f6c2d.png)\n\n**重要知识点**\n\n* ETCore的使用\n\nUnity项目中，只需要要包含ET.Core项目（核心，与服务端代码一样），就能使用ET来进行网络请求与通信，Model项目中包含了少量现成提供可复用的组件，自己游戏的代码可以放在Model中，也可以另外创建一个项目引用ET.Core与Model即可。\n\n需要引用ThirdParty项目，这里有mongo,protobuf,fairgui这些第三方sdk。\n\n服务端项目中，系统逻辑与Handler都在Hotfix项目中编写，你自己项目的服务端代码主要在这里。后端ET.Core项目中可以加自己游戏的实体，组件，系统类。\n\nHandler是请求的响应，与功能逻辑实现的地方。System是组件的扩展方法，来帮助把需要的组件加入到系统的生命周期里（start,load,awake,update等）。\n\n消息指令与消息体在ET.Core项目中 \\ET.Core\\Module\\Message\\目录下。\n\n* Session使用\n\n用地址创建session \n\n远程地址：127.0.0.1:10002\n\n```C#\nSession sessionRealm = Game.Scene.GetComponent<NetOuterComponent>().Create(\"127.0.0.1:10002\");\nSession sessionRealm = Game.Scene.GetComponent<NetOuterComponent>().Create(GlobalConfigComponent.Instance.GlobalProto.Address);\n```\n\nGlobalConfigComponent.Instance.GlobalProto.Address就是配置文件中获取到像上面的远程地址。\n\n用IPEndPoint创建session \n\npublic IPEndPoint(long address, int port);\n\n```C#\nIPEndPoint realmIPEndPoint = new IPEndPoint(Int64.Parse(\"127.0.0.1\"),10002);\nSession realmSession = Game.Scene.GetComponent<NetOuterComponent>().Create(realmIPEndPoint);\n```\n\n不需要返回发送消息 session.Send\n\nSend方法的参数是一个消息体\n\n```C#\nrealmSession.Send(new A0004_PlayerOnline_G2R() { UserID = user.UserID, GateAppID = config.StartConfig.AppId });\n```\n\n发送请求获得返回 session.Call\n\nCall方法的参数是一个请求消息体，返回一个响应消息体\n\n```C#\nA1002_SetUserInfo_G2C SetUserInfo_Ack = (A1002_SetUserInfo_G2C)await SessionComponent.Instance.Session.Call(SetUserInfo_Req);\n```\n\n* 消息指令、消息体\n\n消息体，是把消息内容的不同字段构建一个消息体类型的实例，用实例属性来使用消息数据。\n\nET是先用数据构建消息体实例，把消息对象序列化为json或profobuf数据进行传送，收到消息再反序列化为消息对象在程序中使用。\n\n消息与handler命名参考举例：消息名需要先知道他是什么功能，再怎么往来。消息处理handler需要先知道从哪来，再是什么功能。方便开发时保持思路清晰。\n\n[功能表达]+[往来] ：GetUserInfo_C2G，GetUserInfo_G2C\n\n当然如果你更习惯统一：C2G_TestMessage\n\n如果是IActorMessage ：Actor_MatchSucess_M2G\n\n收到消息后处理handler ：M2G_MatchSucess_Handler\n\n认证服务Realm：R ，网关服务Gate：G，地图服务Map：M，客户端Client：C\n\n消息指令与消息体定义\n\nmessage C2G_TestMessage // IRequest\n\n请求名后面带上 // IRequest 这样生成的消息体就会继承IRequest\n\nmessage G2C_TestMessage // IResponse\n\n返回名后面带上 //IResponse 这样生成的消息体就会继承IResponse\n\n```Json\n//测试向服务器返回消息\nmessage G2C_TestMessage // IResponse\n{\n    int32 RpcId = 90;\n    int32 Error = 91;\n    string Message = 92;\n}\n```\n\nHotfixMessage.cs，HotfixOpcode.cs，InnerMessage.cs，InnerOpcode.cs，OuterMessage.cs，OuterOpcode.cs\n\n> InnerMessage：不同服务之间通信消息\n> \n> OuterMessage：前后端通信消息\n> \n> HotfixMessage：前后端通信消息，无热更的ETCore来说与OuterMessage没区别\n\n* 实体间Actor通信\n\n理解为什么要用actor通信：\n\nEntity.Id是实体的身份证号，instanceID是居住证号，实体instanceID是会换的，比如到了别的地图。actor系统会保存你的身份证和你在哪个地图的居住证。如果用居住证能找到你，就用instanceId把消息发给你了，如果找不到，就会用身份证找到你新的居住证，再把消息发给你。\n\n```C#\n //网关上的user实体是不是变动的，加消息组件，没有参数也没有AddLoaction()\n user.AddComponent<MailBoxComponent>();\n //session实体是客户端与网关的连接session，向此实体发消息，会转发到客户端，加消息组件带MailboxType.GateSession参数\n session.AddComponent<MailBoxComponent, string>(MailboxType.GateSession);\n //room,gamer实体会迁移地图，加消息组件有AddLoaction()\n room.AddComponent<MailBoxComponent>().AddLocation();\n newgamer.AddComponent<MailBoxComponent>().AddLocation();\n```\n\nET.Core事件\n\nHandler特性\n\n[MessageHandler(AppType.Gate)] \n\nUIFactory特性\n\n[UIFactory(FUIType.SetUserInfo)]\n\n创建实体或组件","slug":"ET框架初步理解","published":1,"updated":"2023-04-05T14:51:26.123Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgc9df2i00073cu48dhmgvol","content":"<p><strong>ET版本5.0</strong></p>\n<p><strong>项目文件与配置文件</strong></p>\n<ul>\n<li>前端<img src=\"/2023/03/20/ET%E6%A1%86%E6%9E%B6%E5%88%9D%E6%AD%A5%E7%90%86%E8%A7%A3/4a45803c69ed8b7283f933aa6e1748973976ef4c.png\"></li>\n</ul>\n<p>（关注）Bundles：制作的AssetBundles资源放在这个目录。</p>\n<p>（不关注）Editor：是自定义的一些unity编辑器中使用的一些扩展工具。</p>\n<span id=\"more\"></span>\n\n<p>（核心网络库）ET.Core：是ETCore框架的核心代码库，前后端相同并共用的。</p>\n<p>（当然关注）Model：是当前游戏项目本身的全部代码，是自己项目的代码。</p>\n<p>（不关注）Plugins：Unity生成的为游戏发布到各平台而准备的插件。</p>\n<p>（关注）Res：一些Config文本文件，FairyGUI导入的原始素材</p>\n<p>（不关注）Resources：游戏预制体目录</p>\n<p>（关注）Scenes：项目的场景文件</p>\n<p>（不关注）ThirdParty：需要用到的第三方C#调用库，mongo，Litjson，Google.Protobuf，FairyGUI</p>\n<ul>\n<li>后端<img src=\"/2023/03/20/ET%E6%A1%86%E6%9E%B6%E5%88%9D%E6%AD%A5%E7%90%86%E8%A7%A3/7845ce3fdee147fca9d5c7fe4d86a890b717ecfe.png\"></li>\n</ul>\n<p>（关注）App项目：ETCore网格框架的启动项目，里面只有一个Program.cs文件</p>\n<p>（关注）HotFix项目：后端的System与Handler代码，是我们项目后端主要的开发阵地，主要是调用ET.Core项目中的组件和类，来使用全部逻辑与同步请求及返回</p>\n<p>（关注）ET.Core项目：ETCore网络框架的核心组件与类，自己项目的功能组件与实体和其它类。</p>\n<p>   后端配置文件</p>\n<p><img src=\"/2023/03/20/ET%E6%A1%86%E6%9E%B6%E5%88%9D%E6%AD%A5%E7%90%86%E8%A7%A3/6e285ffc782c8443b1070964510e9530573f6c2d.png\"></p>\n<p><strong>重要知识点</strong></p>\n<ul>\n<li>ETCore的使用</li>\n</ul>\n<p>Unity项目中，只需要要包含ET.Core项目（核心，与服务端代码一样），就能使用ET来进行网络请求与通信，Model项目中包含了少量现成提供可复用的组件，自己游戏的代码可以放在Model中，也可以另外创建一个项目引用ET.Core与Model即可。</p>\n<p>需要引用ThirdParty项目，这里有mongo,protobuf,fairgui这些第三方sdk。</p>\n<p>服务端项目中，系统逻辑与Handler都在Hotfix项目中编写，你自己项目的服务端代码主要在这里。后端ET.Core项目中可以加自己游戏的实体，组件，系统类。</p>\n<p>Handler是请求的响应，与功能逻辑实现的地方。System是组件的扩展方法，来帮助把需要的组件加入到系统的生命周期里（start,load,awake,update等）。</p>\n<p>消息指令与消息体在ET.Core项目中 \\ET.Core\\Module\\Message\\目录下。</p>\n<ul>\n<li>Session使用</li>\n</ul>\n<p>用地址创建session </p>\n<p>远程地址：127.0.0.1:10002</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Session sessionRealm = Game.Scene.GetComponent&lt;NetOuterComponent&gt;().Create(<span class=\"string\">&quot;127.0.0.1:10002&quot;</span>);</span><br><span class=\"line\">Session sessionRealm = Game.Scene.GetComponent&lt;NetOuterComponent&gt;().Create(GlobalConfigComponent.Instance.GlobalProto.Address);</span><br></pre></td></tr></table></figure>\n\n<p>GlobalConfigComponent.Instance.GlobalProto.Address就是配置文件中获取到像上面的远程地址。</p>\n<p>用IPEndPoint创建session </p>\n<p>public IPEndPoint(long address, int port);</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IPEndPoint realmIPEndPoint = <span class=\"keyword\">new</span> IPEndPoint(Int64.Parse(<span class=\"string\">&quot;127.0.0.1&quot;</span>),<span class=\"number\">10002</span>);</span><br><span class=\"line\">Session realmSession = Game.Scene.GetComponent&lt;NetOuterComponent&gt;().Create(realmIPEndPoint);</span><br></pre></td></tr></table></figure>\n\n<p>不需要返回发送消息 session.Send</p>\n<p>Send方法的参数是一个消息体</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">realmSession.Send(<span class=\"keyword\">new</span> A0004_PlayerOnline_G2R() &#123; UserID = user.UserID, GateAppID = config.StartConfig.AppId &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>发送请求获得返回 session.Call</p>\n<p>Call方法的参数是一个请求消息体，返回一个响应消息体</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A1002_SetUserInfo_G2C SetUserInfo_Ack = (A1002_SetUserInfo_G2C)<span class=\"keyword\">await</span> SessionComponent.Instance.Session.Call(SetUserInfo_Req);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>消息指令、消息体</li>\n</ul>\n<p>消息体，是把消息内容的不同字段构建一个消息体类型的实例，用实例属性来使用消息数据。</p>\n<p>ET是先用数据构建消息体实例，把消息对象序列化为json或profobuf数据进行传送，收到消息再反序列化为消息对象在程序中使用。</p>\n<p>消息与handler命名参考举例：消息名需要先知道他是什么功能，再怎么往来。消息处理handler需要先知道从哪来，再是什么功能。方便开发时保持思路清晰。</p>\n<p>[功能表达]+[往来] ：GetUserInfo_C2G，GetUserInfo_G2C</p>\n<p>当然如果你更习惯统一：C2G_TestMessage</p>\n<p>如果是IActorMessage ：Actor_MatchSucess_M2G</p>\n<p>收到消息后处理handler ：M2G_MatchSucess_Handler</p>\n<p>认证服务Realm：R ，网关服务Gate：G，地图服务Map：M，客户端Client：C</p>\n<p>消息指令与消息体定义</p>\n<p>message C2G_TestMessage // IRequest</p>\n<p>请求名后面带上 // IRequest 这样生成的消息体就会继承IRequest</p>\n<p>message G2C_TestMessage // IResponse</p>\n<p>返回名后面带上 //IResponse 这样生成的消息体就会继承IResponse</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//测试向服务器返回消息</span></span><br><span class=\"line\">message G2C_TestMessage <span class=\"comment\">// IResponse</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    int32 RpcId = <span class=\"number\">90</span>;</span><br><span class=\"line\">    int32 Error = <span class=\"number\">91</span>;</span><br><span class=\"line\">    string Message = <span class=\"number\">92</span>;</span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>HotfixMessage.cs，HotfixOpcode.cs，InnerMessage.cs，InnerOpcode.cs，OuterMessage.cs，OuterOpcode.cs</p>\n<blockquote>\n<p>InnerMessage：不同服务之间通信消息</p>\n<p>OuterMessage：前后端通信消息</p>\n<p>HotfixMessage：前后端通信消息，无热更的ETCore来说与OuterMessage没区别</p>\n</blockquote>\n<ul>\n<li>实体间Actor通信</li>\n</ul>\n<p>理解为什么要用actor通信：</p>\n<p>Entity.Id是实体的身份证号，instanceID是居住证号，实体instanceID是会换的，比如到了别的地图。actor系统会保存你的身份证和你在哪个地图的居住证。如果用居住证能找到你，就用instanceId把消息发给你了，如果找不到，就会用身份证找到你新的居住证，再把消息发给你。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//网关上的user实体是不是变动的，加消息组件，没有参数也没有AddLoaction()</span></span><br><span class=\"line\">user.AddComponent&lt;MailBoxComponent&gt;();</span><br><span class=\"line\"><span class=\"comment\">//session实体是客户端与网关的连接session，向此实体发消息，会转发到客户端，加消息组件带MailboxType.GateSession参数</span></span><br><span class=\"line\">session.AddComponent&lt;MailBoxComponent, <span class=\"built_in\">string</span>&gt;(MailboxType.GateSession);</span><br><span class=\"line\"><span class=\"comment\">//room,gamer实体会迁移地图，加消息组件有AddLoaction()</span></span><br><span class=\"line\">room.AddComponent&lt;MailBoxComponent&gt;().AddLocation();</span><br><span class=\"line\">newgamer.AddComponent&lt;MailBoxComponent&gt;().AddLocation();</span><br></pre></td></tr></table></figure>\n\n<p>ET.Core事件</p>\n<p>Handler特性</p>\n<p>[MessageHandler(AppType.Gate)] </p>\n<p>UIFactory特性</p>\n<p>[UIFactory(FUIType.SetUserInfo)]</p>\n<p>创建实体或组件</p>\n","site":{"data":{}},"cover":false,"excerpt":"<p><strong>ET版本5.0</strong></p>\n<p><strong>项目文件与配置文件</strong></p>\n<ul>\n<li>前端<img src=\"/2023/03/20/ET%E6%A1%86%E6%9E%B6%E5%88%9D%E6%AD%A5%E7%90%86%E8%A7%A3/4a45803c69ed8b7283f933aa6e1748973976ef4c.png\"></li>\n</ul>\n<p>（关注）Bundles：制作的AssetBundles资源放在这个目录。</p>\n<p>（不关注）Editor：是自定义的一些unity编辑器中使用的一些扩展工具。</p>","more":"<p>（核心网络库）ET.Core：是ETCore框架的核心代码库，前后端相同并共用的。</p>\n<p>（当然关注）Model：是当前游戏项目本身的全部代码，是自己项目的代码。</p>\n<p>（不关注）Plugins：Unity生成的为游戏发布到各平台而准备的插件。</p>\n<p>（关注）Res：一些Config文本文件，FairyGUI导入的原始素材</p>\n<p>（不关注）Resources：游戏预制体目录</p>\n<p>（关注）Scenes：项目的场景文件</p>\n<p>（不关注）ThirdParty：需要用到的第三方C#调用库，mongo，Litjson，Google.Protobuf，FairyGUI</p>\n<ul>\n<li>后端<img src=\"/2023/03/20/ET%E6%A1%86%E6%9E%B6%E5%88%9D%E6%AD%A5%E7%90%86%E8%A7%A3/7845ce3fdee147fca9d5c7fe4d86a890b717ecfe.png\"></li>\n</ul>\n<p>（关注）App项目：ETCore网格框架的启动项目，里面只有一个Program.cs文件</p>\n<p>（关注）HotFix项目：后端的System与Handler代码，是我们项目后端主要的开发阵地，主要是调用ET.Core项目中的组件和类，来使用全部逻辑与同步请求及返回</p>\n<p>（关注）ET.Core项目：ETCore网络框架的核心组件与类，自己项目的功能组件与实体和其它类。</p>\n<p>   后端配置文件</p>\n<p><img src=\"/2023/03/20/ET%E6%A1%86%E6%9E%B6%E5%88%9D%E6%AD%A5%E7%90%86%E8%A7%A3/6e285ffc782c8443b1070964510e9530573f6c2d.png\"></p>\n<p><strong>重要知识点</strong></p>\n<ul>\n<li>ETCore的使用</li>\n</ul>\n<p>Unity项目中，只需要要包含ET.Core项目（核心，与服务端代码一样），就能使用ET来进行网络请求与通信，Model项目中包含了少量现成提供可复用的组件，自己游戏的代码可以放在Model中，也可以另外创建一个项目引用ET.Core与Model即可。</p>\n<p>需要引用ThirdParty项目，这里有mongo,protobuf,fairgui这些第三方sdk。</p>\n<p>服务端项目中，系统逻辑与Handler都在Hotfix项目中编写，你自己项目的服务端代码主要在这里。后端ET.Core项目中可以加自己游戏的实体，组件，系统类。</p>\n<p>Handler是请求的响应，与功能逻辑实现的地方。System是组件的扩展方法，来帮助把需要的组件加入到系统的生命周期里（start,load,awake,update等）。</p>\n<p>消息指令与消息体在ET.Core项目中 \\ET.Core\\Module\\Message\\目录下。</p>\n<ul>\n<li>Session使用</li>\n</ul>\n<p>用地址创建session </p>\n<p>远程地址：127.0.0.1:10002</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Session sessionRealm = Game.Scene.GetComponent&lt;NetOuterComponent&gt;().Create(<span class=\"string\">&quot;127.0.0.1:10002&quot;</span>);</span><br><span class=\"line\">Session sessionRealm = Game.Scene.GetComponent&lt;NetOuterComponent&gt;().Create(GlobalConfigComponent.Instance.GlobalProto.Address);</span><br></pre></td></tr></table></figure>\n\n<p>GlobalConfigComponent.Instance.GlobalProto.Address就是配置文件中获取到像上面的远程地址。</p>\n<p>用IPEndPoint创建session </p>\n<p>public IPEndPoint(long address, int port);</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IPEndPoint realmIPEndPoint = <span class=\"keyword\">new</span> IPEndPoint(Int64.Parse(<span class=\"string\">&quot;127.0.0.1&quot;</span>),<span class=\"number\">10002</span>);</span><br><span class=\"line\">Session realmSession = Game.Scene.GetComponent&lt;NetOuterComponent&gt;().Create(realmIPEndPoint);</span><br></pre></td></tr></table></figure>\n\n<p>不需要返回发送消息 session.Send</p>\n<p>Send方法的参数是一个消息体</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">realmSession.Send(<span class=\"keyword\">new</span> A0004_PlayerOnline_G2R() &#123; UserID = user.UserID, GateAppID = config.StartConfig.AppId &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>发送请求获得返回 session.Call</p>\n<p>Call方法的参数是一个请求消息体，返回一个响应消息体</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A1002_SetUserInfo_G2C SetUserInfo_Ack = (A1002_SetUserInfo_G2C)<span class=\"keyword\">await</span> SessionComponent.Instance.Session.Call(SetUserInfo_Req);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>消息指令、消息体</li>\n</ul>\n<p>消息体，是把消息内容的不同字段构建一个消息体类型的实例，用实例属性来使用消息数据。</p>\n<p>ET是先用数据构建消息体实例，把消息对象序列化为json或profobuf数据进行传送，收到消息再反序列化为消息对象在程序中使用。</p>\n<p>消息与handler命名参考举例：消息名需要先知道他是什么功能，再怎么往来。消息处理handler需要先知道从哪来，再是什么功能。方便开发时保持思路清晰。</p>\n<p>[功能表达]+[往来] ：GetUserInfo_C2G，GetUserInfo_G2C</p>\n<p>当然如果你更习惯统一：C2G_TestMessage</p>\n<p>如果是IActorMessage ：Actor_MatchSucess_M2G</p>\n<p>收到消息后处理handler ：M2G_MatchSucess_Handler</p>\n<p>认证服务Realm：R ，网关服务Gate：G，地图服务Map：M，客户端Client：C</p>\n<p>消息指令与消息体定义</p>\n<p>message C2G_TestMessage // IRequest</p>\n<p>请求名后面带上 // IRequest 这样生成的消息体就会继承IRequest</p>\n<p>message G2C_TestMessage // IResponse</p>\n<p>返回名后面带上 //IResponse 这样生成的消息体就会继承IResponse</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//测试向服务器返回消息</span></span><br><span class=\"line\">message G2C_TestMessage <span class=\"comment\">// IResponse</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    int32 RpcId = <span class=\"number\">90</span>;</span><br><span class=\"line\">    int32 Error = <span class=\"number\">91</span>;</span><br><span class=\"line\">    string Message = <span class=\"number\">92</span>;</span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>HotfixMessage.cs，HotfixOpcode.cs，InnerMessage.cs，InnerOpcode.cs，OuterMessage.cs，OuterOpcode.cs</p>\n<blockquote>\n<p>InnerMessage：不同服务之间通信消息</p>\n<p>OuterMessage：前后端通信消息</p>\n<p>HotfixMessage：前后端通信消息，无热更的ETCore来说与OuterMessage没区别</p>\n</blockquote>\n<ul>\n<li>实体间Actor通信</li>\n</ul>\n<p>理解为什么要用actor通信：</p>\n<p>Entity.Id是实体的身份证号，instanceID是居住证号，实体instanceID是会换的，比如到了别的地图。actor系统会保存你的身份证和你在哪个地图的居住证。如果用居住证能找到你，就用instanceId把消息发给你了，如果找不到，就会用身份证找到你新的居住证，再把消息发给你。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//网关上的user实体是不是变动的，加消息组件，没有参数也没有AddLoaction()</span></span><br><span class=\"line\">user.AddComponent&lt;MailBoxComponent&gt;();</span><br><span class=\"line\"><span class=\"comment\">//session实体是客户端与网关的连接session，向此实体发消息，会转发到客户端，加消息组件带MailboxType.GateSession参数</span></span><br><span class=\"line\">session.AddComponent&lt;MailBoxComponent, <span class=\"built_in\">string</span>&gt;(MailboxType.GateSession);</span><br><span class=\"line\"><span class=\"comment\">//room,gamer实体会迁移地图，加消息组件有AddLoaction()</span></span><br><span class=\"line\">room.AddComponent&lt;MailBoxComponent&gt;().AddLocation();</span><br><span class=\"line\">newgamer.AddComponent&lt;MailBoxComponent&gt;().AddLocation();</span><br></pre></td></tr></table></figure>\n\n<p>ET.Core事件</p>\n<p>Handler特性</p>\n<p>[MessageHandler(AppType.Gate)] </p>\n<p>UIFactory特性</p>\n<p>[UIFactory(FUIType.SetUserInfo)]</p>\n<p>创建实体或组件</p>"},{"title":"嵌入式与单片机实验课答案","date":"2023-04-01T18:02:14.000Z","top_img":"/img/Top_img.jpg","cover":"/img/Cover_SingleChip.png","_content":"\n# 第一次实验\n\n## 实验基本要求\n\n  ![](SingleChip/2023-04-02-02-05-40-image.png)\n\n<!--more-->\n\n## 写取平均值脚本\n\n  创建项目文件\n\n  ![Screenshot from 2023-04-02 00-47-22.png](SingleChip/53dd30183091b0bb68dfbdb15031cc2dfa2e0306.png)\n\n```bash\nmkdir Project //在用户目录下（~）创建Project文件夹\ncd Project/  \nmkdir Homework //在Project目录下创建Homework文件夹\ncd Homework/\nmkdir 10 //此时实验的项目地址\ncd 10\n```\n\n     \n\n  使用vim创建mean.sh文件\n\n```bash\nvim mean.sh \n```\n\n  如果出现这种情况\n  ![](SingleChip/4c9eeaf452c81e4203aab3ab35f203b530e08202.png)\n\n```bash\nsudo apt install vim\n```\n\n  安装完后在执行vim mean.sh，执行完后界面为\n\n  ![Screenshot from 2023-04-02 01-14-51.png](SingleChip/426941f16f054370a2e48c0b9334b919349fd85a.png)\n\n    按i键进入插入模式\n\n  输入代码\n\n```bash\n#!/bin/bash\ntotal=0\ncount=0\ninputfile='1000ValuesCalcMean'\nwhile read line;do\n    total=$((total+line)）\n    count=$[$count+1]\ndone < $inputfile\necho $[$total/$count] > mean_result_学号_名字.txt\n```\n\n      ![](SingleChip/d5a14db6ef5b8ee6e4e4628c1290b38445a7835e.png)\n\n  输入完后按esc键退出插入模式，输入:wq退出vim\n\n```bash\nsudo chmod 777 mean.sh //给mean.sh权限\n./mean.sh              //执行mean.sh\n```\n\n  执行完后10文件夹内出现 mean_result_学号_名字.txt 文件\n\n  ![](SingleChip/57037c8bea42c86053227fe549874b419653b56c.png)\n\n  内容为 平均数\n\n  创建ReadMe.md\n\n```bash\nvim ReadMe.md\n```\n\n  进入后直接:wq退出\n\n  ![Screenshot from 2023-04-02 01-14-51.png](SingleChip/426941f16f054370a2e48c0b9334b919349fd85a.png)\n\n  看到文件夹内多出了文件ReaMe.md，双击\n\n  ![Screenshot from 2023-04-02 01-16-19.png](SingleChip/54c588817fcd205435a974f1d8077220d5485bf4.png)\n\n  在文本编辑器内写入以下示例后保存\n\n  ![Screenshot from 2023-04-02 01-21-06.png](SingleChip/62d506ea99c99e2d95a5c5d0b00410291b1a7de4.png)\n\n  打包成.tgz格式的压缩包(别忘了传图片)\n\n```bash\ntar -czvf 压缩包的名字.tgz 你要压缩的第一个文件 第二个 ....\n```\n\n  ![Screenshot from 2023-04-02 01-22-26.png](SingleChip/ba71358b9ca3c9a533af1de889672b443827b2b5.png)\n\n  进入学习通上交即可\n\n## 进阶要求\n\n  代码修改为\n\n  ![Screenshot from 2023-04-02 01-54-33.png](SingleChip/08a01404c19e5459d57c8e384f5eaf22869a43eb.png)\n\n  执行命令改为\n\n```bash\n./mean.sh 1000ValuesCalcMean\n```\n\n  执行完后压缩上交即可(别忘了在ReadMe中说明使用了进阶要求)\n\n# 第二次实验\n\n## 实验要求\n\n  ![](SingleChip/2023-04-07-15-48-18-Screenshot%20from%202023-04-07%2015-47-51.png)\n\n  基本要求只需要配置SCP和NFS，配置SCP和NFS的文件时候添加上自己的学号截图，使用SCP和NFS的时候截图并放在Word里,把word和压缩后的配置文件上交即可\n\n## 配置SCP\n\n  我使用的termux，就是老师发在群里的那个app\n\n  如果你是第一次安装termux\n\n```bash\n//termux 上执行\napt update && apt upgrade \n```\n\n  安装Openssh\n\n```bash\n//termux 上执行\npkg install openssh\n```\n\n  安装成功后可以测试ssh的连接\n\n```bash\n//termux\n\n//给自己的用户设置密码\npasswd\n//打开ssh服务端\nsshd\n\n//ubuntu\n\nssh -p 8022 user@hostname_or_ip\n//user是你在termux上的用户可以在termux上执行whoami查看\n//host_or_ip是的你ip地址，确保你的termux和ubuntu在统一局域网下\n//手机按wifi查看你的ipv4地址\n//也可以在termux执行ifconfig查看wlan0网络适配器的inet\n```\n\n  连接成功后,在ubuntu上随便创建一个文件测试SCP,新开一个终端\n\n```bash\n//ubuntu\n\nscp -P 8022 SourceFile user@hostname_or_ip:TargetPath\n//SourFile是你要发送的文件\n//TargPath是要发送到移动的路径，termux最好用当前用户的路径，例如./ (termux没有root用户权限)\n//usr是termux的用户名\n//host_or_ip是的你ip地址\n\n//在你连接termux的ssh终端或者termux上查看文件是否发送过来，如果Target是./\n\nls ~\n```\n\n  截图保存\n\n## NFS\n\n我使用的是我购买的服务器，你可以采用windos和虚拟机，或者虚拟机之间通信\n\n```bash\nsudo apt-get install nfs-kernel-server #安装NFS服务器端\nsudo apt-get install nfs-common        #安装NFS客户端\n```\n\n**在服务器上**\n\n* 设置本地目录权限\n\n```bash\nsudo mkdir /nfs\nsudo chmod -R 777 /nfs\n```\n\n* 添加目录的绝对路径到共享\n\n```bash\nvim /etc/exports\n#添加\n/nfs *(rw,async,no_subtree_check,no_root_squash)\n#学号名字\n```\n\n* 启动NFS服务\n\n```bash\nsudo /usr/sbin/exportfs -arf \nsudo /etc/init.d/nfs-kernel-server start\n```\n\n**在客户端上**\n\n* NFS服务测试\n\n```bash\nsudo mount -t nfs 192.168.12.123:/nfs /mnt -o nolock\n#如果挂载成功，在/mnt目录下能看到/nfsroot目录下的内容\n#如果你就一台电脑可以自己挂载自己把 192.168.12.123 改成 127.0.0.1\n```\n\n**截图,把exports复制一份**\n\n## 提交\n\n这样就完成的基本要求\n\n* 把配置文件压缩\n\n* 把图放到word，别忘加标题\n\n* 把这个表复制到word\n\n![](SingleChip/2023-04-07-17-11-07-Screenshot%20from%202023-04-07%2017-10-50.png)\n\n提交即可\n\n## 进阶要求\n\n可以参考我的git的使用\n\n进阶没时间写了,找个其他时间再写\n\n**这是我实验二的[文件](https://gitee.com/Exiaozhang/home-work_1/tree/master/19)包括了进阶要求的文件,可以参考着改改,不会可以线下问我,或者在我的评论区给我留言**\n","source":"_posts/SingleChip.md","raw":"---\ntitle: 嵌入式与单片机实验课答案\ndate: 2023-04-02 02:02:14\ntags: ['学习']\ntop_img: /img/Top_img.jpg\ncover: /img/Cover_SingleChip.png\n---\n\n# 第一次实验\n\n## 实验基本要求\n\n  ![](SingleChip/2023-04-02-02-05-40-image.png)\n\n<!--more-->\n\n## 写取平均值脚本\n\n  创建项目文件\n\n  ![Screenshot from 2023-04-02 00-47-22.png](SingleChip/53dd30183091b0bb68dfbdb15031cc2dfa2e0306.png)\n\n```bash\nmkdir Project //在用户目录下（~）创建Project文件夹\ncd Project/  \nmkdir Homework //在Project目录下创建Homework文件夹\ncd Homework/\nmkdir 10 //此时实验的项目地址\ncd 10\n```\n\n     \n\n  使用vim创建mean.sh文件\n\n```bash\nvim mean.sh \n```\n\n  如果出现这种情况\n  ![](SingleChip/4c9eeaf452c81e4203aab3ab35f203b530e08202.png)\n\n```bash\nsudo apt install vim\n```\n\n  安装完后在执行vim mean.sh，执行完后界面为\n\n  ![Screenshot from 2023-04-02 01-14-51.png](SingleChip/426941f16f054370a2e48c0b9334b919349fd85a.png)\n\n    按i键进入插入模式\n\n  输入代码\n\n```bash\n#!/bin/bash\ntotal=0\ncount=0\ninputfile='1000ValuesCalcMean'\nwhile read line;do\n    total=$((total+line)）\n    count=$[$count+1]\ndone < $inputfile\necho $[$total/$count] > mean_result_学号_名字.txt\n```\n\n      ![](SingleChip/d5a14db6ef5b8ee6e4e4628c1290b38445a7835e.png)\n\n  输入完后按esc键退出插入模式，输入:wq退出vim\n\n```bash\nsudo chmod 777 mean.sh //给mean.sh权限\n./mean.sh              //执行mean.sh\n```\n\n  执行完后10文件夹内出现 mean_result_学号_名字.txt 文件\n\n  ![](SingleChip/57037c8bea42c86053227fe549874b419653b56c.png)\n\n  内容为 平均数\n\n  创建ReadMe.md\n\n```bash\nvim ReadMe.md\n```\n\n  进入后直接:wq退出\n\n  ![Screenshot from 2023-04-02 01-14-51.png](SingleChip/426941f16f054370a2e48c0b9334b919349fd85a.png)\n\n  看到文件夹内多出了文件ReaMe.md，双击\n\n  ![Screenshot from 2023-04-02 01-16-19.png](SingleChip/54c588817fcd205435a974f1d8077220d5485bf4.png)\n\n  在文本编辑器内写入以下示例后保存\n\n  ![Screenshot from 2023-04-02 01-21-06.png](SingleChip/62d506ea99c99e2d95a5c5d0b00410291b1a7de4.png)\n\n  打包成.tgz格式的压缩包(别忘了传图片)\n\n```bash\ntar -czvf 压缩包的名字.tgz 你要压缩的第一个文件 第二个 ....\n```\n\n  ![Screenshot from 2023-04-02 01-22-26.png](SingleChip/ba71358b9ca3c9a533af1de889672b443827b2b5.png)\n\n  进入学习通上交即可\n\n## 进阶要求\n\n  代码修改为\n\n  ![Screenshot from 2023-04-02 01-54-33.png](SingleChip/08a01404c19e5459d57c8e384f5eaf22869a43eb.png)\n\n  执行命令改为\n\n```bash\n./mean.sh 1000ValuesCalcMean\n```\n\n  执行完后压缩上交即可(别忘了在ReadMe中说明使用了进阶要求)\n\n# 第二次实验\n\n## 实验要求\n\n  ![](SingleChip/2023-04-07-15-48-18-Screenshot%20from%202023-04-07%2015-47-51.png)\n\n  基本要求只需要配置SCP和NFS，配置SCP和NFS的文件时候添加上自己的学号截图，使用SCP和NFS的时候截图并放在Word里,把word和压缩后的配置文件上交即可\n\n## 配置SCP\n\n  我使用的termux，就是老师发在群里的那个app\n\n  如果你是第一次安装termux\n\n```bash\n//termux 上执行\napt update && apt upgrade \n```\n\n  安装Openssh\n\n```bash\n//termux 上执行\npkg install openssh\n```\n\n  安装成功后可以测试ssh的连接\n\n```bash\n//termux\n\n//给自己的用户设置密码\npasswd\n//打开ssh服务端\nsshd\n\n//ubuntu\n\nssh -p 8022 user@hostname_or_ip\n//user是你在termux上的用户可以在termux上执行whoami查看\n//host_or_ip是的你ip地址，确保你的termux和ubuntu在统一局域网下\n//手机按wifi查看你的ipv4地址\n//也可以在termux执行ifconfig查看wlan0网络适配器的inet\n```\n\n  连接成功后,在ubuntu上随便创建一个文件测试SCP,新开一个终端\n\n```bash\n//ubuntu\n\nscp -P 8022 SourceFile user@hostname_or_ip:TargetPath\n//SourFile是你要发送的文件\n//TargPath是要发送到移动的路径，termux最好用当前用户的路径，例如./ (termux没有root用户权限)\n//usr是termux的用户名\n//host_or_ip是的你ip地址\n\n//在你连接termux的ssh终端或者termux上查看文件是否发送过来，如果Target是./\n\nls ~\n```\n\n  截图保存\n\n## NFS\n\n我使用的是我购买的服务器，你可以采用windos和虚拟机，或者虚拟机之间通信\n\n```bash\nsudo apt-get install nfs-kernel-server #安装NFS服务器端\nsudo apt-get install nfs-common        #安装NFS客户端\n```\n\n**在服务器上**\n\n* 设置本地目录权限\n\n```bash\nsudo mkdir /nfs\nsudo chmod -R 777 /nfs\n```\n\n* 添加目录的绝对路径到共享\n\n```bash\nvim /etc/exports\n#添加\n/nfs *(rw,async,no_subtree_check,no_root_squash)\n#学号名字\n```\n\n* 启动NFS服务\n\n```bash\nsudo /usr/sbin/exportfs -arf \nsudo /etc/init.d/nfs-kernel-server start\n```\n\n**在客户端上**\n\n* NFS服务测试\n\n```bash\nsudo mount -t nfs 192.168.12.123:/nfs /mnt -o nolock\n#如果挂载成功，在/mnt目录下能看到/nfsroot目录下的内容\n#如果你就一台电脑可以自己挂载自己把 192.168.12.123 改成 127.0.0.1\n```\n\n**截图,把exports复制一份**\n\n## 提交\n\n这样就完成的基本要求\n\n* 把配置文件压缩\n\n* 把图放到word，别忘加标题\n\n* 把这个表复制到word\n\n![](SingleChip/2023-04-07-17-11-07-Screenshot%20from%202023-04-07%2017-10-50.png)\n\n提交即可\n\n## 进阶要求\n\n可以参考我的git的使用\n\n进阶没时间写了,找个其他时间再写\n\n**这是我实验二的[文件](https://gitee.com/Exiaozhang/home-work_1/tree/master/19)包括了进阶要求的文件,可以参考着改改,不会可以线下问我,或者在我的评论区给我留言**\n","slug":"SingleChip","published":1,"updated":"2023-04-12T16:33:14.968Z","_id":"clgc9df2i00083cu49y755hyl","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"第一次实验\"><a href=\"#第一次实验\" class=\"headerlink\" title=\"第一次实验\"></a>第一次实验</h1><h2 id=\"实验基本要求\"><a href=\"#实验基本要求\" class=\"headerlink\" title=\"实验基本要求\"></a>实验基本要求</h2><p>  <img src=\"/2023/04/02/SingleChip/2023-04-02-02-05-40-image.png\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"写取平均值脚本\"><a href=\"#写取平均值脚本\" class=\"headerlink\" title=\"写取平均值脚本\"></a>写取平均值脚本</h2><p>  创建项目文件</p>\n<p>  <img src=\"/2023/04/02/SingleChip/53dd30183091b0bb68dfbdb15031cc2dfa2e0306.png\" alt=\"Screenshot from 2023-04-02 00-47-22.png\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> Project //在用户目录下（~）创建Project文件夹</span><br><span class=\"line\"><span class=\"built_in\">cd</span> Project/  </span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> Homework //在Project目录下创建Homework文件夹</span><br><span class=\"line\"><span class=\"built_in\">cd</span> Homework/</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> 10 //此时实验的项目地址</span><br><span class=\"line\"><span class=\"built_in\">cd</span> 10</span><br></pre></td></tr></table></figure>\n\n<p>     </p>\n<p>  使用vim创建mean.sh文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim mean.sh </span><br></pre></td></tr></table></figure>\n\n<p>  如果出现这种情况<br>  <img src=\"/2023/04/02/SingleChip/4c9eeaf452c81e4203aab3ab35f203b530e08202.png\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install vim</span><br></pre></td></tr></table></figure>\n\n<p>  安装完后在执行vim mean.sh，执行完后界面为</p>\n<p>  <img src=\"/2023/04/02/SingleChip/426941f16f054370a2e48c0b9334b919349fd85a.png\" alt=\"Screenshot from 2023-04-02 01-14-51.png\"></p>\n<p>    按i键进入插入模式</p>\n<p>  输入代码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">total=0</span><br><span class=\"line\">count=0</span><br><span class=\"line\">inputfile=<span class=\"string\">&#x27;1000ValuesCalcMean&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"built_in\">read</span> line;<span class=\"keyword\">do</span></span><br><span class=\"line\">    total=$((total+line)）</span><br><span class=\"line\">    count=$[<span class=\"variable\">$count</span>+<span class=\"number\">1</span>]</span><br><span class=\"line\">done &lt; <span class=\"variable\">$inputfile</span></span><br><span class=\"line\">echo $[<span class=\"variable\">$total</span>/<span class=\"variable\">$count</span>] &gt; mean_result_学号_名字.txt</span><br></pre></td></tr></table></figure>\n\n<p>      <img src=\"/2023/04/02/SingleChip/d5a14db6ef5b8ee6e4e4628c1290b38445a7835e.png\"></p>\n<p>  输入完后按esc键退出插入模式，输入:wq退出vim</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">chmod</span> 777 mean.sh //给mean.sh权限</span><br><span class=\"line\">./mean.sh              //执行mean.sh</span><br></pre></td></tr></table></figure>\n\n<p>  执行完后10文件夹内出现 mean_result_学号_名字.txt 文件</p>\n<p>  <img src=\"/2023/04/02/SingleChip/57037c8bea42c86053227fe549874b419653b56c.png\"></p>\n<p>  内容为 平均数</p>\n<p>  创建ReadMe.md</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ReadMe.md</span><br></pre></td></tr></table></figure>\n\n<p>  进入后直接:wq退出</p>\n<p>  <img src=\"/2023/04/02/SingleChip/426941f16f054370a2e48c0b9334b919349fd85a.png\" alt=\"Screenshot from 2023-04-02 01-14-51.png\"></p>\n<p>  看到文件夹内多出了文件ReaMe.md，双击</p>\n<p>  <img src=\"/2023/04/02/SingleChip/54c588817fcd205435a974f1d8077220d5485bf4.png\" alt=\"Screenshot from 2023-04-02 01-16-19.png\"></p>\n<p>  在文本编辑器内写入以下示例后保存</p>\n<p>  <img src=\"/2023/04/02/SingleChip/62d506ea99c99e2d95a5c5d0b00410291b1a7de4.png\" alt=\"Screenshot from 2023-04-02 01-21-06.png\"></p>\n<p>  打包成.tgz格式的压缩包(别忘了传图片)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -czvf 压缩包的名字.tgz 你要压缩的第一个文件 第二个 ....</span><br></pre></td></tr></table></figure>\n\n<p>  <img src=\"/2023/04/02/SingleChip/ba71358b9ca3c9a533af1de889672b443827b2b5.png\" alt=\"Screenshot from 2023-04-02 01-22-26.png\"></p>\n<p>  进入学习通上交即可</p>\n<h2 id=\"进阶要求\"><a href=\"#进阶要求\" class=\"headerlink\" title=\"进阶要求\"></a>进阶要求</h2><p>  代码修改为</p>\n<p>  <img src=\"/2023/04/02/SingleChip/08a01404c19e5459d57c8e384f5eaf22869a43eb.png\" alt=\"Screenshot from 2023-04-02 01-54-33.png\"></p>\n<p>  执行命令改为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./mean.sh 1000ValuesCalcMean</span><br></pre></td></tr></table></figure>\n\n<p>  执行完后压缩上交即可(别忘了在ReadMe中说明使用了进阶要求)</p>\n<h1 id=\"第二次实验\"><a href=\"#第二次实验\" class=\"headerlink\" title=\"第二次实验\"></a>第二次实验</h1><h2 id=\"实验要求\"><a href=\"#实验要求\" class=\"headerlink\" title=\"实验要求\"></a>实验要求</h2><p>  <img src=\"/2023/04/02/SingleChip/2023-04-07-15-48-18-Screenshot%20from%202023-04-07%2015-47-51.png\"></p>\n<p>  基本要求只需要配置SCP和NFS，配置SCP和NFS的文件时候添加上自己的学号截图，使用SCP和NFS的时候截图并放在Word里,把word和压缩后的配置文件上交即可</p>\n<h2 id=\"配置SCP\"><a href=\"#配置SCP\" class=\"headerlink\" title=\"配置SCP\"></a>配置SCP</h2><p>  我使用的termux，就是老师发在群里的那个app</p>\n<p>  如果你是第一次安装termux</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//termux 上执行</span><br><span class=\"line\">apt update &amp;&amp; apt upgrade </span><br></pre></td></tr></table></figure>\n\n<p>  安装Openssh</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//termux 上执行</span><br><span class=\"line\">pkg install openssh</span><br></pre></td></tr></table></figure>\n\n<p>  安装成功后可以测试ssh的连接</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//termux</span><br><span class=\"line\"></span><br><span class=\"line\">//给自己的用户设置密码</span><br><span class=\"line\">passwd</span><br><span class=\"line\">//打开ssh服务端</span><br><span class=\"line\">sshd</span><br><span class=\"line\"></span><br><span class=\"line\">//ubuntu</span><br><span class=\"line\"></span><br><span class=\"line\">ssh -p 8022 user@hostname_or_ip</span><br><span class=\"line\">//user是你在termux上的用户可以在termux上执行<span class=\"built_in\">whoami</span>查看</span><br><span class=\"line\">//host_or_ip是的你ip地址，确保你的termux和ubuntu在统一局域网下</span><br><span class=\"line\">//手机按wifi查看你的ipv4地址</span><br><span class=\"line\">//也可以在termux执行ifconfig查看wlan0网络适配器的inet</span><br></pre></td></tr></table></figure>\n\n<p>  连接成功后,在ubuntu上随便创建一个文件测试SCP,新开一个终端</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//ubuntu</span><br><span class=\"line\"></span><br><span class=\"line\">scp -P 8022 SourceFile user@hostname_or_ip:TargetPath</span><br><span class=\"line\">//SourFile是你要发送的文件</span><br><span class=\"line\">//TargPath是要发送到移动的路径，termux最好用当前用户的路径，例如./ (termux没有root用户权限)</span><br><span class=\"line\">//usr是termux的用户名</span><br><span class=\"line\">//host_or_ip是的你ip地址</span><br><span class=\"line\"></span><br><span class=\"line\">//在你连接termux的ssh终端或者termux上查看文件是否发送过来，如果Target是./</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">ls</span> ~</span><br></pre></td></tr></table></figure>\n\n<p>  截图保存</p>\n<h2 id=\"NFS\"><a href=\"#NFS\" class=\"headerlink\" title=\"NFS\"></a>NFS</h2><p>我使用的是我购买的服务器，你可以采用windos和虚拟机，或者虚拟机之间通信</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install nfs-kernel-server <span class=\"comment\">#安装NFS服务器端</span></span><br><span class=\"line\">sudo apt-get install nfs-common        <span class=\"comment\">#安装NFS客户端</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>在服务器上</strong></p>\n<ul>\n<li>设置本地目录权限</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> /nfs</span><br><span class=\"line\">sudo <span class=\"built_in\">chmod</span> -R 777 /nfs</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>添加目录的绝对路径到共享</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/exports</span><br><span class=\"line\"><span class=\"comment\">#添加</span></span><br><span class=\"line\">/nfs *(rw,async,no_subtree_check,no_root_squash)</span><br><span class=\"line\"><span class=\"comment\">#学号名字</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>启动NFS服务</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo /usr/sbin/exportfs -arf </span><br><span class=\"line\">sudo /etc/init.d/nfs-kernel-server start</span><br></pre></td></tr></table></figure>\n\n<p><strong>在客户端上</strong></p>\n<ul>\n<li>NFS服务测试</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mount -t nfs 192.168.12.123:/nfs /mnt -o nolock</span><br><span class=\"line\"><span class=\"comment\">#如果挂载成功，在/mnt目录下能看到/nfsroot目录下的内容</span></span><br><span class=\"line\"><span class=\"comment\">#如果你就一台电脑可以自己挂载自己把 192.168.12.123 改成 127.0.0.1</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>截图,把exports复制一份</strong></p>\n<h2 id=\"提交\"><a href=\"#提交\" class=\"headerlink\" title=\"提交\"></a>提交</h2><p>这样就完成的基本要求</p>\n<ul>\n<li><p>把配置文件压缩</p>\n</li>\n<li><p>把图放到word，别忘加标题</p>\n</li>\n<li><p>把这个表复制到word</p>\n</li>\n</ul>\n<p><img src=\"/2023/04/02/SingleChip/2023-04-07-17-11-07-Screenshot%20from%202023-04-07%2017-10-50.png\"></p>\n<p>提交即可</p>\n<h2 id=\"进阶要求-1\"><a href=\"#进阶要求-1\" class=\"headerlink\" title=\"进阶要求\"></a>进阶要求</h2><p>可以参考我的git的使用</p>\n<p>进阶没时间写了,找个其他时间再写</p>\n<p><strong>这是我实验二的<a href=\"https://gitee.com/Exiaozhang/home-work_1/tree/master/19\">文件</a>包括了进阶要求的文件,可以参考着改改,不会可以线下问我,或者在我的评论区给我留言</strong></p>\n","site":{"data":{}},"cover_type":"img","excerpt":"<h1 id=\"第一次实验\"><a href=\"#第一次实验\" class=\"headerlink\" title=\"第一次实验\"></a>第一次实验</h1><h2 id=\"实验基本要求\"><a href=\"#实验基本要求\" class=\"headerlink\" title=\"实验基本要求\"></a>实验基本要求</h2><p>  <img src=\"/2023/04/02/SingleChip/2023-04-02-02-05-40-image.png\"></p>","more":"<h2 id=\"写取平均值脚本\"><a href=\"#写取平均值脚本\" class=\"headerlink\" title=\"写取平均值脚本\"></a>写取平均值脚本</h2><p>  创建项目文件</p>\n<p>  <img src=\"/2023/04/02/SingleChip/53dd30183091b0bb68dfbdb15031cc2dfa2e0306.png\" alt=\"Screenshot from 2023-04-02 00-47-22.png\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> Project //在用户目录下（~）创建Project文件夹</span><br><span class=\"line\"><span class=\"built_in\">cd</span> Project/  </span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> Homework //在Project目录下创建Homework文件夹</span><br><span class=\"line\"><span class=\"built_in\">cd</span> Homework/</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> 10 //此时实验的项目地址</span><br><span class=\"line\"><span class=\"built_in\">cd</span> 10</span><br></pre></td></tr></table></figure>\n\n<p>     </p>\n<p>  使用vim创建mean.sh文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim mean.sh </span><br></pre></td></tr></table></figure>\n\n<p>  如果出现这种情况<br>  <img src=\"/2023/04/02/SingleChip/4c9eeaf452c81e4203aab3ab35f203b530e08202.png\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install vim</span><br></pre></td></tr></table></figure>\n\n<p>  安装完后在执行vim mean.sh，执行完后界面为</p>\n<p>  <img src=\"/2023/04/02/SingleChip/426941f16f054370a2e48c0b9334b919349fd85a.png\" alt=\"Screenshot from 2023-04-02 01-14-51.png\"></p>\n<p>    按i键进入插入模式</p>\n<p>  输入代码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">total=0</span><br><span class=\"line\">count=0</span><br><span class=\"line\">inputfile=<span class=\"string\">&#x27;1000ValuesCalcMean&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"built_in\">read</span> line;<span class=\"keyword\">do</span></span><br><span class=\"line\">    total=$((total+line)）</span><br><span class=\"line\">    count=$[<span class=\"variable\">$count</span>+<span class=\"number\">1</span>]</span><br><span class=\"line\">done &lt; <span class=\"variable\">$inputfile</span></span><br><span class=\"line\">echo $[<span class=\"variable\">$total</span>/<span class=\"variable\">$count</span>] &gt; mean_result_学号_名字.txt</span><br></pre></td></tr></table></figure>\n\n<p>      <img src=\"/2023/04/02/SingleChip/d5a14db6ef5b8ee6e4e4628c1290b38445a7835e.png\"></p>\n<p>  输入完后按esc键退出插入模式，输入:wq退出vim</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">chmod</span> 777 mean.sh //给mean.sh权限</span><br><span class=\"line\">./mean.sh              //执行mean.sh</span><br></pre></td></tr></table></figure>\n\n<p>  执行完后10文件夹内出现 mean_result_学号_名字.txt 文件</p>\n<p>  <img src=\"/2023/04/02/SingleChip/57037c8bea42c86053227fe549874b419653b56c.png\"></p>\n<p>  内容为 平均数</p>\n<p>  创建ReadMe.md</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ReadMe.md</span><br></pre></td></tr></table></figure>\n\n<p>  进入后直接:wq退出</p>\n<p>  <img src=\"/2023/04/02/SingleChip/426941f16f054370a2e48c0b9334b919349fd85a.png\" alt=\"Screenshot from 2023-04-02 01-14-51.png\"></p>\n<p>  看到文件夹内多出了文件ReaMe.md，双击</p>\n<p>  <img src=\"/2023/04/02/SingleChip/54c588817fcd205435a974f1d8077220d5485bf4.png\" alt=\"Screenshot from 2023-04-02 01-16-19.png\"></p>\n<p>  在文本编辑器内写入以下示例后保存</p>\n<p>  <img src=\"/2023/04/02/SingleChip/62d506ea99c99e2d95a5c5d0b00410291b1a7de4.png\" alt=\"Screenshot from 2023-04-02 01-21-06.png\"></p>\n<p>  打包成.tgz格式的压缩包(别忘了传图片)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -czvf 压缩包的名字.tgz 你要压缩的第一个文件 第二个 ....</span><br></pre></td></tr></table></figure>\n\n<p>  <img src=\"/2023/04/02/SingleChip/ba71358b9ca3c9a533af1de889672b443827b2b5.png\" alt=\"Screenshot from 2023-04-02 01-22-26.png\"></p>\n<p>  进入学习通上交即可</p>\n<h2 id=\"进阶要求\"><a href=\"#进阶要求\" class=\"headerlink\" title=\"进阶要求\"></a>进阶要求</h2><p>  代码修改为</p>\n<p>  <img src=\"/2023/04/02/SingleChip/08a01404c19e5459d57c8e384f5eaf22869a43eb.png\" alt=\"Screenshot from 2023-04-02 01-54-33.png\"></p>\n<p>  执行命令改为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./mean.sh 1000ValuesCalcMean</span><br></pre></td></tr></table></figure>\n\n<p>  执行完后压缩上交即可(别忘了在ReadMe中说明使用了进阶要求)</p>\n<h1 id=\"第二次实验\"><a href=\"#第二次实验\" class=\"headerlink\" title=\"第二次实验\"></a>第二次实验</h1><h2 id=\"实验要求\"><a href=\"#实验要求\" class=\"headerlink\" title=\"实验要求\"></a>实验要求</h2><p>  <img src=\"/2023/04/02/SingleChip/2023-04-07-15-48-18-Screenshot%20from%202023-04-07%2015-47-51.png\"></p>\n<p>  基本要求只需要配置SCP和NFS，配置SCP和NFS的文件时候添加上自己的学号截图，使用SCP和NFS的时候截图并放在Word里,把word和压缩后的配置文件上交即可</p>\n<h2 id=\"配置SCP\"><a href=\"#配置SCP\" class=\"headerlink\" title=\"配置SCP\"></a>配置SCP</h2><p>  我使用的termux，就是老师发在群里的那个app</p>\n<p>  如果你是第一次安装termux</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//termux 上执行</span><br><span class=\"line\">apt update &amp;&amp; apt upgrade </span><br></pre></td></tr></table></figure>\n\n<p>  安装Openssh</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//termux 上执行</span><br><span class=\"line\">pkg install openssh</span><br></pre></td></tr></table></figure>\n\n<p>  安装成功后可以测试ssh的连接</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//termux</span><br><span class=\"line\"></span><br><span class=\"line\">//给自己的用户设置密码</span><br><span class=\"line\">passwd</span><br><span class=\"line\">//打开ssh服务端</span><br><span class=\"line\">sshd</span><br><span class=\"line\"></span><br><span class=\"line\">//ubuntu</span><br><span class=\"line\"></span><br><span class=\"line\">ssh -p 8022 user@hostname_or_ip</span><br><span class=\"line\">//user是你在termux上的用户可以在termux上执行<span class=\"built_in\">whoami</span>查看</span><br><span class=\"line\">//host_or_ip是的你ip地址，确保你的termux和ubuntu在统一局域网下</span><br><span class=\"line\">//手机按wifi查看你的ipv4地址</span><br><span class=\"line\">//也可以在termux执行ifconfig查看wlan0网络适配器的inet</span><br></pre></td></tr></table></figure>\n\n<p>  连接成功后,在ubuntu上随便创建一个文件测试SCP,新开一个终端</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//ubuntu</span><br><span class=\"line\"></span><br><span class=\"line\">scp -P 8022 SourceFile user@hostname_or_ip:TargetPath</span><br><span class=\"line\">//SourFile是你要发送的文件</span><br><span class=\"line\">//TargPath是要发送到移动的路径，termux最好用当前用户的路径，例如./ (termux没有root用户权限)</span><br><span class=\"line\">//usr是termux的用户名</span><br><span class=\"line\">//host_or_ip是的你ip地址</span><br><span class=\"line\"></span><br><span class=\"line\">//在你连接termux的ssh终端或者termux上查看文件是否发送过来，如果Target是./</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">ls</span> ~</span><br></pre></td></tr></table></figure>\n\n<p>  截图保存</p>\n<h2 id=\"NFS\"><a href=\"#NFS\" class=\"headerlink\" title=\"NFS\"></a>NFS</h2><p>我使用的是我购买的服务器，你可以采用windos和虚拟机，或者虚拟机之间通信</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install nfs-kernel-server <span class=\"comment\">#安装NFS服务器端</span></span><br><span class=\"line\">sudo apt-get install nfs-common        <span class=\"comment\">#安装NFS客户端</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>在服务器上</strong></p>\n<ul>\n<li>设置本地目录权限</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> /nfs</span><br><span class=\"line\">sudo <span class=\"built_in\">chmod</span> -R 777 /nfs</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>添加目录的绝对路径到共享</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/exports</span><br><span class=\"line\"><span class=\"comment\">#添加</span></span><br><span class=\"line\">/nfs *(rw,async,no_subtree_check,no_root_squash)</span><br><span class=\"line\"><span class=\"comment\">#学号名字</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>启动NFS服务</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo /usr/sbin/exportfs -arf </span><br><span class=\"line\">sudo /etc/init.d/nfs-kernel-server start</span><br></pre></td></tr></table></figure>\n\n<p><strong>在客户端上</strong></p>\n<ul>\n<li>NFS服务测试</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mount -t nfs 192.168.12.123:/nfs /mnt -o nolock</span><br><span class=\"line\"><span class=\"comment\">#如果挂载成功，在/mnt目录下能看到/nfsroot目录下的内容</span></span><br><span class=\"line\"><span class=\"comment\">#如果你就一台电脑可以自己挂载自己把 192.168.12.123 改成 127.0.0.1</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>截图,把exports复制一份</strong></p>\n<h2 id=\"提交\"><a href=\"#提交\" class=\"headerlink\" title=\"提交\"></a>提交</h2><p>这样就完成的基本要求</p>\n<ul>\n<li><p>把配置文件压缩</p>\n</li>\n<li><p>把图放到word，别忘加标题</p>\n</li>\n<li><p>把这个表复制到word</p>\n</li>\n</ul>\n<p><img src=\"/2023/04/02/SingleChip/2023-04-07-17-11-07-Screenshot%20from%202023-04-07%2017-10-50.png\"></p>\n<p>提交即可</p>\n<h2 id=\"进阶要求-1\"><a href=\"#进阶要求-1\" class=\"headerlink\" title=\"进阶要求\"></a>进阶要求</h2><p>可以参考我的git的使用</p>\n<p>进阶没时间写了,找个其他时间再写</p>\n<p><strong>这是我实验二的<a href=\"https://gitee.com/Exiaozhang/home-work_1/tree/master/19\">文件</a>包括了进阶要求的文件,可以参考着改改,不会可以线下问我,或者在我的评论区给我留言</strong></p>"},{"title":"在Ubuntu中装Nodejs中遇到的坑","date":"2023-04-07T07:21:44.000Z","top_img":"/img/Top_img.jpg","cover":"/img/Cover_UbuntuNodejs.png","_content":"\n# 在Ubuntu中装Nodejs\n\n```bash\ncurl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash - &&\\\nsudo apt-get install -y nodejs\n```\n\n![](Ubuntu-Nodejs/2023-04-07-15-31-01-Screenshot%20from%202023-04-07%2015-30-53.png)\n\n<!--more-->\n\n结果报出GPG error:NO_PUBKEY \n\n* 首先我尝试了\n\n```bash\nsudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys YOURKEY\n//把YOURKEY替换为报错提示的那个\n```\n\n* 继续执行安装代码，报出同样的错误\n  \n  ![](Ubuntu-Nodejs/2023-04-07-15-36-35-Screenshot%20from%202023-04-07%2015-36-21.png)\n\n* 根据这个警告，判断apt可能没有信任deb.Nodesoure.com,执行以下代码\n\n```bash\n//找到这个仓库所在的sourelist,我是ubuntu20.4,路径可能不太一样，但都差不多\nvim /etc/apt/sources.list.d/nodesource.list\n//修改\ndeb [trusted=yes] https://deb.nodesource.com/node_18.x focal main\n```\n\n* 再次执行安装成功\n  \n  ![Screenshot from 2023-04-05 21-36-31.png](Ubuntu-Nodejs/1b20eb77d85e7959657003b7b219a44065b0876d.png)\n","source":"_posts/Ubuntu-Nodejs.md","raw":"---\ntitle: 在Ubuntu中装Nodejs中遇到的坑\ndate: 2023-04-07 15:21:44\ntags:\ntop_img: /img/Top_img.jpg\ncover: /img/Cover_UbuntuNodejs.png\n---\n\n# 在Ubuntu中装Nodejs\n\n```bash\ncurl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash - &&\\\nsudo apt-get install -y nodejs\n```\n\n![](Ubuntu-Nodejs/2023-04-07-15-31-01-Screenshot%20from%202023-04-07%2015-30-53.png)\n\n<!--more-->\n\n结果报出GPG error:NO_PUBKEY \n\n* 首先我尝试了\n\n```bash\nsudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys YOURKEY\n//把YOURKEY替换为报错提示的那个\n```\n\n* 继续执行安装代码，报出同样的错误\n  \n  ![](Ubuntu-Nodejs/2023-04-07-15-36-35-Screenshot%20from%202023-04-07%2015-36-21.png)\n\n* 根据这个警告，判断apt可能没有信任deb.Nodesoure.com,执行以下代码\n\n```bash\n//找到这个仓库所在的sourelist,我是ubuntu20.4,路径可能不太一样，但都差不多\nvim /etc/apt/sources.list.d/nodesource.list\n//修改\ndeb [trusted=yes] https://deb.nodesource.com/node_18.x focal main\n```\n\n* 再次执行安装成功\n  \n  ![Screenshot from 2023-04-05 21-36-31.png](Ubuntu-Nodejs/1b20eb77d85e7959657003b7b219a44065b0876d.png)\n","slug":"Ubuntu-Nodejs","published":1,"updated":"2023-04-12T16:45:00.492Z","_id":"clgc9df2j000a3cu43xxvasm1","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"在Ubuntu中装Nodejs\"><a href=\"#在Ubuntu中装Nodejs\" class=\"headerlink\" title=\"在Ubuntu中装Nodejs\"></a>在Ubuntu中装Nodejs</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash - &amp;&amp;\\</span><br><span class=\"line\">sudo apt-get install -y nodejs</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/04/07/Ubuntu-Nodejs/2023-04-07-15-31-01-Screenshot%20from%202023-04-07%2015-30-53.png\"></p>\n<span id=\"more\"></span>\n\n<p>结果报出GPG error:NO_PUBKEY </p>\n<ul>\n<li>首先我尝试了</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys YOURKEY</span><br><span class=\"line\">//把YOURKEY替换为报错提示的那个</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>继续执行安装代码，报出同样的错误</p>\n<p><img src=\"/2023/04/07/Ubuntu-Nodejs/2023-04-07-15-36-35-Screenshot%20from%202023-04-07%2015-36-21.png\"></p>\n</li>\n<li><p>根据这个警告，判断apt可能没有信任deb.Nodesoure.com,执行以下代码</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//找到这个仓库所在的sourelist,我是ubuntu20.4,路径可能不太一样，但都差不多</span><br><span class=\"line\">vim /etc/apt/sources.list.d/nodesource.list</span><br><span class=\"line\">//修改</span><br><span class=\"line\">deb [trusted=<span class=\"built_in\">yes</span>] https://deb.nodesource.com/node_18.x focal main</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>再次执行安装成功<img src=\"/2023/04/07/Ubuntu-Nodejs/1b20eb77d85e7959657003b7b219a44065b0876d.png\" alt=\"Screenshot from 2023-04-05 21-36-31.png\"></li>\n</ul>\n","site":{"data":{}},"cover_type":"img","excerpt":"<h1 id=\"在Ubuntu中装Nodejs\"><a href=\"#在Ubuntu中装Nodejs\" class=\"headerlink\" title=\"在Ubuntu中装Nodejs\"></a>在Ubuntu中装Nodejs</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash - &amp;&amp;\\</span><br><span class=\"line\">sudo apt-get install -y nodejs</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/04/07/Ubuntu-Nodejs/2023-04-07-15-31-01-Screenshot%20from%202023-04-07%2015-30-53.png\"></p>","more":"<p>结果报出GPG error:NO_PUBKEY </p>\n<ul>\n<li>首先我尝试了</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys YOURKEY</span><br><span class=\"line\">//把YOURKEY替换为报错提示的那个</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>继续执行安装代码，报出同样的错误</p>\n<p><img src=\"/2023/04/07/Ubuntu-Nodejs/2023-04-07-15-36-35-Screenshot%20from%202023-04-07%2015-36-21.png\"></p>\n</li>\n<li><p>根据这个警告，判断apt可能没有信任deb.Nodesoure.com,执行以下代码</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//找到这个仓库所在的sourelist,我是ubuntu20.4,路径可能不太一样，但都差不多</span><br><span class=\"line\">vim /etc/apt/sources.list.d/nodesource.list</span><br><span class=\"line\">//修改</span><br><span class=\"line\">deb [trusted=<span class=\"built_in\">yes</span>] https://deb.nodesource.com/node_18.x focal main</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>再次执行安装成功<img src=\"/2023/04/07/Ubuntu-Nodejs/1b20eb77d85e7959657003b7b219a44065b0876d.png\" alt=\"Screenshot from 2023-04-05 21-36-31.png\"></li>\n</ul>"},{"title":"leetCode","date":"2023-04-11T08:18:02.000Z","top_img":"/img/Top_img.jpg","cover":"/img/Cover_LeetCode.png","highlight_shrink":false,"_content":"\n# 简单难度\n\n## 回文数\n\n[回文数 - 力扣](https://leetcode.cn/problems/palindrome-number/description/)\n\n给你一个整数 `x` ，如果 `x` 是一个回文整数，返回 `true` ；否则，返回 `false` 。\n\n回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。\n\n> **示例 1：**\n> **输入：** x = 121\n> **输出：** true\n\n### 我的思路\n\n 求出数据是几位数，利用整除求出每一位的数字，把首位放到末尾...最后比较是否相等，表现十分差\n\n#### 代码\n\n```cpp\nclass Solution {\npublic:\n    bool isPalindrome(int x) {\n    long tempx = x;\n    int newx = 0;\n    if (x < 0)\n    {\n        return false;\n    }\n\n    int Place = 0;\n    double temp0 = 1;\n    int count = 0;\n\n    do\n    {\n        Place =(int)(x / (temp0 * 10));\n        temp0 *= 10;\n        count += 1;\n    } while (Place != 0);\n\n\n    long j = 1;\n\n    for (int i = count-1; i >= 0; i--)\n    {\n        long temp = tempx / pow(10,i);\n        tempx -= temp * pow(10, i);\n        newx += temp * j;\n        j *= 10;\n        std::cout << (\"%d\", newx) << \"\\n\";\n    }\n    if (newx == x)\n    {\n return true;\n    }\n    else\n    {\n  return false;\n    }\n    }\n};\n```\n\n### 其他思路\n\n#### 反转一半数字\n\n映入脑海的第一个想法是将数字转换为字符串，并检查字符串是否为回文。但是，这需要额外的非常量空间来创建问题描述中所不允许的字符串。\n\n第二个想法是将数字本身反转，然后将反转后的数字与原始数字进行比较，如果它们是相同的，那么这个数字就是回文。 但是，如果反转后的数字大于`int.MAX`，我们将遇到整数溢出问题。\n\n按照第二个想法，为了避免数字反转可能导致的溢出问题，为什么不考虑只反转` int`数字的一半？毕竟，如果该数字是回文，其后半部分反转后应该与原始数字的前半部分相同。\n\n例如，输入 1221，我们可以将数字 “1221” 的后半部分从 “21” 反转为 “12”，并将其与前半部分 “12” 进行比较，因为二者相同，我们得知数字 1221 是回文。\n\n##### 算法\n\n首先，我们应该处理一些临界情况。所有负数都不可能是回文，例如：-123 不是回文，因为 - 不等于 3。所以我们可以对所有负数返回 false。除了 0 以外，所有个位是 0 的数字不可能是回文，因为最高位不等于 0。所以我们可以对所有大于 0 且个位是 0 的数字返回 false。\n\n现在，让我们来考虑如何反转后半部分的数字。\n\n对于数字 1221，如果执行 1221 % 10，我们将得到最后一位数字 1，要得到倒数第二位数字，我们可以先通过除以 10 把最后一位数字从 1221 中移除，1221 / 10 = 122，再求出上一步结果除以 10 的余数，122 % 10 = 2，就可以得到倒数第二位数字。如果我们把最后一位数字乘以 10，再加上倒数第二位数字，1 * 10 + 2 = 12，就得到了我们想要的反转后的数字。如果继续这个过程，我们将得到更多位数的反转数字。\n\n现在的问题是，我们如何知道反转数字的位数已经达到原始数字位数的一半？\n\n由于整个过程我们不断将原始数字除以 10，然后给反转后的数字乘上 10，所以，当原始数字小于或等于反转后的数字时，就意味着我们已经处理了一半位数的数字了。\n\n##### 代码\n\n```cpp\nclass Solution {\npublic:\n    bool isPalindrome(int x) {\n        // 特殊情况：\n        // 如上所述，当 x < 0 时，x 不是回文数。\n        // 同样地，如果数的最后一位是 0，为了使该数字为回文，\n        // 则其第一位数字也应该是 0\n        // 只有 0 满足这一属性\n        if (x < 0 || (x % 10 == 0 && x != 0)) {\n            return false;\n        }\n\n        int revertedNumber = 0;\n        while (x > revertedNumber) {\n            revertedNumber = revertedNumber * 10 + x % 10;\n            x /= 10;\n        }\n\n        // 当数字长度为奇数时，我们可以通过 revertedNumber/10 去除处于中位的数字。\n        // 例如，当输入为 12321 时，在 while 循环的末尾我们可以得到 x = 12，revertedNumber = 123，\n        // 由于处于中位的数字不影响回文（它总是与自己相等），所以我们可以简单地将其去除。\n        return x == revertedNumber || x == revertedNumber / 10;\n    }\n};\n```\n\n## 罗马数字转整\n\n[罗马数字转整数 - 力扣](https://leetcode.cn/problems/roman-to-integer/description/)\n\n罗马数字包含以下七种字符: `I`， `V`， `X`， `L`，`C`，`D` 和 `M`。\n\n```\n**字符** **数值**\nI 1\nV 5\nX 10\nL 50\nC 100\nD 500\nM 1000\n```\n\n例如， 罗马数字 `2` 写做 `II` ，即为两个并列的 1 。`12` 写做 `XII` ，即为 `X` + `II` 。 `27` 写做  `XXVII`, 即为 `XX` + `V` + `II` 。\n\n通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 `IIII`，而是 `IV`。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 `IX`。这个特殊的规则只适用于以下六种情况：\n\n- `I` 可以放在 `V` (5) 和 `X` (10) 的左边，来表示 4 和 9。\n- `X` 可以放在 `L` (50) 和 `C` (100) 的左边，来表示 40 和 90。 \n- `C` 可以放在 `D` (500) 和 `M` (1000) 的左边，来表示 400 和 900。\n\n**给定一个罗马数字，将其转换成整数。**\n\n### 我的思路\n\n比较字符与其后面的那一个字符的大小，如果比后面的大则加，比后面的小则减\n\n#### 代码\n\n```cpp\n private:\n    std::unordered_map<char, int> symbolValues = {\n        {'I', 1},\n        {'V', 5},\n        {'X', 10},\n        {'L',50},\n        {'C', 100},\n        {'D', 500},\n        {'M', 1000}};\n\npublic:\n    int romanToInt(string s) {\n        int ans = 0;\n        int n = s.length();\n        for (int i = 0; i < n ; i++)\n        {\n            if (i == n - 1)\n            {\n                ans += symbolValues[s[i]];\n                return ans;\n            }\n            if (symbolValues[s[i]] >= symbolValues[s[i + 1]])\n            {\n                ans += symbolValues[s[i]];\n            }\n            else\n            {\n                ans -= symbolValues[s[i]];\n            }\n\n        }\n        return ans;\n    }\n```\n\n### 其他思路\n\n[力扣官方解题](https://leetcode.cn/problems/roman-to-integer/solutions/774992/luo-ma-shu-zi-zhuan-zheng-shu-by-leetcod-w55p/)\n\n## 最长公共前缀\n\n[14. 最长公共前缀 - 力扣（Leetcode）](https://leetcode.cn/problems/longest-common-prefix/description/)\n\n编写一个函数来查找字符串数组中的最长公共前缀。\n\n如果不存在公共前缀，返回空字符串 `\"\"`。\n\n**示例 1：**\n\n> **输入:** strs = [\"flower\",\"flow\",\"flight\"]\n> \n> **输出:** \"fl\"\n\n### 我的思路\n\n这题非常简单，遍历一个字符串的所有字符的过程中判断其他的字符串是否也有这个字符或者是否达到了其他字符串的最大长度，如果所有其他字符都有这个字符则把此字符加到结果中，否则直接返回结果\n\n#### 代码\n\n```cpp\nstd::string LeetCode::longestCommonPrefix(std::vector<std::string> &strs)\n{\n    std::string result = \"\";\n    for (int i = 0; i < strs[0].length(); i++)\n    {\n        char common = strs[0][i];\n        for (int j = 1; j < strs.size(); j++)\n        {\n            if(strs[j][i]!=common||i>strs[j].length())\n                return result;\n        }\n        result.push_back(common);\n    }\n    return result;\n}\n```\n\n### 其他思路\n\n[力扣官方解题](https://leetcode.cn/problems/longest-common-prefix/solutions/288575/zui-chang-gong-gong-qian-zhui-by-leetcode-solution/)\n","source":"_posts/leetCode.md","raw":"---\ntitle: leetCode\ndate: 2023-04-11 16:18:02\ntags: ['算法']\ncategories: ['学习']\ntop_img: /img/Top_img.jpg\ncover: /img/Cover_LeetCode.png\nhighlight_shrink: false\n---\n\n# 简单难度\n\n## 回文数\n\n[回文数 - 力扣](https://leetcode.cn/problems/palindrome-number/description/)\n\n给你一个整数 `x` ，如果 `x` 是一个回文整数，返回 `true` ；否则，返回 `false` 。\n\n回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。\n\n> **示例 1：**\n> **输入：** x = 121\n> **输出：** true\n\n### 我的思路\n\n 求出数据是几位数，利用整除求出每一位的数字，把首位放到末尾...最后比较是否相等，表现十分差\n\n#### 代码\n\n```cpp\nclass Solution {\npublic:\n    bool isPalindrome(int x) {\n    long tempx = x;\n    int newx = 0;\n    if (x < 0)\n    {\n        return false;\n    }\n\n    int Place = 0;\n    double temp0 = 1;\n    int count = 0;\n\n    do\n    {\n        Place =(int)(x / (temp0 * 10));\n        temp0 *= 10;\n        count += 1;\n    } while (Place != 0);\n\n\n    long j = 1;\n\n    for (int i = count-1; i >= 0; i--)\n    {\n        long temp = tempx / pow(10,i);\n        tempx -= temp * pow(10, i);\n        newx += temp * j;\n        j *= 10;\n        std::cout << (\"%d\", newx) << \"\\n\";\n    }\n    if (newx == x)\n    {\n return true;\n    }\n    else\n    {\n  return false;\n    }\n    }\n};\n```\n\n### 其他思路\n\n#### 反转一半数字\n\n映入脑海的第一个想法是将数字转换为字符串，并检查字符串是否为回文。但是，这需要额外的非常量空间来创建问题描述中所不允许的字符串。\n\n第二个想法是将数字本身反转，然后将反转后的数字与原始数字进行比较，如果它们是相同的，那么这个数字就是回文。 但是，如果反转后的数字大于`int.MAX`，我们将遇到整数溢出问题。\n\n按照第二个想法，为了避免数字反转可能导致的溢出问题，为什么不考虑只反转` int`数字的一半？毕竟，如果该数字是回文，其后半部分反转后应该与原始数字的前半部分相同。\n\n例如，输入 1221，我们可以将数字 “1221” 的后半部分从 “21” 反转为 “12”，并将其与前半部分 “12” 进行比较，因为二者相同，我们得知数字 1221 是回文。\n\n##### 算法\n\n首先，我们应该处理一些临界情况。所有负数都不可能是回文，例如：-123 不是回文，因为 - 不等于 3。所以我们可以对所有负数返回 false。除了 0 以外，所有个位是 0 的数字不可能是回文，因为最高位不等于 0。所以我们可以对所有大于 0 且个位是 0 的数字返回 false。\n\n现在，让我们来考虑如何反转后半部分的数字。\n\n对于数字 1221，如果执行 1221 % 10，我们将得到最后一位数字 1，要得到倒数第二位数字，我们可以先通过除以 10 把最后一位数字从 1221 中移除，1221 / 10 = 122，再求出上一步结果除以 10 的余数，122 % 10 = 2，就可以得到倒数第二位数字。如果我们把最后一位数字乘以 10，再加上倒数第二位数字，1 * 10 + 2 = 12，就得到了我们想要的反转后的数字。如果继续这个过程，我们将得到更多位数的反转数字。\n\n现在的问题是，我们如何知道反转数字的位数已经达到原始数字位数的一半？\n\n由于整个过程我们不断将原始数字除以 10，然后给反转后的数字乘上 10，所以，当原始数字小于或等于反转后的数字时，就意味着我们已经处理了一半位数的数字了。\n\n##### 代码\n\n```cpp\nclass Solution {\npublic:\n    bool isPalindrome(int x) {\n        // 特殊情况：\n        // 如上所述，当 x < 0 时，x 不是回文数。\n        // 同样地，如果数的最后一位是 0，为了使该数字为回文，\n        // 则其第一位数字也应该是 0\n        // 只有 0 满足这一属性\n        if (x < 0 || (x % 10 == 0 && x != 0)) {\n            return false;\n        }\n\n        int revertedNumber = 0;\n        while (x > revertedNumber) {\n            revertedNumber = revertedNumber * 10 + x % 10;\n            x /= 10;\n        }\n\n        // 当数字长度为奇数时，我们可以通过 revertedNumber/10 去除处于中位的数字。\n        // 例如，当输入为 12321 时，在 while 循环的末尾我们可以得到 x = 12，revertedNumber = 123，\n        // 由于处于中位的数字不影响回文（它总是与自己相等），所以我们可以简单地将其去除。\n        return x == revertedNumber || x == revertedNumber / 10;\n    }\n};\n```\n\n## 罗马数字转整\n\n[罗马数字转整数 - 力扣](https://leetcode.cn/problems/roman-to-integer/description/)\n\n罗马数字包含以下七种字符: `I`， `V`， `X`， `L`，`C`，`D` 和 `M`。\n\n```\n**字符** **数值**\nI 1\nV 5\nX 10\nL 50\nC 100\nD 500\nM 1000\n```\n\n例如， 罗马数字 `2` 写做 `II` ，即为两个并列的 1 。`12` 写做 `XII` ，即为 `X` + `II` 。 `27` 写做  `XXVII`, 即为 `XX` + `V` + `II` 。\n\n通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 `IIII`，而是 `IV`。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 `IX`。这个特殊的规则只适用于以下六种情况：\n\n- `I` 可以放在 `V` (5) 和 `X` (10) 的左边，来表示 4 和 9。\n- `X` 可以放在 `L` (50) 和 `C` (100) 的左边，来表示 40 和 90。 \n- `C` 可以放在 `D` (500) 和 `M` (1000) 的左边，来表示 400 和 900。\n\n**给定一个罗马数字，将其转换成整数。**\n\n### 我的思路\n\n比较字符与其后面的那一个字符的大小，如果比后面的大则加，比后面的小则减\n\n#### 代码\n\n```cpp\n private:\n    std::unordered_map<char, int> symbolValues = {\n        {'I', 1},\n        {'V', 5},\n        {'X', 10},\n        {'L',50},\n        {'C', 100},\n        {'D', 500},\n        {'M', 1000}};\n\npublic:\n    int romanToInt(string s) {\n        int ans = 0;\n        int n = s.length();\n        for (int i = 0; i < n ; i++)\n        {\n            if (i == n - 1)\n            {\n                ans += symbolValues[s[i]];\n                return ans;\n            }\n            if (symbolValues[s[i]] >= symbolValues[s[i + 1]])\n            {\n                ans += symbolValues[s[i]];\n            }\n            else\n            {\n                ans -= symbolValues[s[i]];\n            }\n\n        }\n        return ans;\n    }\n```\n\n### 其他思路\n\n[力扣官方解题](https://leetcode.cn/problems/roman-to-integer/solutions/774992/luo-ma-shu-zi-zhuan-zheng-shu-by-leetcod-w55p/)\n\n## 最长公共前缀\n\n[14. 最长公共前缀 - 力扣（Leetcode）](https://leetcode.cn/problems/longest-common-prefix/description/)\n\n编写一个函数来查找字符串数组中的最长公共前缀。\n\n如果不存在公共前缀，返回空字符串 `\"\"`。\n\n**示例 1：**\n\n> **输入:** strs = [\"flower\",\"flow\",\"flight\"]\n> \n> **输出:** \"fl\"\n\n### 我的思路\n\n这题非常简单，遍历一个字符串的所有字符的过程中判断其他的字符串是否也有这个字符或者是否达到了其他字符串的最大长度，如果所有其他字符都有这个字符则把此字符加到结果中，否则直接返回结果\n\n#### 代码\n\n```cpp\nstd::string LeetCode::longestCommonPrefix(std::vector<std::string> &strs)\n{\n    std::string result = \"\";\n    for (int i = 0; i < strs[0].length(); i++)\n    {\n        char common = strs[0][i];\n        for (int j = 1; j < strs.size(); j++)\n        {\n            if(strs[j][i]!=common||i>strs[j].length())\n                return result;\n        }\n        result.push_back(common);\n    }\n    return result;\n}\n```\n\n### 其他思路\n\n[力扣官方解题](https://leetcode.cn/problems/longest-common-prefix/solutions/288575/zui-chang-gong-gong-qian-zhui-by-leetcode-solution/)\n","slug":"leetCode","published":1,"updated":"2023-04-13T08:36:36.537Z","_id":"clgc9df2k000b3cu4gaxl77gk","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"简单难度\"><a href=\"#简单难度\" class=\"headerlink\" title=\"简单难度\"></a>简单难度</h1><h2 id=\"回文数\"><a href=\"#回文数\" class=\"headerlink\" title=\"回文数\"></a>回文数</h2><p><a href=\"https://leetcode.cn/problems/palindrome-number/description/\">回文数 - 力扣</a></p>\n<p>给你一个整数 <code>x</code> ，如果 <code>x</code> 是一个回文整数，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>\n<p>回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p>\n<blockquote>\n<p><strong>示例 1：</strong><br><strong>输入：</strong> x = 121<br><strong>输出：</strong> true</p>\n</blockquote>\n<h3 id=\"我的思路\"><a href=\"#我的思路\" class=\"headerlink\" title=\"我的思路\"></a>我的思路</h3><p> 求出数据是几位数，利用整除求出每一位的数字，把首位放到末尾…最后比较是否相等，表现十分差</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isPalindrome</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">long</span> tempx = x;</span><br><span class=\"line\">    <span class=\"type\">int</span> newx = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> Place = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">double</span> temp0 = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">do</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Place =(<span class=\"type\">int</span>)(x / (temp0 * <span class=\"number\">10</span>));</span><br><span class=\"line\">        temp0 *= <span class=\"number\">10</span>;</span><br><span class=\"line\">        count += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (Place != <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">long</span> j = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = count<span class=\"number\">-1</span>; i &gt;= <span class=\"number\">0</span>; i--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> temp = tempx / <span class=\"built_in\">pow</span>(<span class=\"number\">10</span>,i);</span><br><span class=\"line\">        tempx -= temp * <span class=\"built_in\">pow</span>(<span class=\"number\">10</span>, i);</span><br><span class=\"line\">        newx += temp * j;</span><br><span class=\"line\">        j *= <span class=\"number\">10</span>;</span><br><span class=\"line\">        std::cout &lt;&lt; (<span class=\"string\">&quot;%d&quot;</span>, newx) &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newx == x)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"其他思路\"><a href=\"#其他思路\" class=\"headerlink\" title=\"其他思路\"></a>其他思路</h3><h4 id=\"反转一半数字\"><a href=\"#反转一半数字\" class=\"headerlink\" title=\"反转一半数字\"></a>反转一半数字</h4><p>映入脑海的第一个想法是将数字转换为字符串，并检查字符串是否为回文。但是，这需要额外的非常量空间来创建问题描述中所不允许的字符串。</p>\n<p>第二个想法是将数字本身反转，然后将反转后的数字与原始数字进行比较，如果它们是相同的，那么这个数字就是回文。 但是，如果反转后的数字大于<code>int.MAX</code>，我们将遇到整数溢出问题。</p>\n<p>按照第二个想法，为了避免数字反转可能导致的溢出问题，为什么不考虑只反转<code> int</code>数字的一半？毕竟，如果该数字是回文，其后半部分反转后应该与原始数字的前半部分相同。</p>\n<p>例如，输入 1221，我们可以将数字 “1221” 的后半部分从 “21” 反转为 “12”，并将其与前半部分 “12” 进行比较，因为二者相同，我们得知数字 1221 是回文。</p>\n<h5 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h5><p>首先，我们应该处理一些临界情况。所有负数都不可能是回文，例如：-123 不是回文，因为 - 不等于 3。所以我们可以对所有负数返回 false。除了 0 以外，所有个位是 0 的数字不可能是回文，因为最高位不等于 0。所以我们可以对所有大于 0 且个位是 0 的数字返回 false。</p>\n<p>现在，让我们来考虑如何反转后半部分的数字。</p>\n<p>对于数字 1221，如果执行 1221 % 10，我们将得到最后一位数字 1，要得到倒数第二位数字，我们可以先通过除以 10 把最后一位数字从 1221 中移除，1221 / 10 = 122，再求出上一步结果除以 10 的余数，122 % 10 = 2，就可以得到倒数第二位数字。如果我们把最后一位数字乘以 10，再加上倒数第二位数字，1 * 10 + 2 = 12，就得到了我们想要的反转后的数字。如果继续这个过程，我们将得到更多位数的反转数字。</p>\n<p>现在的问题是，我们如何知道反转数字的位数已经达到原始数字位数的一半？</p>\n<p>由于整个过程我们不断将原始数字除以 10，然后给反转后的数字乘上 10，所以，当原始数字小于或等于反转后的数字时，就意味着我们已经处理了一半位数的数字了。</p>\n<h5 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h5><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isPalindrome</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 特殊情况：</span></span><br><span class=\"line\">        <span class=\"comment\">// 如上所述，当 x &lt; 0 时，x 不是回文数。</span></span><br><span class=\"line\">        <span class=\"comment\">// 同样地，如果数的最后一位是 0，为了使该数字为回文，</span></span><br><span class=\"line\">        <span class=\"comment\">// 则其第一位数字也应该是 0</span></span><br><span class=\"line\">        <span class=\"comment\">// 只有 0 满足这一属性</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span> || (x % <span class=\"number\">10</span> == <span class=\"number\">0</span> &amp;&amp; x != <span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> revertedNumber = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (x &gt; revertedNumber) &#123;</span><br><span class=\"line\">            revertedNumber = revertedNumber * <span class=\"number\">10</span> + x % <span class=\"number\">10</span>;</span><br><span class=\"line\">            x /= <span class=\"number\">10</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 当数字长度为奇数时，我们可以通过 revertedNumber/10 去除处于中位的数字。</span></span><br><span class=\"line\">        <span class=\"comment\">// 例如，当输入为 12321 时，在 while 循环的末尾我们可以得到 x = 12，revertedNumber = 123，</span></span><br><span class=\"line\">        <span class=\"comment\">// 由于处于中位的数字不影响回文（它总是与自己相等），所以我们可以简单地将其去除。</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> x == revertedNumber || x == revertedNumber / <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"罗马数字转整\"><a href=\"#罗马数字转整\" class=\"headerlink\" title=\"罗马数字转整\"></a>罗马数字转整</h2><p><a href=\"https://leetcode.cn/problems/roman-to-integer/description/\">罗马数字转整数 - 力扣</a></p>\n<p>罗马数字包含以下七种字符: <code>I</code>， <code>V</code>， <code>X</code>， <code>L</code>，<code>C</code>，<code>D</code> 和 <code>M</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**字符** **数值**</span><br><span class=\"line\">I 1</span><br><span class=\"line\">V 5</span><br><span class=\"line\">X 10</span><br><span class=\"line\">L 50</span><br><span class=\"line\">C 100</span><br><span class=\"line\">D 500</span><br><span class=\"line\">M 1000</span><br></pre></td></tr></table></figure>\n\n<p>例如， 罗马数字 <code>2</code> 写做 <code>II</code> ，即为两个并列的 1 。<code>12</code> 写做 <code>XII</code> ，即为 <code>X</code> + <code>II</code> 。 <code>27</code> 写做  <code>XXVII</code>, 即为 <code>XX</code> + <code>V</code> + <code>II</code> 。</p>\n<p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 <code>IIII</code>，而是 <code>IV</code>。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 <code>IX</code>。这个特殊的规则只适用于以下六种情况：</p>\n<ul>\n<li><code>I</code> 可以放在 <code>V</code> (5) 和 <code>X</code> (10) 的左边，来表示 4 和 9。</li>\n<li><code>X</code> 可以放在 <code>L</code> (50) 和 <code>C</code> (100) 的左边，来表示 40 和 90。 </li>\n<li><code>C</code> 可以放在 <code>D</code> (500) 和 <code>M</code> (1000) 的左边，来表示 400 和 900。</li>\n</ul>\n<p><strong>给定一个罗马数字，将其转换成整数。</strong></p>\n<h3 id=\"我的思路-1\"><a href=\"#我的思路-1\" class=\"headerlink\" title=\"我的思路\"></a>我的思路</h3><p>比较字符与其后面的那一个字符的大小，如果比后面的大则加，比后面的小则减</p>\n<h4 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">private</span>:</span><br><span class=\"line\">    std::unordered_map&lt;<span class=\"type\">char</span>, <span class=\"type\">int</span>&gt; symbolValues = &#123;</span><br><span class=\"line\">        &#123;<span class=\"string\">&#x27;I&#x27;</span>, <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&#x27;V&#x27;</span>, <span class=\"number\">5</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&#x27;X&#x27;</span>, <span class=\"number\">10</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&#x27;L&#x27;</span>,<span class=\"number\">50</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&#x27;C&#x27;</span>, <span class=\"number\">100</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&#x27;D&#x27;</span>, <span class=\"number\">500</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&#x27;M&#x27;</span>, <span class=\"number\">1000</span>&#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">romanToInt</span><span class=\"params\">(string s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> n = s.<span class=\"built_in\">length</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n ; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == n - <span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ans += symbolValues[s[i]];</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (symbolValues[s[i]] &gt;= symbolValues[s[i + <span class=\"number\">1</span>]])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ans += symbolValues[s[i]];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ans -= symbolValues[s[i]];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"其他思路-1\"><a href=\"#其他思路-1\" class=\"headerlink\" title=\"其他思路\"></a>其他思路</h3><p><a href=\"https://leetcode.cn/problems/roman-to-integer/solutions/774992/luo-ma-shu-zi-zhuan-zheng-shu-by-leetcod-w55p/\">力扣官方解题</a></p>\n<h2 id=\"最长公共前缀\"><a href=\"#最长公共前缀\" class=\"headerlink\" title=\"最长公共前缀\"></a>最长公共前缀</h2><p><a href=\"https://leetcode.cn/problems/longest-common-prefix/description/\">14. 最长公共前缀 - 力扣（Leetcode）</a></p>\n<p>编写一个函数来查找字符串数组中的最长公共前缀。</p>\n<p>如果不存在公共前缀，返回空字符串 <code>&quot;&quot;</code>。</p>\n<p><strong>示例 1：</strong></p>\n<blockquote>\n<p><strong>输入:</strong> strs = [“flower”,”flow”,”flight”]</p>\n<p><strong>输出:</strong> “fl”</p>\n</blockquote>\n<h3 id=\"我的思路-2\"><a href=\"#我的思路-2\" class=\"headerlink\" title=\"我的思路\"></a>我的思路</h3><p>这题非常简单，遍历一个字符串的所有字符的过程中判断其他的字符串是否也有这个字符或者是否达到了其他字符串的最大长度，如果所有其他字符都有这个字符则把此字符加到结果中，否则直接返回结果</p>\n<h4 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">std::string <span class=\"title\">LeetCode::longestCommonPrefix</span><span class=\"params\">(std::vector&lt;std::string&gt; &amp;strs)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    std::string result = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; strs[<span class=\"number\">0</span>].<span class=\"built_in\">length</span>(); i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> common = strs[<span class=\"number\">0</span>][i];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt; strs.<span class=\"built_in\">size</span>(); j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(strs[j][i]!=common||i&gt;strs[j].<span class=\"built_in\">length</span>())</span><br><span class=\"line\">                <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        result.<span class=\"built_in\">push_back</span>(common);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"其他思路-2\"><a href=\"#其他思路-2\" class=\"headerlink\" title=\"其他思路\"></a>其他思路</h3><p><a href=\"https://leetcode.cn/problems/longest-common-prefix/solutions/288575/zui-chang-gong-gong-qian-zhui-by-leetcode-solution/\">力扣官方解题</a></p>\n","site":{"data":{}},"cover_type":"img","excerpt":"","more":"<h1 id=\"简单难度\"><a href=\"#简单难度\" class=\"headerlink\" title=\"简单难度\"></a>简单难度</h1><h2 id=\"回文数\"><a href=\"#回文数\" class=\"headerlink\" title=\"回文数\"></a>回文数</h2><p><a href=\"https://leetcode.cn/problems/palindrome-number/description/\">回文数 - 力扣</a></p>\n<p>给你一个整数 <code>x</code> ，如果 <code>x</code> 是一个回文整数，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>\n<p>回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p>\n<blockquote>\n<p><strong>示例 1：</strong><br><strong>输入：</strong> x = 121<br><strong>输出：</strong> true</p>\n</blockquote>\n<h3 id=\"我的思路\"><a href=\"#我的思路\" class=\"headerlink\" title=\"我的思路\"></a>我的思路</h3><p> 求出数据是几位数，利用整除求出每一位的数字，把首位放到末尾…最后比较是否相等，表现十分差</p>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isPalindrome</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">long</span> tempx = x;</span><br><span class=\"line\">    <span class=\"type\">int</span> newx = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> Place = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">double</span> temp0 = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">do</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Place =(<span class=\"type\">int</span>)(x / (temp0 * <span class=\"number\">10</span>));</span><br><span class=\"line\">        temp0 *= <span class=\"number\">10</span>;</span><br><span class=\"line\">        count += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (Place != <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">long</span> j = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = count<span class=\"number\">-1</span>; i &gt;= <span class=\"number\">0</span>; i--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> temp = tempx / <span class=\"built_in\">pow</span>(<span class=\"number\">10</span>,i);</span><br><span class=\"line\">        tempx -= temp * <span class=\"built_in\">pow</span>(<span class=\"number\">10</span>, i);</span><br><span class=\"line\">        newx += temp * j;</span><br><span class=\"line\">        j *= <span class=\"number\">10</span>;</span><br><span class=\"line\">        std::cout &lt;&lt; (<span class=\"string\">&quot;%d&quot;</span>, newx) &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newx == x)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"其他思路\"><a href=\"#其他思路\" class=\"headerlink\" title=\"其他思路\"></a>其他思路</h3><h4 id=\"反转一半数字\"><a href=\"#反转一半数字\" class=\"headerlink\" title=\"反转一半数字\"></a>反转一半数字</h4><p>映入脑海的第一个想法是将数字转换为字符串，并检查字符串是否为回文。但是，这需要额外的非常量空间来创建问题描述中所不允许的字符串。</p>\n<p>第二个想法是将数字本身反转，然后将反转后的数字与原始数字进行比较，如果它们是相同的，那么这个数字就是回文。 但是，如果反转后的数字大于<code>int.MAX</code>，我们将遇到整数溢出问题。</p>\n<p>按照第二个想法，为了避免数字反转可能导致的溢出问题，为什么不考虑只反转<code> int</code>数字的一半？毕竟，如果该数字是回文，其后半部分反转后应该与原始数字的前半部分相同。</p>\n<p>例如，输入 1221，我们可以将数字 “1221” 的后半部分从 “21” 反转为 “12”，并将其与前半部分 “12” 进行比较，因为二者相同，我们得知数字 1221 是回文。</p>\n<h5 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h5><p>首先，我们应该处理一些临界情况。所有负数都不可能是回文，例如：-123 不是回文，因为 - 不等于 3。所以我们可以对所有负数返回 false。除了 0 以外，所有个位是 0 的数字不可能是回文，因为最高位不等于 0。所以我们可以对所有大于 0 且个位是 0 的数字返回 false。</p>\n<p>现在，让我们来考虑如何反转后半部分的数字。</p>\n<p>对于数字 1221，如果执行 1221 % 10，我们将得到最后一位数字 1，要得到倒数第二位数字，我们可以先通过除以 10 把最后一位数字从 1221 中移除，1221 / 10 = 122，再求出上一步结果除以 10 的余数，122 % 10 = 2，就可以得到倒数第二位数字。如果我们把最后一位数字乘以 10，再加上倒数第二位数字，1 * 10 + 2 = 12，就得到了我们想要的反转后的数字。如果继续这个过程，我们将得到更多位数的反转数字。</p>\n<p>现在的问题是，我们如何知道反转数字的位数已经达到原始数字位数的一半？</p>\n<p>由于整个过程我们不断将原始数字除以 10，然后给反转后的数字乘上 10，所以，当原始数字小于或等于反转后的数字时，就意味着我们已经处理了一半位数的数字了。</p>\n<h5 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h5><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isPalindrome</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 特殊情况：</span></span><br><span class=\"line\">        <span class=\"comment\">// 如上所述，当 x &lt; 0 时，x 不是回文数。</span></span><br><span class=\"line\">        <span class=\"comment\">// 同样地，如果数的最后一位是 0，为了使该数字为回文，</span></span><br><span class=\"line\">        <span class=\"comment\">// 则其第一位数字也应该是 0</span></span><br><span class=\"line\">        <span class=\"comment\">// 只有 0 满足这一属性</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span> || (x % <span class=\"number\">10</span> == <span class=\"number\">0</span> &amp;&amp; x != <span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> revertedNumber = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (x &gt; revertedNumber) &#123;</span><br><span class=\"line\">            revertedNumber = revertedNumber * <span class=\"number\">10</span> + x % <span class=\"number\">10</span>;</span><br><span class=\"line\">            x /= <span class=\"number\">10</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 当数字长度为奇数时，我们可以通过 revertedNumber/10 去除处于中位的数字。</span></span><br><span class=\"line\">        <span class=\"comment\">// 例如，当输入为 12321 时，在 while 循环的末尾我们可以得到 x = 12，revertedNumber = 123，</span></span><br><span class=\"line\">        <span class=\"comment\">// 由于处于中位的数字不影响回文（它总是与自己相等），所以我们可以简单地将其去除。</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> x == revertedNumber || x == revertedNumber / <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"罗马数字转整\"><a href=\"#罗马数字转整\" class=\"headerlink\" title=\"罗马数字转整\"></a>罗马数字转整</h2><p><a href=\"https://leetcode.cn/problems/roman-to-integer/description/\">罗马数字转整数 - 力扣</a></p>\n<p>罗马数字包含以下七种字符: <code>I</code>， <code>V</code>， <code>X</code>， <code>L</code>，<code>C</code>，<code>D</code> 和 <code>M</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**字符** **数值**</span><br><span class=\"line\">I 1</span><br><span class=\"line\">V 5</span><br><span class=\"line\">X 10</span><br><span class=\"line\">L 50</span><br><span class=\"line\">C 100</span><br><span class=\"line\">D 500</span><br><span class=\"line\">M 1000</span><br></pre></td></tr></table></figure>\n\n<p>例如， 罗马数字 <code>2</code> 写做 <code>II</code> ，即为两个并列的 1 。<code>12</code> 写做 <code>XII</code> ，即为 <code>X</code> + <code>II</code> 。 <code>27</code> 写做  <code>XXVII</code>, 即为 <code>XX</code> + <code>V</code> + <code>II</code> 。</p>\n<p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 <code>IIII</code>，而是 <code>IV</code>。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 <code>IX</code>。这个特殊的规则只适用于以下六种情况：</p>\n<ul>\n<li><code>I</code> 可以放在 <code>V</code> (5) 和 <code>X</code> (10) 的左边，来表示 4 和 9。</li>\n<li><code>X</code> 可以放在 <code>L</code> (50) 和 <code>C</code> (100) 的左边，来表示 40 和 90。 </li>\n<li><code>C</code> 可以放在 <code>D</code> (500) 和 <code>M</code> (1000) 的左边，来表示 400 和 900。</li>\n</ul>\n<p><strong>给定一个罗马数字，将其转换成整数。</strong></p>\n<h3 id=\"我的思路-1\"><a href=\"#我的思路-1\" class=\"headerlink\" title=\"我的思路\"></a>我的思路</h3><p>比较字符与其后面的那一个字符的大小，如果比后面的大则加，比后面的小则减</p>\n<h4 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">private</span>:</span><br><span class=\"line\">    std::unordered_map&lt;<span class=\"type\">char</span>, <span class=\"type\">int</span>&gt; symbolValues = &#123;</span><br><span class=\"line\">        &#123;<span class=\"string\">&#x27;I&#x27;</span>, <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&#x27;V&#x27;</span>, <span class=\"number\">5</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&#x27;X&#x27;</span>, <span class=\"number\">10</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&#x27;L&#x27;</span>,<span class=\"number\">50</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&#x27;C&#x27;</span>, <span class=\"number\">100</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&#x27;D&#x27;</span>, <span class=\"number\">500</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"string\">&#x27;M&#x27;</span>, <span class=\"number\">1000</span>&#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">romanToInt</span><span class=\"params\">(string s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> n = s.<span class=\"built_in\">length</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n ; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == n - <span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ans += symbolValues[s[i]];</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (symbolValues[s[i]] &gt;= symbolValues[s[i + <span class=\"number\">1</span>]])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ans += symbolValues[s[i]];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ans -= symbolValues[s[i]];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"其他思路-1\"><a href=\"#其他思路-1\" class=\"headerlink\" title=\"其他思路\"></a>其他思路</h3><p><a href=\"https://leetcode.cn/problems/roman-to-integer/solutions/774992/luo-ma-shu-zi-zhuan-zheng-shu-by-leetcod-w55p/\">力扣官方解题</a></p>\n<h2 id=\"最长公共前缀\"><a href=\"#最长公共前缀\" class=\"headerlink\" title=\"最长公共前缀\"></a>最长公共前缀</h2><p><a href=\"https://leetcode.cn/problems/longest-common-prefix/description/\">14. 最长公共前缀 - 力扣（Leetcode）</a></p>\n<p>编写一个函数来查找字符串数组中的最长公共前缀。</p>\n<p>如果不存在公共前缀，返回空字符串 <code>&quot;&quot;</code>。</p>\n<p><strong>示例 1：</strong></p>\n<blockquote>\n<p><strong>输入:</strong> strs = [“flower”,”flow”,”flight”]</p>\n<p><strong>输出:</strong> “fl”</p>\n</blockquote>\n<h3 id=\"我的思路-2\"><a href=\"#我的思路-2\" class=\"headerlink\" title=\"我的思路\"></a>我的思路</h3><p>这题非常简单，遍历一个字符串的所有字符的过程中判断其他的字符串是否也有这个字符或者是否达到了其他字符串的最大长度，如果所有其他字符都有这个字符则把此字符加到结果中，否则直接返回结果</p>\n<h4 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">std::string <span class=\"title\">LeetCode::longestCommonPrefix</span><span class=\"params\">(std::vector&lt;std::string&gt; &amp;strs)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    std::string result = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; strs[<span class=\"number\">0</span>].<span class=\"built_in\">length</span>(); i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> common = strs[<span class=\"number\">0</span>][i];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt; strs.<span class=\"built_in\">size</span>(); j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(strs[j][i]!=common||i&gt;strs[j].<span class=\"built_in\">length</span>())</span><br><span class=\"line\">                <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        result.<span class=\"built_in\">push_back</span>(common);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"其他思路-2\"><a href=\"#其他思路-2\" class=\"headerlink\" title=\"其他思路\"></a>其他思路</h3><p><a href=\"https://leetcode.cn/problems/longest-common-prefix/solutions/288575/zui-chang-gong-gong-qian-zhui-by-leetcode-solution/\">力扣官方解题</a></p>\n"},{"title":"冷战历史","date":"2023-02-24T16:19:15.000Z","_content":"\n<img title=\"\" src=\"videos/b4c79bb4937a8fe3e059d09f307c0293b448d348.jpg\" alt=\"\" data-align=\"center\">\n\n<!-- more -->\n\n我的第一篇博客慢慢更新冷战历史\n\n* 冷战的起源\n  \n  * 斯大林与1943年共产国际的解体\n    \n    &nbsp;&nbsp;1943年5月，作为世界革命大本营的共产国际（第三国际）突然宣布解散，这是国际共产主义运动历史上一件具有标志性的事件。就组织形式而言，第三国际是一个共产党世界性的统一机构，各国党只是它的一个支部。共产国际解散后，各国共产党都独立了。虽然到中苏分裂之前，国际共运还是以莫斯科为中心继续存在，但是其组织形式和活动方式发生了根本性改变——共产党情报局只是欧洲九国共产党的协调和指挥机构，而苏共二十大以后各国共产党都是通过召开会议来统一他们的政策和行动。就斗争任务而言，共产国际在理论和逻辑上始终以发动世界革命为己任，而在共产党情报局那里，所谓世界革命战略充其量只是莫斯科动员各国人民支持和援助苏联的口号，苏共二十大则明确提出了“和平共处”的外交路线。\n\n**冷战热斗背景演讲**\n\n<div style=\"position: relative; width: 100%; height: 0; padding-bottom: 75%;\"><iframe \nsrc=\"//player.bilibili.com/player.html?aid=427826505&bvid=BV1YG411s7L1&cid=756709475&page=1\" scrolling=\"no\" border=\"0\" \nframeborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"position: absolute; width: 100%; \nheight: 100%; left: 0; top: 0;\"> </iframe></div>\n","source":"_posts/videos.md","raw":"---\ntitle: 冷战历史\ndate: 2023-2-25 00:19:15\ntags: ['冷战','历史','美国','苏联']\n\n---\n\n<img title=\"\" src=\"videos/b4c79bb4937a8fe3e059d09f307c0293b448d348.jpg\" alt=\"\" data-align=\"center\">\n\n<!-- more -->\n\n我的第一篇博客慢慢更新冷战历史\n\n* 冷战的起源\n  \n  * 斯大林与1943年共产国际的解体\n    \n    &nbsp;&nbsp;1943年5月，作为世界革命大本营的共产国际（第三国际）突然宣布解散，这是国际共产主义运动历史上一件具有标志性的事件。就组织形式而言，第三国际是一个共产党世界性的统一机构，各国党只是它的一个支部。共产国际解散后，各国共产党都独立了。虽然到中苏分裂之前，国际共运还是以莫斯科为中心继续存在，但是其组织形式和活动方式发生了根本性改变——共产党情报局只是欧洲九国共产党的协调和指挥机构，而苏共二十大以后各国共产党都是通过召开会议来统一他们的政策和行动。就斗争任务而言，共产国际在理论和逻辑上始终以发动世界革命为己任，而在共产党情报局那里，所谓世界革命战略充其量只是莫斯科动员各国人民支持和援助苏联的口号，苏共二十大则明确提出了“和平共处”的外交路线。\n\n**冷战热斗背景演讲**\n\n<div style=\"position: relative; width: 100%; height: 0; padding-bottom: 75%;\"><iframe \nsrc=\"//player.bilibili.com/player.html?aid=427826505&bvid=BV1YG411s7L1&cid=756709475&page=1\" scrolling=\"no\" border=\"0\" \nframeborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"position: absolute; width: 100%; \nheight: 100%; left: 0; top: 0;\"> </iframe></div>\n","slug":"videos","published":1,"updated":"2023-04-05T14:51:26.166Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgc9df2l000d3cu44rekguzy","content":"<img title src=\"/2023/02/25/videos/b4c79bb4937a8fe3e059d09f307c0293b448d348.jpg\" alt data-align=\"center\">\n\n<span id=\"more\"></span>\n\n<p>我的第一篇博客慢慢更新冷战历史</p>\n<ul>\n<li>冷战的起源<ul>\n<li>斯大林与1943年共产国际的解体&nbsp;&nbsp;1943年5月，作为世界革命大本营的共产国际（第三国际）突然宣布解散，这是国际共产主义运动历史上一件具有标志性的事件。就组织形式而言，第三国际是一个共产党世界性的统一机构，各国党只是它的一个支部。共产国际解散后，各国共产党都独立了。虽然到中苏分裂之前，国际共运还是以莫斯科为中心继续存在，但是其组织形式和活动方式发生了根本性改变——共产党情报局只是欧洲九国共产党的协调和指挥机构，而苏共二十大以后各国共产党都是通过召开会议来统一他们的政策和行动。就斗争任务而言，共产国际在理论和逻辑上始终以发动世界革命为己任，而在共产党情报局那里，所谓世界革命战略充其量只是莫斯科动员各国人民支持和援助苏联的口号，苏共二十大则明确提出了“和平共处”的外交路线。</li>\n</ul>\n</li>\n</ul>\n<p><strong>冷战热斗背景演讲</strong></p>\n<div style=\"position: relative; width: 100%; height: 0; padding-bottom: 75%;\"><iframe src=\"//player.bilibili.com/player.html?aid=427826505&bvid=BV1YG411s7L1&cid=756709475&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"position: absolute; width: 100%; \nheight: 100%; left: 0; top: 0;\"> </iframe></div>\n","site":{"data":{}},"cover":false,"excerpt":"<img title src=\"/2023/02/25/videos/b4c79bb4937a8fe3e059d09f307c0293b448d348.jpg\" alt data-align=\"center\">","more":"<p>我的第一篇博客慢慢更新冷战历史</p>\n<ul>\n<li>冷战的起源<ul>\n<li>斯大林与1943年共产国际的解体&nbsp;&nbsp;1943年5月，作为世界革命大本营的共产国际（第三国际）突然宣布解散，这是国际共产主义运动历史上一件具有标志性的事件。就组织形式而言，第三国际是一个共产党世界性的统一机构，各国党只是它的一个支部。共产国际解散后，各国共产党都独立了。虽然到中苏分裂之前，国际共运还是以莫斯科为中心继续存在，但是其组织形式和活动方式发生了根本性改变——共产党情报局只是欧洲九国共产党的协调和指挥机构，而苏共二十大以后各国共产党都是通过召开会议来统一他们的政策和行动。就斗争任务而言，共产国际在理论和逻辑上始终以发动世界革命为己任，而在共产党情报局那里，所谓世界革命战略充其量只是莫斯科动员各国人民支持和援助苏联的口号，苏共二十大则明确提出了“和平共处”的外交路线。</li>\n</ul>\n</li>\n</ul>\n<p><strong>冷战热斗背景演讲</strong></p>\n<div style=\"position: relative; width: 100%; height: 0; padding-bottom: 75%;\"><iframe src=\"//player.bilibili.com/player.html?aid=427826505&bvid=BV1YG411s7L1&cid=756709475&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"position: absolute; width: 100%; \nheight: 100%; left: 0; top: 0;\"> </iframe></div>"}],"PostAsset":[{"_id":"source/_posts/ET框架TulipBubble实现逻辑/2023-03-23-21-05-52-image.png","slug":"2023-03-23-21-05-52-image.png","post":"clgc9df2d00033cu4bdnt29wb","modified":0,"renderable":0},{"_id":"source/_posts/ET框架初步理解/4a45803c69ed8b7283f933aa6e1748973976ef4c.png","slug":"4a45803c69ed8b7283f933aa6e1748973976ef4c.png","post":"clgc9df2i00073cu48dhmgvol","modified":0,"renderable":0},{"_id":"source/_posts/ET框架初步理解/6e285ffc782c8443b1070964510e9530573f6c2d.png","slug":"6e285ffc782c8443b1070964510e9530573f6c2d.png","post":"clgc9df2i00073cu48dhmgvol","modified":0,"renderable":0},{"_id":"source/_posts/ET框架初步理解/7845ce3fdee147fca9d5c7fe4d86a890b717ecfe.png","slug":"7845ce3fdee147fca9d5c7fe4d86a890b717ecfe.png","post":"clgc9df2i00073cu48dhmgvol","modified":0,"renderable":0},{"_id":"source/_posts/ET框架初步理解/BackConfig.png","slug":"BackConfig.png","post":"clgc9df2i00073cu48dhmgvol","modified":0,"renderable":0},{"_id":"source/_posts/ET框架初步理解/BackEnd.png","slug":"BackEnd.png","post":"clgc9df2i00073cu48dhmgvol","modified":0,"renderable":0},{"_id":"source/_posts/ET框架初步理解/front.png","slug":"front.png","post":"clgc9df2i00073cu48dhmgvol","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/089c68368fd64dc9463fcbb493992b46998e45ad.png","slug":"089c68368fd64dc9463fcbb493992b46998e45ad.png","post":"clgc9df2h00063cu487gaa557","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/10.png","slug":"10.png","post":"clgc9df2h00063cu487gaa557","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/13.png","slug":"13.png","post":"clgc9df2h00063cu487gaa557","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/14.png","slug":"14.png","post":"clgc9df2h00063cu487gaa557","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/15.png","slug":"15.png","post":"clgc9df2h00063cu487gaa557","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/265bf46b38778fb7476094dda85d00debb635e85.png","slug":"265bf46b38778fb7476094dda85d00debb635e85.png","post":"clgc9df2h00063cu487gaa557","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/2ac963f71072ecd1cc7f56f9153107153b737a36.png","slug":"2ac963f71072ecd1cc7f56f9153107153b737a36.png","post":"clgc9df2h00063cu487gaa557","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/3aa70b0531dc3e2625c09c1ef8eac0078a29f54e.png","slug":"3aa70b0531dc3e2625c09c1ef8eac0078a29f54e.png","post":"clgc9df2h00063cu487gaa557","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/51204e17ea43f7a1992ea9abbf9ecb48768694fa.png","slug":"51204e17ea43f7a1992ea9abbf9ecb48768694fa.png","post":"clgc9df2h00063cu487gaa557","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/578439ae227066f02d1319f645f09b0567c46bd6.png","slug":"578439ae227066f02d1319f645f09b0567c46bd6.png","post":"clgc9df2h00063cu487gaa557","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/5a1f2bfbce2c6557b2d3442934c0a92b8a606944.png","slug":"5a1f2bfbce2c6557b2d3442934c0a92b8a606944.png","post":"clgc9df2h00063cu487gaa557","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/5ea18123f9a50a08ca1fd5562c479b4aa184a2e4.png","slug":"5ea18123f9a50a08ca1fd5562c479b4aa184a2e4.png","post":"clgc9df2h00063cu487gaa557","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/62a3a7a6fbde2da426ced06d782dbd6ee43fb5c4.png","slug":"62a3a7a6fbde2da426ced06d782dbd6ee43fb5c4.png","post":"clgc9df2h00063cu487gaa557","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/69a4adad5fa74c60aa7fdd3ac358f9bb718b3b4b.png","slug":"69a4adad5fa74c60aa7fdd3ac358f9bb718b3b4b.png","post":"clgc9df2h00063cu487gaa557","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/6aa5405ba7ffbe9c8760c5891854c1041e688d10.png","slug":"6aa5405ba7ffbe9c8760c5891854c1041e688d10.png","post":"clgc9df2h00063cu487gaa557","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/7e1e6ca628c6bcc92afce94e8ce7a0cd9a491ac1.png","slug":"7e1e6ca628c6bcc92afce94e8ce7a0cd9a491ac1.png","post":"clgc9df2h00063cu487gaa557","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/86324066a24e3eb32af8305f91c0a064582ae9d5.png","slug":"86324066a24e3eb32af8305f91c0a064582ae9d5.png","post":"clgc9df2h00063cu487gaa557","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/c81d9e95a6974e43bb3d62b5ce7029b0c535f29d.png","slug":"c81d9e95a6974e43bb3d62b5ce7029b0c535f29d.png","post":"clgc9df2h00063cu487gaa557","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/c96a2283efc6cc31030410ff42e59ac41209443a.png","slug":"c96a2283efc6cc31030410ff42e59ac41209443a.png","post":"clgc9df2h00063cu487gaa557","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/dfd1bcd4b5e9efbe1d7e8d52c289e292c4bd2b04.png","slug":"dfd1bcd4b5e9efbe1d7e8d52c289e292c4bd2b04.png","post":"clgc9df2h00063cu487gaa557","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/fc261c3347d67a16ae3d5eef1b72182071954565.png","slug":"fc261c3347d67a16ae3d5eef1b72182071954565.png","post":"clgc9df2h00063cu487gaa557","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/git.png","slug":"git.png","post":"clgc9df2h00063cu487gaa557","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/git01.png","slug":"git01.png","post":"clgc9df2h00063cu487gaa557","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/practice00.png","slug":"practice00.png","post":"clgc9df2h00063cu487gaa557","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/practice01.png","slug":"practice01.png","post":"clgc9df2h00063cu487gaa557","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/practice02.png","slug":"practice02.png","post":"clgc9df2h00063cu487gaa557","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/practice03.png","slug":"practice03.png","post":"clgc9df2h00063cu487gaa557","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/practice04.png","slug":"practice04.png","post":"clgc9df2h00063cu487gaa557","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/practice05.png","slug":"practice05.png","post":"clgc9df2h00063cu487gaa557","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/practice06.png","slug":"practice06.png","post":"clgc9df2h00063cu487gaa557","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/practice07.png","slug":"practice07.png","post":"clgc9df2h00063cu487gaa557","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/practice08.png","slug":"practice08.png","post":"clgc9df2h00063cu487gaa557","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/practice09.png","slug":"practice09.png","post":"clgc9df2h00063cu487gaa557","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/practice11.png","slug":"practice11.png","post":"clgc9df2h00063cu487gaa557","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/practice12.png","slug":"practice12.png","post":"clgc9df2h00063cu487gaa557","modified":0,"renderable":0},{"_id":"source/_posts/SingleChip/08a01404c19e5459d57c8e384f5eaf22869a43eb.png","slug":"08a01404c19e5459d57c8e384f5eaf22869a43eb.png","post":"clgc9df2i00083cu49y755hyl","modified":0,"renderable":0},{"_id":"source/_posts/SingleChip/2023-04-02-02-04-46-image.png","slug":"2023-04-02-02-04-46-image.png","post":"clgc9df2i00083cu49y755hyl","modified":0,"renderable":0},{"_id":"source/_posts/SingleChip/2023-04-02-02-04-59-image.png","slug":"2023-04-02-02-04-59-image.png","post":"clgc9df2i00083cu49y755hyl","modified":0,"renderable":0},{"_id":"source/_posts/SingleChip/2023-04-02-02-05-40-image.png","slug":"2023-04-02-02-05-40-image.png","post":"clgc9df2i00083cu49y755hyl","modified":0,"renderable":0},{"_id":"source/_posts/SingleChip/2023-04-07-15-48-18-Screenshot from 2023-04-07 15-47-51.png","slug":"2023-04-07-15-48-18-Screenshot from 2023-04-07 15-47-51.png","post":"clgc9df2i00083cu49y755hyl","modified":0,"renderable":0},{"_id":"source/_posts/SingleChip/2023-04-07-16-44-34-Screenshot from 2023-04-07 15-47-51.png","slug":"2023-04-07-16-44-34-Screenshot from 2023-04-07 15-47-51.png","post":"clgc9df2i00083cu49y755hyl","modified":0,"renderable":0},{"_id":"source/_posts/SingleChip/2023-04-07-17-11-07-Screenshot from 2023-04-07 17-10-50.png","slug":"2023-04-07-17-11-07-Screenshot from 2023-04-07 17-10-50.png","post":"clgc9df2i00083cu49y755hyl","modified":0,"renderable":0},{"_id":"source/_posts/SingleChip/426941f16f054370a2e48c0b9334b919349fd85a.png","slug":"426941f16f054370a2e48c0b9334b919349fd85a.png","post":"clgc9df2i00083cu49y755hyl","modified":0,"renderable":0},{"_id":"source/_posts/SingleChip/4c9eeaf452c81e4203aab3ab35f203b530e08202.png","slug":"4c9eeaf452c81e4203aab3ab35f203b530e08202.png","post":"clgc9df2i00083cu49y755hyl","modified":0,"renderable":0},{"_id":"source/_posts/SingleChip/53dd30183091b0bb68dfbdb15031cc2dfa2e0306.png","slug":"53dd30183091b0bb68dfbdb15031cc2dfa2e0306.png","post":"clgc9df2i00083cu49y755hyl","modified":0,"renderable":0},{"_id":"source/_posts/SingleChip/54c588817fcd205435a974f1d8077220d5485bf4.png","slug":"54c588817fcd205435a974f1d8077220d5485bf4.png","post":"clgc9df2i00083cu49y755hyl","modified":0,"renderable":0},{"_id":"source/_posts/SingleChip/57037c8bea42c86053227fe549874b419653b56c.png","slug":"57037c8bea42c86053227fe549874b419653b56c.png","post":"clgc9df2i00083cu49y755hyl","modified":0,"renderable":0},{"_id":"source/_posts/SingleChip/5dd629b107312e0c0f858dd937af777ac3045bcd.png","slug":"5dd629b107312e0c0f858dd937af777ac3045bcd.png","post":"clgc9df2i00083cu49y755hyl","modified":0,"renderable":0},{"_id":"source/_posts/SingleChip/62d506ea99c99e2d95a5c5d0b00410291b1a7de4.png","slug":"62d506ea99c99e2d95a5c5d0b00410291b1a7de4.png","post":"clgc9df2i00083cu49y755hyl","modified":0,"renderable":0},{"_id":"source/_posts/SingleChip/ba71358b9ca3c9a533af1de889672b443827b2b5.png","slug":"ba71358b9ca3c9a533af1de889672b443827b2b5.png","post":"clgc9df2i00083cu49y755hyl","modified":0,"renderable":0},{"_id":"source/_posts/SingleChip/d5a14db6ef5b8ee6e4e4628c1290b38445a7835e.png","slug":"d5a14db6ef5b8ee6e4e4628c1290b38445a7835e.png","post":"clgc9df2i00083cu49y755hyl","modified":0,"renderable":0},{"_id":"source/_posts/Ubuntu-Nodejs/1b20eb77d85e7959657003b7b219a44065b0876d.png","slug":"1b20eb77d85e7959657003b7b219a44065b0876d.png","post":"clgc9df2j000a3cu43xxvasm1","modified":0,"renderable":0},{"_id":"source/_posts/Ubuntu-Nodejs/2023-04-07-15-31-01-Screenshot from 2023-04-07 15-30-53.png","slug":"2023-04-07-15-31-01-Screenshot from 2023-04-07 15-30-53.png","post":"clgc9df2j000a3cu43xxvasm1","modified":0,"renderable":0},{"_id":"source/_posts/Ubuntu-Nodejs/2023-04-07-15-36-35-Screenshot from 2023-04-07 15-36-21.png","slug":"2023-04-07-15-36-35-Screenshot from 2023-04-07 15-36-21.png","post":"clgc9df2j000a3cu43xxvasm1","modified":0,"renderable":0},{"_id":"source/_posts/videos/b4c79bb4937a8fe3e059d09f307c0293b448d348.jpg","slug":"b4c79bb4937a8fe3e059d09f307c0293b448d348.jpg","post":"clgc9df2l000d3cu44rekguzy","modified":0,"renderable":0},{"_id":"source/_posts/videos/CodWar.jpg","slug":"CodWar.jpg","post":"clgc9df2l000d3cu44rekguzy","modified":0,"renderable":0}],"PostCategory":[{"post_id":"clgc9df2a00013cu4c9lg5v4i","category_id":"clgc9df2f00043cu47ud68szf","_id":"clgc9df2k000c3cu491pg8l24"},{"post_id":"clgc9df2k000b3cu4gaxl77gk","category_id":"clgc9df2f00043cu47ud68szf","_id":"clgc9df2m000h3cu4cscc7zig"}],"PostTag":[{"post_id":"clgc9df2a00013cu4c9lg5v4i","tag_id":"clgc9df2g00053cu4duiu1gg3","_id":"clgc9df2l000e3cu46fl66d0b"},{"post_id":"clgc9df2a00013cu4c9lg5v4i","tag_id":"clgc9df2j00093cu451jk843r","_id":"clgc9df2m000g3cu471kd8je9"},{"post_id":"clgc9df2k000b3cu4gaxl77gk","tag_id":"clgc9df2l000f3cu42sw88r9i","_id":"clgc9df2m000j3cu4bbwmerqa"},{"post_id":"clgc9df2l000d3cu44rekguzy","tag_id":"clgc9df2m000i3cu4hy7e4a70","_id":"clgc9df2n000n3cu4hgyw2if0"},{"post_id":"clgc9df2l000d3cu44rekguzy","tag_id":"clgc9df2m000k3cu44kmi5jxv","_id":"clgc9df2n000o3cu4coal485r"},{"post_id":"clgc9df2l000d3cu44rekguzy","tag_id":"clgc9df2m000l3cu4d6zlh3k0","_id":"clgc9df2n000p3cu4d6udfsui"},{"post_id":"clgc9df2l000d3cu44rekguzy","tag_id":"clgc9df2n000m3cu44exn8ybr","_id":"clgc9df2n000q3cu401t74alx"},{"post_id":"clgc9df2i00083cu49y755hyl","tag_id":"clgdx9wzn0000c4u42d4phrxg","_id":"clgdx9wzq0001c4u4c5tjbvzc"}],"Tag":[{"name":"C#","_id":"clgc9df2g00053cu4duiu1gg3"},{"name":"异步编程","_id":"clgc9df2j00093cu451jk843r"},{"name":"算法","_id":"clgc9df2l000f3cu42sw88r9i"},{"name":"冷战","_id":"clgc9df2m000i3cu4hy7e4a70"},{"name":"历史","_id":"clgc9df2m000k3cu44kmi5jxv"},{"name":"美国","_id":"clgc9df2m000l3cu4d6zlh3k0"},{"name":"苏联","_id":"clgc9df2n000m3cu44exn8ybr"},{"name":"学习","_id":"clgdx9wzn0000c4u42d4phrxg"}]}}