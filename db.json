{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/css/noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.ico","path":"images/favicon-16x16-next.ico","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.ico","path":"images/favicon-32x32-next.ico","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/matomo.js","path":"js/third-party/analytics/matomo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/gitter.js","path":"js/third-party/chat/gitter.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/ET框架初步理解.md","hash":"279391453c56e90b78b4d738960667faece99513","modified":1679577995998},{"_id":"source/_posts/ET框架TulipBubble实现逻辑.md","hash":"131b2a6f37f92c70fb507557839b11e310f62c90","modified":1679578004861},{"_id":"source/_posts/Github使用.md","hash":"8ab2ff89fff59e3e00c95add787438327d1e59c7","modified":1679572799620},{"_id":"source/tags/index.md","hash":"24db9f7590579fd8ba2f4e578f1e8f6970ad7c5b","modified":1679143719008},{"_id":"source/_posts/videos.md","hash":"1cf381b68faa66be03d09ffb274a087bc2cbbfec","modified":1679572545388},{"_id":"source/_posts/ET框架TulipBubble实现逻辑/2023-03-23-21-05-52-image.png","hash":"bde4ff7002cd030fa1102020239644bcb1173e63","modified":1679576752343},{"_id":"source/_posts/ET框架初步理解/4a45803c69ed8b7283f933aa6e1748973976ef4c.png","hash":"099947dcd47ccf15acd4bfb492893de18f6d44e3","modified":1679315608336},{"_id":"source/_posts/ET框架初步理解/6e285ffc782c8443b1070964510e9530573f6c2d.png","hash":"e69da7540315e68734be8a58acde9fe38b18705c","modified":1679316107361},{"_id":"source/_posts/ET框架初步理解/7845ce3fdee147fca9d5c7fe4d86a890b717ecfe.png","hash":"a3e70c29093723ed7e586ae84e722ba191e1cb41","modified":1679315850478},{"_id":"source/_posts/Github使用/089c68368fd64dc9463fcbb493992b46998e45ad.png","hash":"4d47c07f05640c03c28bbdb717d7a95bb5f24bb1","modified":1679375261901},{"_id":"source/_posts/ET框架初步理解/front.png","hash":"099947dcd47ccf15acd4bfb492893de18f6d44e3","modified":1679315608336},{"_id":"source/_posts/ET框架初步理解/BackEnd.png","hash":"a3e70c29093723ed7e586ae84e722ba191e1cb41","modified":1679315850478},{"_id":"source/_posts/ET框架初步理解/BackConfig.png","hash":"e69da7540315e68734be8a58acde9fe38b18705c","modified":1679316107361},{"_id":"source/_posts/Github使用/2ac963f71072ecd1cc7f56f9153107153b737a36.png","hash":"10bb4f3cb67e25f5b2519d76448c673b7747527d","modified":1679375216480},{"_id":"source/_posts/Github使用/3aa70b0531dc3e2625c09c1ef8eac0078a29f54e.png","hash":"75abf9f7efe0ee474d0411193e1198dc68f86fd3","modified":1679375114947},{"_id":"source/_posts/Github使用/15.png","hash":"2fbdb63fdcf5c2bdcbedff9dab6ab024fb7ee1c3","modified":1679376301427},{"_id":"source/_posts/Github使用/62a3a7a6fbde2da426ced06d782dbd6ee43fb5c4.png","hash":"6775f387bca276e70ff2514007ad175aaf9ebbc1","modified":1679375185827},{"_id":"source/_posts/Github使用/69a4adad5fa74c60aa7fdd3ac358f9bb718b3b4b.png","hash":"2fbdb63fdcf5c2bdcbedff9dab6ab024fb7ee1c3","modified":1679376301427},{"_id":"source/_posts/Github使用/14.png","hash":"7677a6db1891da89ab84e408979b0c7c424678c3","modified":1679376291145},{"_id":"source/_posts/Github使用/c81d9e95a6974e43bb3d62b5ce7029b0c535f29d.png","hash":"7677a6db1891da89ab84e408979b0c7c424678c3","modified":1679376291145},{"_id":"source/_posts/Github使用/dfd1bcd4b5e9efbe1d7e8d52c289e292c4bd2b04.png","hash":"5996a234a8b2c6e464289dccc762abe582f41ad4","modified":1679375277852},{"_id":"source/_posts/Github使用/c96a2283efc6cc31030410ff42e59ac41209443a.png","hash":"1b48b87d2eaea4bbea51fc48cf0343873ac0f6be","modified":1679375209955},{"_id":"source/_posts/Github使用/fc261c3347d67a16ae3d5eef1b72182071954565.png","hash":"95c5bc92ed845f1ebe8ec0b1ab0bafdfa2f11421","modified":1679041747308},{"_id":"source/_posts/Github使用/git.png","hash":"95c5bc92ed845f1ebe8ec0b1ab0bafdfa2f11421","modified":1679041747308},{"_id":"source/_posts/Github使用/practice00.png","hash":"75abf9f7efe0ee474d0411193e1198dc68f86fd3","modified":1679375114947},{"_id":"source/_posts/Github使用/practice04.png","hash":"6775f387bca276e70ff2514007ad175aaf9ebbc1","modified":1679375185827},{"_id":"source/_posts/Github使用/practice05.png","hash":"1b48b87d2eaea4bbea51fc48cf0343873ac0f6be","modified":1679375209955},{"_id":"source/_posts/Github使用/practice06.png","hash":"10bb4f3cb67e25f5b2519d76448c673b7747527d","modified":1679375216480},{"_id":"source/_posts/videos/b4c79bb4937a8fe3e059d09f307c0293b448d348.jpg","hash":"d8a2da35a9f9aeee81cec02721bc69e52a929fe5","modified":1679317586295},{"_id":"source/_posts/.idea/.idea._posts.dir/.idea/.gitignore","hash":"dc620c7e5fd72d6fee27376ca5375d3372b48544","modified":1679312699151},{"_id":"source/_posts/.idea/.idea._posts.dir/.idea/encodings.xml","hash":"87f8739b05f4041104c270b2999084fb96ec4da3","modified":1679312692115},{"_id":"source/_posts/.idea/.idea._posts.dir/.idea/indexLayout.xml","hash":"2b7e7e06b17b70c4e9365a46b16e2e4d5e60c055","modified":1679312729829},{"_id":"source/_posts/.idea/.idea._posts.dir/.idea/projectSettingsUpdater.xml","hash":"07432f8bd3756c287ae6e3555a697f9c725e1b08","modified":1679312729838},{"_id":"source/_posts/Github使用/practice11.png","hash":"4d47c07f05640c03c28bbdb717d7a95bb5f24bb1","modified":1679375261901},{"_id":"source/_posts/Github使用/practice12.png","hash":"5996a234a8b2c6e464289dccc762abe582f41ad4","modified":1679375277852},{"_id":"source/_posts/videos/CodWar.jpg","hash":"d8a2da35a9f9aeee81cec02721bc69e52a929fe5","modified":1679317586295},{"_id":"source/_posts/.idea/.idea._posts.dir/.idea/workspace.xml","hash":"3ed02351f34242ef3d4b5e301bbb2d672c67dbbc","modified":1679312828213},{"_id":"source/_posts/Github使用/265bf46b38778fb7476094dda85d00debb635e85.png","hash":"bfb25df7eec92350e8320d2bb12879e0192560dc","modified":1679375153676},{"_id":"source/_posts/Github使用/5ea18123f9a50a08ca1fd5562c479b4aa184a2e4.png","hash":"8d3132d4b3e9cb6d8403a26a224a63488e83df51","modified":1679375238350},{"_id":"source/_posts/Github使用/practice01.png","hash":"bfb25df7eec92350e8320d2bb12879e0192560dc","modified":1679375153676},{"_id":"source/_posts/Github使用/practice08.png","hash":"8d3132d4b3e9cb6d8403a26a224a63488e83df51","modified":1679375238350},{"_id":"source/_posts/Github使用/13.png","hash":"83c9405fddb316a574fed3b4c4e53f97cfae2434","modified":1679376278824},{"_id":"source/_posts/Github使用/51204e17ea43f7a1992ea9abbf9ecb48768694fa.png","hash":"d2e4845c696d32fa1b277633f3c51d96beb9bef8","modified":1679375223240},{"_id":"source/_posts/Github使用/578439ae227066f02d1319f645f09b0567c46bd6.png","hash":"dfdf31f250ed49d7bcbadc87543eebfa19ef70d5","modified":1679375177363},{"_id":"source/_posts/Github使用/5a1f2bfbce2c6557b2d3442934c0a92b8a606944.png","hash":"84a8316c92b9fb561f279cdd2c47e2993b73bd07","modified":1679375170156},{"_id":"source/_posts/Github使用/6aa5405ba7ffbe9c8760c5891854c1041e688d10.png","hash":"7f6a71fbc1baa1cda2ca035ba6c9869a5bfc2707","modified":1679375246565},{"_id":"source/_posts/Github使用/86324066a24e3eb32af8305f91c0a064582ae9d5.png","hash":"5a51c07bcd6d4ffc9d848b8255be5311f7c52336","modified":1679373365324},{"_id":"source/_posts/Github使用/git01.png","hash":"5a51c07bcd6d4ffc9d848b8255be5311f7c52336","modified":1679373365324},{"_id":"source/_posts/Github使用/practice02.png","hash":"84a8316c92b9fb561f279cdd2c47e2993b73bd07","modified":1679375170156},{"_id":"source/_posts/Github使用/practice03.png","hash":"dfdf31f250ed49d7bcbadc87543eebfa19ef70d5","modified":1679375177363},{"_id":"source/_posts/Github使用/practice07.png","hash":"d2e4845c696d32fa1b277633f3c51d96beb9bef8","modified":1679375223240},{"_id":"source/_posts/Github使用/practice09.png","hash":"7f6a71fbc1baa1cda2ca035ba6c9869a5bfc2707","modified":1679375246565},{"_id":"source/_posts/Github使用/10.png","hash":"571fa7d797a24a5fc7062744c82fadad88818d7b","modified":1679375254932},{"_id":"source/_posts/Github使用/7e1e6ca628c6bcc92afce94e8ce7a0cd9a491ac1.png","hash":"571fa7d797a24a5fc7062744c82fadad88818d7b","modified":1679375254932},{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1679135059923},{"_id":"themes/next/.eslintrc.json","hash":"611e15c3fcb41dc68fa8532ee595a1262a1b5a8a","modified":1679135059923},{"_id":"themes/next/.gitattributes","hash":"aeeca2f1e987d83232d7870d1435a4e3ed66b648","modified":1679135059923},{"_id":"themes/next/.gitignore","hash":"087b7677078303acb2acb47432165950e4d29b43","modified":1679135059929},{"_id":"themes/next/.stylelintrc","hash":"c6b473cc7337d35b278cd9d85855c60ee2fead3e","modified":1679135059929},{"_id":"themes/next/_config.yml","hash":"e6465eb4fecc5c75acd5513e9b6d068dbf49e17b","modified":1679221087580},{"_id":"themes/next/_vendors.yml","hash":"9f0128c829bff4e9935d5993cd3bde96cc7bef0e","modified":1679135059931},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1679135059931},{"_id":"themes/next/package.json","hash":"848d840614069063b40698b88a0ce1e711187e8a","modified":1679135059959},{"_id":"themes/next/renovate.json","hash":"767b077c7b615e20af3cf865813cd64674a9bea6","modified":1679135059959},{"_id":"themes/next/.githooks/install.js","hash":"72757c6827909a5f2c217ddbbdf6034ca6fab74a","modified":1679135059923},{"_id":"themes/next/.githooks/pre-commit","hash":"b69b9d0b51e27d5d4c87c3242f5067c2cda26e44","modified":1679135059923},{"_id":"themes/next/LICENSE.md","hash":"8cfb03967dd4cbaf3b825271ffce0039aa3fc22a","modified":1679135059930},{"_id":"themes/next/README.md","hash":"fe1761cb3eab07a1742296c5976c30f2346073b7","modified":1679135059930},{"_id":"themes/next/.github/config.yml","hash":"0956bf71b6f36632b63b14d26580458041a5abd2","modified":1679135059926},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"533fbe6b2f87d7e7ec6949063bb7ea7eb4fbe52d","modified":1679135059927},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"593ae64e72d43c020a697eac65b1f9c3483ff097","modified":1679135059924},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"2fdca1040427cabfe27cae6754ec5e027ec7092e","modified":1679135059924},{"_id":"themes/next/.github/labeler.yml","hash":"ff76a903609932a867082b8ccced906e9910533a","modified":1679135059927},{"_id":"themes/next/.github/release.yml","hash":"83b4dae3f8d76619e208d2110a247b3ccadd64d8","modified":1679135059927},{"_id":"themes/next/.github/label-commenter-config.yml","hash":"a1aa85a2fc66ff0c52c65bd97b0fa282e297a73f","modified":1679135059927},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"009b397b686bba7b63885da59d904144ff59b24e","modified":1679135059926},{"_id":"themes/next/languages/README.md","hash":"b1c96465b3bc139bf5ba6200974b66581d8ff85a","modified":1679135059934},{"_id":"themes/next/languages/ar.yml","hash":"a18fecc404177bd8f76bab82826f5931ec557069","modified":1679135059934},{"_id":"themes/next/languages/bn.yml","hash":"785c43cf417879240515435da64b98660f3deaaf","modified":1679135059934},{"_id":"themes/next/docs/AUTHORS.md","hash":"579014d47f45b27fd1618b9709f0efe9585c7449","modified":1679135059932},{"_id":"themes/next/languages/de.yml","hash":"0607d8973e74824321564714f92c8a6afcbbc6d5","modified":1679135059934},{"_id":"themes/next/docs/LICENSE.txt","hash":"d1cd5a8e83d3bbdb50f902d2b487813da95ddfd3","modified":1679135059932},{"_id":"themes/next/languages/es.yml","hash":"c52a4747f2d112f217a2d2cc9217d62aa62ff24f","modified":1679135059935},{"_id":"themes/next/languages/en.yml","hash":"03041988456463c08aae64415d4b3b7ec32c92d1","modified":1679135059935},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1679135059931},{"_id":"themes/next/languages/fr.yml","hash":"66443aef072a9e20cb053c8fee339377827c96f9","modified":1679135059935},{"_id":"themes/next/languages/default.yml","hash":"03041988456463c08aae64415d4b3b7ec32c92d1","modified":1679135059935},{"_id":"themes/next/languages/fa.yml","hash":"9e7b49b9017a3ffa62949f31c7ea3eecb8e547f5","modified":1679135059935},{"_id":"themes/next/languages/it.yml","hash":"56d4fe22fd7a30954e62b003ff95d5949765fbfb","modified":1679135059936},{"_id":"themes/next/languages/id.yml","hash":"5da84365f133d8afda5288554aa82c8d8ea1a9fd","modified":1679135059936},{"_id":"themes/next/languages/ja.yml","hash":"4944ad1e226f2a4f965fe409989b7506f9264e76","modified":1679135059936},{"_id":"themes/next/languages/ko.yml","hash":"05a78a32e4e7dd5903153231ba0d10dd73823ab9","modified":1679135059936},{"_id":"themes/next/languages/pt-BR.yml","hash":"6ff0fac38e3cfb2d79f64645d90a7e7f2f2764d3","modified":1679135059937},{"_id":"themes/next/languages/pt.yml","hash":"46b82ce46d3a09391a068dfa519b7a6baf04a775","modified":1679135059937},{"_id":"themes/next/languages/nl.yml","hash":"a27feeb08d8e6dc1439dd258b2ef6e65cfe4ca17","modified":1679135059937},{"_id":"themes/next/languages/si.yml","hash":"c608d89d85061a488eca222b99e5062f2fc6b681","modified":1679135059938},{"_id":"themes/next/languages/th.yml","hash":"14845e9fbd235c0ff70522992e6be97f0ef1a523","modified":1679135059938},{"_id":"themes/next/languages/ru.yml","hash":"ee381a6c2c8bd85580b03ab52cf5cb95dca4899b","modified":1679135059937},{"_id":"themes/next/languages/tr.yml","hash":"7625b7948a6bfc3ff8ae8d4d0470cdbae5e347be","modified":1679135059938},{"_id":"themes/next/languages/uk.yml","hash":"a3d58cf753057963e08a355528dd7ce68b57c9b5","modified":1679135059939},{"_id":"themes/next/languages/tk.yml","hash":"567e1bf608d94e212c7fff2eda1d1dbe6f5d5a58","modified":1679135059938},{"_id":"themes/next/languages/vi.yml","hash":"73f7e23b1869b3a00da106635711679e6743f1ec","modified":1679135059939},{"_id":"themes/next/languages/zh-CN.yml","hash":"b80d8b3de5b6d459ba607cb7133a62b4eca6382d","modified":1679135059939},{"_id":"themes/next/languages/zh-HK.yml","hash":"ff7fe965128f01d2c00bf68aef7a9fcfbf3a1174","modified":1679135059939},{"_id":"themes/next/languages/zh-TW.yml","hash":"4945d947d007987b6462fdb7b1a7fa996a58491d","modified":1679135059940},{"_id":"themes/next/layout/_layout.njk","hash":"0f2760cd7550ca30ffcc28e2dbd7f031a237b5a7","modified":1679135059940},{"_id":"themes/next/layout/archive.njk","hash":"aa491dba8f746e626c273a920effedf7d0b32170","modified":1679135059958},{"_id":"themes/next/layout/category.njk","hash":"82f541452cae76a94ee15cb8d8a888f44260a0fd","modified":1679135059958},{"_id":"themes/next/layout/index.njk","hash":"fa52c3049871e879980cb6abccdea3792ca4ce70","modified":1679135059958},{"_id":"themes/next/layout/page.njk","hash":"6d2f7e7cd9fe868e96765b82d17df49081379e27","modified":1679135059958},{"_id":"themes/next/layout/post.njk","hash":"6767de9702a07a2a4e16a8a6bc9c5919536c1e3f","modified":1679135059958},{"_id":"themes/next/layout/tag.njk","hash":"b6c017d30d08ddd30d66e9c6f3a71aa65d214eac","modified":1679135059959},{"_id":"themes/next/test/index.js","hash":"983a505399796b9d9e174ba46d89abbdde38f8ee","modified":1679135060007},{"_id":"themes/next/.github/ISSUE_TEMPLATE/config.yml","hash":"daeedc5da2ee74ac31cf71846b766ca6499e9fc6","modified":1679135059925},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.yml","hash":"3f19cbf0c2b2fee6bf3788870b842c9ccc1425ca","modified":1679135059925},{"_id":"themes/next/.github/workflows/label-commenter.yml","hash":"b87ffaf40820461159c891d0d41c87e00e312ff3","modified":1679135059928},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.yml","hash":"fbc3062cd4591c8329fab9db72803746f0d11920","modified":1679135059926},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.yml","hash":"10eca518b91a19984f6a5a912d41222042f61d63","modified":1679135059926},{"_id":"themes/next/.github/workflows/codeql.yml","hash":"1e4e4a7ea522b76d6fc5947ddd07260f9fecbcf4","modified":1679135059928},{"_id":"themes/next/.github/workflows/labeler.yml","hash":"bfea9b04e3ea7da31a2095277c4c23ae6bd14baa","modified":1679135059928},{"_id":"themes/next/.github/workflows/lock.yml","hash":"ea346568ab811fea4dacc69081af2d6177b5aafb","modified":1679135059929},{"_id":"themes/next/.github/workflows/linter.yml","hash":"74ecdd99cc20a8f5103579210353de33536aa45c","modified":1679135059928},{"_id":"themes/next/.github/workflows/pr-reminder.yml","hash":"7d9f270dda6b28688b68118d9001ceaa4991d965","modified":1679135059929},{"_id":"themes/next/.github/workflows/tester.yml","hash":"dda18899fe62652c633f60c300a93df18f58862f","modified":1679135059929},{"_id":"themes/next/docs/ru/README.md","hash":"caf25da442d08b3d0a4e4503c6f4d6b68b1ac2f2","modified":1679135059932},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7befb4325b107dd668d9eae3d7e86a34910ce3f2","modified":1679135059933},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"a09ceb82b45dd8b7da76c227f3d0bb7eebe7d5d1","modified":1679135059933},{"_id":"themes/next/layout/_macro/post-collapse.njk","hash":"d9d8e6d7a6a8c80009dd5334cc17fd3e4977a008","modified":1679135059940},{"_id":"themes/next/layout/_macro/post.njk","hash":"fefa9d5f56607dbcbfd9b8d57b3f32c07167d847","modified":1679135059941},{"_id":"themes/next/docs/zh-CN/README.md","hash":"5500b0c6db58bf2e93e8ace98ae8da65de7e8318","modified":1679135059933},{"_id":"themes/next/layout/_macro/sidebar.njk","hash":"b9fc0a6b02f0380de939d1ea2a7c7d2e6be9f462","modified":1679135059941},{"_id":"themes/next/layout/_partials/comments.njk","hash":"60f4620dd479da6d86d1d493440e9e2a28b6e132","modified":1679135059941},{"_id":"themes/next/layout/_partials/footer.njk","hash":"3c99c51cc6cfc74f1bdef8c953aa81d8a9ab48ac","modified":1679135059942},{"_id":"themes/next/layout/_partials/languages.njk","hash":"537026fc120adeef9148c98ebf074207e3810538","modified":1679135059944},{"_id":"themes/next/layout/_partials/pagination.njk","hash":"c55167bc0dbe7e104d4f4d782e98fcabc7e07a35","modified":1679135059945},{"_id":"themes/next/layout/_partials/widgets.njk","hash":"9471c4f3aeee101b9b9a8c2aae7d21ec7277574e","modified":1679135059948},{"_id":"themes/next/layout/_scripts/index.njk","hash":"4eb65641b47ea9b23ed2ddfd69b18f21d7d8f214","modified":1679135059948},{"_id":"themes/next/layout/_scripts/vendors.njk","hash":"0a1470440f11362df2b1cd6b6228e273d9f999d6","modified":1679135059949},{"_id":"themes/next/layout/_third-party/fancybox.njk","hash":"53ad3c31762b74e5d29787b37d5e494cc4fded9b","modified":1679135059954},{"_id":"themes/next/layout/_third-party/index.njk","hash":"489d0cd36c75555fafa9551cf58ff35cb75a91f4","modified":1679135059954},{"_id":"themes/next/layout/_third-party/pace.njk","hash":"13b2a77b4858a127f458ea092b6f713b052befac","modified":1679135059955},{"_id":"themes/next/layout/_third-party/quicklink.njk","hash":"73bc15a9c3c5c239ab90efa19a1e721f41f3cb93","modified":1679135059955},{"_id":"themes/next/scripts/events/index.js","hash":"8ae618d4436dab49928c2bebc0837e5310dbe7de","modified":1679135059960},{"_id":"themes/next/scripts/helpers/engine.js","hash":"43568a872a93259fc1c497724a53914474ef83ae","modified":1679135059964},{"_id":"themes/next/scripts/helpers/font.js","hash":"0a6fa582a0890ecaf5f03f758a730936e48aeca1","modified":1679135059965},{"_id":"themes/next/scripts/helpers/navigation.js","hash":"82f6e81bacf23d10cac71b09cff8708e47891ef3","modified":1679135059965},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"ad764d48715c5da87d33f048ad5f1ae8b4e2eb52","modified":1679135059965},{"_id":"themes/next/scripts/helpers/next-paginator.js","hash":"2e8dcc12a52517bb4e00ea611720bcd298624112","modified":1679135059966},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"483d75522e76c7e67c7e0dfd5cac8ab04784a04c","modified":1679135059966},{"_id":"themes/next/scripts/helpers/next-vendors.js","hash":"52acbc74c1ead8a77cd3bbcba4e033053683f7d0","modified":1679135059966},{"_id":"themes/next/scripts/tags/button.js","hash":"86c71c73a63744efbbbb367612871fede0d69529","modified":1679135059966},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"8e912c715702addaf0cefe63e580e45b97ae8c3f","modified":1679135059967},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"b4d12e6fe29089be0f43bafc9eea736602cd16bf","modified":1679135059967},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"1c609312a71d47f838226346aad5c2e1c35f15dd","modified":1679135059967},{"_id":"themes/next/scripts/tags/index.js","hash":"255dd1090e8319b557eeca43571f0e4f8aab013b","modified":1679135059968},{"_id":"themes/next/scripts/tags/label.js","hash":"c18b0e619a779ed40be7f014db92af18f45fbd5c","modified":1679135059968},{"_id":"themes/next/scripts/tags/link-grid.js","hash":"3f358bb78c5c6fdf45de287f3ead553e3a6a93c2","modified":1679135059968},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"b3844e168b51a99d495ca05562ffac47677f5728","modified":1679135059968},{"_id":"themes/next/scripts/tags/note.js","hash":"a12fd53e421400836a3722ae69130969558d6ac0","modified":1679135059969},{"_id":"themes/next/scripts/tags/pdf.js","hash":"317ba4611020cc840854386dde098dbbe452777e","modified":1679135059969},{"_id":"themes/next/scripts/tags/tabs.js","hash":"e0ed5fe1bc9d2957952a1aacdf3252d6ef3f9743","modified":1679135059969},{"_id":"themes/next/scripts/tags/video.js","hash":"f6ad3f52779f0636251238d3cbdc5b6f91cc5aba","modified":1679135059969},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"0c9a1fe9906672724dbf274154a37bac1915ca2c","modified":1679135059963},{"_id":"themes/next/scripts/filters/locals.js","hash":"87f3bff03fa9fd96cf0787a6442464a7ff57f76b","modified":1679135059964},{"_id":"themes/next/scripts/filters/minify.js","hash":"997fc7153a7055bdf278e93d16a17c2d0bd62b8f","modified":1679135059964},{"_id":"themes/next/scripts/filters/post.js","hash":"e6cf4c94fc2291215a3345134ddbbc74d5091b00","modified":1679135059964},{"_id":"themes/next/source/css/_colors.styl","hash":"a88430865c99f47ce1d8240f8895819b8b7b0c06","modified":1679135059970},{"_id":"themes/next/source/css/_mixins.styl","hash":"eacfdd1795ccc0138e194fbf9381d3a64b5ba130","modified":1679135059986},{"_id":"themes/next/source/css/main.styl","hash":"c326550ce8b4deaa9b647bcfe3cdc04c100644e6","modified":1679135059993},{"_id":"themes/next/source/css/noscript.styl","hash":"64b378a4d2f0b36bf666fba13b57c59da3a8ac83","modified":1679135059993},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"3f7c55ed5980444dd2424697d8fddabf16f3b075","modified":1679144650821},{"_id":"themes/next/source/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1679135059995},{"_id":"themes/next/source/images/favicon-16x16-next.ico","hash":"5164e01c2aa538a4418552c8da9f6aa68a90e9a7","modified":1679144733988},{"_id":"themes/next/source/images/favicon-32x32-next.ico","hash":"1466029f6ce1e8d3b5069357cf4daeb947994818","modified":1679144712341},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1679135059995},{"_id":"themes/next/source/js/config.js","hash":"211a9ab35205ccfa6b7c74394bade84da0d00af7","modified":1679135059996},{"_id":"themes/next/source/js/comments.js","hash":"0b4daf0ce610760bd52e95d423f61f3e1c72442a","modified":1679135059996},{"_id":"themes/next/source/js/motion.js","hash":"d4c01d5317d45444e91a52236b751c9e9ab1bc16","modified":1679135059997},{"_id":"themes/next/source/js/next-boot.js","hash":"da11083557070d947da48d29d2d60988c8d628e9","modified":1679135059997},{"_id":"themes/next/source/js/bookmark.js","hash":"1457291a7244b7786ec35b949d97183e4fbd181d","modified":1679135059996},{"_id":"themes/next/source/js/comments-buttons.js","hash":"81ea6cbcdf0357094753d7523919c1eafa38e79f","modified":1679135059996},{"_id":"themes/next/source/js/utils.js","hash":"6b8152558a7c3b1ab6649cf3dfa897c7ada97138","modified":1679135060005},{"_id":"themes/next/test/helpers/index.js","hash":"2fb58dca3df2fe53116ee2b1232fa26ebe7b2ce5","modified":1679135060006},{"_id":"themes/next/source/js/pjax.js","hash":"c999bfc7cad747e3da0fe3d75c31dd933bf63016","modified":1679135059997},{"_id":"themes/next/source/js/schedule.js","hash":"4858233224756e3cadfabd8135f7c4b1e3673b44","modified":1679135059997},{"_id":"themes/next/test/helpers/font.js","hash":"6f5076bd3f2724e47b46ca69028393a9b6275cd1","modified":1679135060006},{"_id":"themes/next/test/helpers/next-url.js","hash":"08e84781f1cd54e5634b86877ad9cefae4a78e95","modified":1679135060007},{"_id":"themes/next/test/tags/center-quote.js","hash":"2ac4b5a358681691a17e736de06fce0b640a7023","modified":1679135060008},{"_id":"themes/next/test/tags/button.js","hash":"a50ca44eaec3d91c2958e3157d624cd3e68828c7","modified":1679135060007},{"_id":"themes/next/test/tags/index.js","hash":"5cad001936a694bf32d59751cc2b68a66199f976","modified":1679135060008},{"_id":"themes/next/test/tags/label.js","hash":"6cad7d84c42511459a89cda3971e8ea5cdee0125","modified":1679135060008},{"_id":"themes/next/test/tags/caniuse.js","hash":"2852be850d9103c25114253a45e6c62e32517de4","modified":1679135060008},{"_id":"themes/next/test/tags/mermaid.js","hash":"f718a3d0e303d842e2ca5a3b162539a49e45a520","modified":1679135060009},{"_id":"themes/next/test/tags/group-pictures.js","hash":"8f66d3c6f03fb11d85aa2ab05c9b3c9aa2b4e994","modified":1679135060008},{"_id":"themes/next/test/tags/link-grid.js","hash":"41730266306c02362258384cd73659223928361f","modified":1679135060009},{"_id":"themes/next/test/tags/pdf.js","hash":"2d114596a8a180b2f3cd2a9c6528a328961f12d4","modified":1679135060010},{"_id":"themes/next/test/tags/video.js","hash":"88db9a3a26cd35525c43c0339fcd1c5965ec9518","modified":1679135060010},{"_id":"themes/next/layout/_partials/head/head-unique.njk","hash":"fd75652957c1c3668874fdfd16f4f56027be0d8b","modified":1679135059942},{"_id":"themes/next/test/tags/note.js","hash":"161a81ce749e239d2403681372d48ecc1b51d7b9","modified":1679135060009},{"_id":"themes/next/layout/_partials/head/head.njk","hash":"e016c3f80db433f17781caf26e44f2089a71550a","modified":1679135059942},{"_id":"themes/next/layout/_partials/header/brand.njk","hash":"7bf2b6ab499775355bbf8f3ae597ff7bc00e89e4","modified":1679135059943},{"_id":"themes/next/layout/_partials/header/index.njk","hash":"1b2ae17f3c394ce310fe2d9ed5f4d07d8cc74ae7","modified":1679135059943},{"_id":"themes/next/layout/_partials/header/menu.njk","hash":"828700af2a2f273d3e3e0554ffc60706d889d539","modified":1679135059943},{"_id":"themes/next/test/tags/tabs.js","hash":"b19d2592347eae5d6a7a97ca7e8cec03e8f25b51","modified":1679135060010},{"_id":"themes/next/layout/_partials/header/menu-item.njk","hash":"62513f08e9e7f4abeaeedca91fd0af0861a2540f","modified":1679135059943},{"_id":"themes/next/test/validate/index.js","hash":"560862194991c5963da5a411629d8e6c71d20ee2","modified":1679135060010},{"_id":"themes/next/layout/_partials/header/sub-menu.njk","hash":"20cb9c39bcdcfa3f710df7bc5838d6e62d4dd674","modified":1679135059943},{"_id":"themes/next/layout/_partials/page/breadcrumb.njk","hash":"1fe44a1e156cd30e3e9fd8313e1011ad30970f83","modified":1679135059944},{"_id":"themes/next/layout/_partials/page/categories.njk","hash":"b352346dd2cb42f7eeaec5e39d9a2a353b029775","modified":1679135059944},{"_id":"themes/next/layout/_partials/page/page-header.njk","hash":"92553feb26f30f7fc9147bc4ef122908a9da06be","modified":1679135059944},{"_id":"themes/next/layout/_partials/page/schedule.njk","hash":"6ec9c97e91c793cc2eb5ac0f7c3c36fdaaf637d1","modified":1679135059945},{"_id":"themes/next/layout/_partials/page/tags.njk","hash":"752df7d12360a077c51a25609916a3ecc1763bb3","modified":1679135059945},{"_id":"themes/next/layout/_partials/post/post-copyright.njk","hash":"0ebc0142abebbeef4278e32abb543c7d7fa75d88","modified":1679135059945},{"_id":"themes/next/layout/_partials/post/post-followme.njk","hash":"ebe45ab38ace03ea74eed3f676ec1cb5805a3c8a","modified":1679135059946},{"_id":"themes/next/layout/_partials/post/post-meta.njk","hash":"9a9c4fb7e7c4fe4b7d474bdfdb4ed2b0a5423df2","modified":1679135059946},{"_id":"themes/next/layout/_partials/post/post-related.njk","hash":"9a7eda45ad0753d5f624c51a56e00277ba97c93d","modified":1679135059946},{"_id":"themes/next/layout/_partials/post/post-reward.njk","hash":"fd6fde597ea2fb7b80cffd0a3553c8e73acb8ab2","modified":1679135059946},{"_id":"themes/next/layout/_partials/post/post-share.njk","hash":"d251532b76d4b44e84732f78e774b18e2415d7d9","modified":1679135059947},{"_id":"themes/next/layout/_partials/search/algolia-search.njk","hash":"93fbb449fbd599cb4315d7eb0daeb239811b233f","modified":1679135059947},{"_id":"themes/next/layout/_partials/search/index.njk","hash":"9766852e72c1809d8c1eea71ac6116b4cc0886d2","modified":1679135059947},{"_id":"themes/next/layout/_partials/search/localsearch.njk","hash":"f73d25a8ccfdd5d4ca2953dc434ff8ce36034c57","modified":1679135059947},{"_id":"themes/next/layout/_partials/sidebar/site-overview.njk","hash":"3de5c9676aaf6a2f7d837db275c56d15f9b74fb8","modified":1679135059948},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.njk","hash":"3e80332f88b101141be69f2a07f54ed8c053eabb","modified":1679135059949},{"_id":"themes/next/layout/_third-party/analytics/cloudflare.njk","hash":"17173c45f0b740669ef45aaae1fe96eeb0a0ff52","modified":1679135059949},{"_id":"themes/next/layout/_third-party/analytics/growingio.njk","hash":"9ff9ec05c2037beea229a6bb698f9e3546973220","modified":1679135059950},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.njk","hash":"52ad137450f7b3d6a330e16b3ed1c6174290f0eb","modified":1679135059949},{"_id":"themes/next/layout/_third-party/analytics/index.njk","hash":"81abcf790cf97395cde9e3cd6d5d1aa5656bd134","modified":1679135059950},{"_id":"themes/next/layout/_third-party/analytics/matomo.njk","hash":"43238bc1bc2e88d707f8097814ef3ff830cbe641","modified":1679135059950},{"_id":"themes/next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"24719266662fcff63e88a21ee9b5b284abb8b37c","modified":1679135059950},{"_id":"themes/next/layout/_third-party/analytics/plausible.njk","hash":"64ed6fecae79f9f9c61e956d2bd077792473e069","modified":1679135059950},{"_id":"themes/next/layout/_third-party/analytics/umami.njk","hash":"724a58f5296ab4a12910c81f2e619e607b2b21a6","modified":1679135059951},{"_id":"themes/next/layout/_third-party/chat/chatra.njk","hash":"09d2c9487d75894d45a823e3237ae9f90fd6ee01","modified":1679135059951},{"_id":"themes/next/layout/_third-party/chat/gitter.njk","hash":"375a86f0b19e130cfa7707007e3a53d9ae7c9b64","modified":1679135059951},{"_id":"themes/next/layout/_third-party/chat/tidio.njk","hash":"3fbc72427c1211e5dcfd269af1a74852a7ba5c1a","modified":1679135059951},{"_id":"themes/next/layout/_third-party/comments/changyan.njk","hash":"5f7967bd946060f4102263a552ddfbae9975e7ea","modified":1679135059952},{"_id":"themes/next/layout/_third-party/comments/disqus.njk","hash":"b0828dd1b1fd66ecd612d9e886a08e7579e9a4f7","modified":1679135059952},{"_id":"themes/next/layout/_third-party/comments/disqusjs.njk","hash":"c5086b4c35f730f82c99c4a8317f2f153ebde869","modified":1679135059952},{"_id":"themes/next/layout/_third-party/comments/gitalk.njk","hash":"6fd4df5c21cfe530dbb0c012bc0b202f2c362b9c","modified":1679135059952},{"_id":"themes/next/layout/_third-party/comments/isso.njk","hash":"38badcc7624a13961381c2465478056b9602aee5","modified":1679135059952},{"_id":"themes/next/layout/_third-party/comments/livere.njk","hash":"b8e0d5de584cece5e05b03db5b86145aa1e422b4","modified":1679135059953},{"_id":"themes/next/layout/_third-party/comments/utterances.njk","hash":"a7921be7328e1509d33b435175f5333a9aada66f","modified":1679135059954},{"_id":"themes/next/layout/_third-party/math/index.njk","hash":"1856c4b035c5b8e64300a11af0461b519dfc4cf4","modified":1679135059954},{"_id":"themes/next/layout/_third-party/math/katex.njk","hash":"1df65b1390add93b86ae3f9423d96a130b0ece04","modified":1679135059954},{"_id":"themes/next/layout/_third-party/math/mathjax.njk","hash":"a62aa1ed4e35b8d0451d83f341bf0a97538bc9a4","modified":1679135059954},{"_id":"themes/next/layout/_third-party/search/algolia-search.njk","hash":"67f67a77f27103177b9940446f43610229536d82","modified":1679135059955},{"_id":"themes/next/layout/_third-party/search/localsearch.njk","hash":"210c32b654adae3d8076c4417d370b42af258cea","modified":1679135059955},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"d97790e4b442a1e3ded7d7b4f84b8ee6cdb6e8ea","modified":1679135059956},{"_id":"themes/next/layout/_third-party/statistics/firestore.njk","hash":"af5336e8bbdc4638435971da115bb7443d374ade","modified":1679135059956},{"_id":"themes/next/layout/_third-party/statistics/index.njk","hash":"866ffa15a3250678eb8a90aa6f609fa965db90fd","modified":1679135059957},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.njk","hash":"8703d1855bb8d251c9b7c2940b7e3be525e53000","modified":1679135059957},{"_id":"themes/next/layout/_third-party/tags/mermaid.njk","hash":"dd8f963acd5a3685be46fd5319c06df0308d99b2","modified":1679135059957},{"_id":"themes/next/layout/_third-party/tags/pdf.njk","hash":"0386c708975cc5faea4f782611c5d2c6b8ac2850","modified":1679135059957},{"_id":"themes/next/scripts/events/lib/config.js","hash":"7c29184a37222d6499c5220264fda6942afc03a9","modified":1679135059960},{"_id":"themes/next/scripts/events/lib/highlight.js","hash":"00cec6980cafd417def885f496371856cd524a25","modified":1679135059960},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"1f1ea7b579a49f17574c31d78d663c54896133eb","modified":1679135059960},{"_id":"themes/next/scripts/events/lib/navigation.js","hash":"0a2df7d40d64c61ce7e730bb8269b848b03526d1","modified":1679135059961},{"_id":"themes/next/scripts/events/lib/utils.js","hash":"65825c37e473c942095df05183424003d7263df5","modified":1679135059961},{"_id":"themes/next/scripts/events/lib/vendors.js","hash":"a96050b0a9bcb49f1f6897660efc77991024790a","modified":1679135059961},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"761760031e49edb77277bd4a8582774959240d6b","modified":1679135059961},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"550cc7f57bc3ab3d093e34741e7860222851d4d4","modified":1679135059962},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"1cb58aa6b88f7461c3c3f9605273686adcc30979","modified":1679135059962},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"4dbe9652ae53a181c86eb7e9005a5255f0540055","modified":1679135059962},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"3283bdd6e5ac7d10376df8ddd5faaec5dc1bd667","modified":1679135059962},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"96e58efba0dc76af409cc7d2db225f0fe4526ea8","modified":1679135059962},{"_id":"themes/next/scripts/filters/comment/isso.js","hash":"c22cbccd7d514947e084eeac6a3af1aa41ec857a","modified":1679135059963},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"bb8ebb541c40362c0cbbd8e83d3b777302bb6c40","modified":1679135059963},{"_id":"themes/next/scripts/filters/comment/utterances.js","hash":"a50718c081685fd35ff8ea9ca13682c284399ed8","modified":1679135059963},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"c4537fa2de33d98baff2c87a73801770414e0b69","modified":1679135059992},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"d3a8f6e71c86926d0c2a247a31d7446d829736d5","modified":1679135059992},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"77d9c468897283223cdc922eb7e146ca7a83420c","modified":1679135059993},{"_id":"themes/next/source/css/_variables/base.styl","hash":"c8b101c76b179877a22256922a56d30d0926bc51","modified":1679135059993},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"5092cacdfbc482996d0bee9fdf2c37d8d3ae863c","modified":1679135059992},{"_id":"themes/next/source/js/schemes/muse.js","hash":"aa84bdd853a9b0646ad9157e26df949ba0ec57c3","modified":1679135059998},{"_id":"themes/next/source/js/third-party/pace.js","hash":"0ebee77b2307bf4b260afb06c060171ef42b7141","modified":1679135060003},{"_id":"themes/next/source/css/_common/components/index.styl","hash":"49c3063b46d65796003a822deed971abee41675e","modified":1679135059970},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"969c3797d4315a2873aa143d0674d251fa0c5703","modified":1679135059970},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"f3defd56be33dba4866a695396d96c767ce63182","modified":1679135059974},{"_id":"themes/next/source/js/third-party/fancybox.js","hash":"8a847a7bbdbc0086dd1de12b82107a854b43f5e5","modified":1679135060002},{"_id":"themes/next/source/css/_common/outline/index.styl","hash":"7782dfae7a0f8cd61b936fa8ac980440a7bbd3bb","modified":1679135059978},{"_id":"themes/next/source/js/third-party/quicklink.js","hash":"5b0197e061f57e00875be3636ba372a67693abe0","modified":1679135060003},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"2db4462e9cb87b8aef3f50f850fed407de16da3e","modified":1679135059978},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"1239f1b432a6932b2bb9ebcfbaabf724b8f4e59a","modified":1679135059981},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"f768ecb2fe3e9384777c1c115cd7409e9155edd7","modified":1679135059982},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"cf8446f4378dcab27b55ede1635c608ae6b8a5c8","modified":1679135059982},{"_id":"themes/next/source/css/_common/scaffolding/index.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1679135059982},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"fd4a2d2303f107a021837aa6e3d977c2f9d14c42","modified":1679135059983},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"b9388016f8d9274703e77e306a1feaad1b7b9d6c","modified":1679135059983},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1679135059983},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"aa34abe71ad476922a0371bcac82cd8e5b45d383","modified":1679135059986},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"e728caca94567b4d4215402d01e449e23969e7e1","modified":1679135059987},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"a28f0858a0f4c3aac5496c693893696d5ac12372","modified":1679135059987},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"2db5ada757f7ffb9a36b06400cf30d80ec039b6e","modified":1679135059987},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"89bf3f6b82cb0fafbbd483431df8f450857c5a0b","modified":1679135059988},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"8edf8fc4bc4a3913822fa4f8cf5abf3bcf011f56","modified":1679135059988},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"82311a531e26ca5a6ad17cf14959da75d4ac6106","modified":1679135059988},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"68f8d30071516913a7a958e01d010e8a93f7aa24","modified":1679135059988},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"8ece7c8d3f95b7db3588465faff66adeff4d406e","modified":1679135059989},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1679135059989},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"ec5d4e8ffe74722a092a69ace2f8dec7776466a8","modified":1679135059989},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1679135059989},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"6630a642ad2311ec09466c962963c006c4df4c38","modified":1679135059989},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"507179f9d5648089e3b4da0e17cca74acc20e38a","modified":1679135059990},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"1d29eca70fa686d895f8e98a283e4a159e40905a","modified":1679135059991},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"06835446a1c7353f434a9527889a53d6be69766c","modified":1679135059989},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e06e0fd44e39838ce22ac7829a2421f8c9e1b12d","modified":1679135059991},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b5c3dd08c520a16ee49f85fa12b4935e725ef261","modified":1679135059991},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"7905f428b46d100ac5928875cb1e2b99fa86fc0b","modified":1679135059991},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","hash":"f9579a02599de063ccff336177ba964a2931a6e9","modified":1679135059998},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","hash":"f755e8537ccbbb0bd84c26923f320d4e206e7428","modified":1679135059999},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","hash":"d77d4934d959e7125128754b568f1d041c3fbfff","modified":1679135059998},{"_id":"themes/next/source/js/third-party/analytics/matomo.js","hash":"f24604710002234f18a7b5cfe9ccdf3ed6e725a8","modified":1679135059999},{"_id":"themes/next/source/js/third-party/chat/chatra.js","hash":"72e0766752b78a723fb30e92d533a8b353104e2d","modified":1679135059999},{"_id":"themes/next/source/js/third-party/chat/gitter.js","hash":"14b024c920a8b359777d79dd8e1a849387f8f3ad","modified":1679135059999},{"_id":"themes/next/source/js/third-party/chat/tidio.js","hash":"77c231bcd64f1c09bd9989909e9fee703b65f47f","modified":1679135060000},{"_id":"themes/next/source/js/third-party/comments/changyan.js","hash":"b4cb06fdf531292e2361398a98d75a4ca2b8473a","modified":1679135060000},{"_id":"themes/next/source/js/third-party/comments/disqus.js","hash":"07e0038b221b9a4fd8ccac75093de3dee1f8315e","modified":1679135060000},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","hash":"5673d28509a8e837a512da490a88b7bf5162fc49","modified":1679135060001},{"_id":"themes/next/source/js/third-party/comments/isso.js","hash":"b9b9fd2f0e098a123b34a4932da912a9485ffe6c","modified":1679135060001},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","hash":"1e8509356fb027d948d118ab220d9631f4d482fa","modified":1679135060001},{"_id":"themes/next/source/js/third-party/comments/livere.js","hash":"68892d74ef5fc308c6e7e6b4f190826d79f3055d","modified":1679135060001},{"_id":"themes/next/source/js/third-party/comments/utterances.js","hash":"ec44d7f1c8b51b0aa3cccba099a78f3575ac828c","modified":1679135060002},{"_id":"themes/next/source/js/third-party/math/katex.js","hash":"5c63ec71458b4fe0cd98fd4a04e11c3746764f11","modified":1679135060002},{"_id":"themes/next/source/js/third-party/math/mathjax.js","hash":"d93556184b2c0aa1dbc4a6fb892d2f77b80d7d9f","modified":1679135060003},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","hash":"e927000b375e79e2d173bdc6b8b45e67364fad4a","modified":1679135060003},{"_id":"themes/next/source/js/third-party/search/local-search.js","hash":"e6361ed3d5fa959e11e90f7dab8fdaff398b4425","modified":1679135060004},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","hash":"ce12b5007c9aa997738641c06a1c081c357e27bd","modified":1679135060004},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","hash":"7db3233f0b33870943ce1547326a67f9e628b411","modified":1679135060004},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fde10ce94e9ae21a03b60d41d532835b54abdcb1","modified":1679135059971},{"_id":"themes/next/source/css/_common/components/pages/index.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1679135059971},{"_id":"themes/next/source/js/third-party/tags/pdf.js","hash":"e109c2d6828f527f0289d5fa3bb02fce63ee6d93","modified":1679135060005},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"80595d274f593b321c0b644a06f3165fe07b16f5","modified":1679135059971},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","hash":"e9fffe2a14751e86aed5e84a5e96514413eac2dc","modified":1679135060005},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"091b8c763e43447d087c122a86538f290f83136a","modified":1679135059971},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"56d719bcdcba3d725141c55bbd4b168f3942f912","modified":1679135059971},{"_id":"themes/next/source/css/_common/components/post/index.styl","hash":"aa04527f76de7646573ea327d4f6145200d6070d","modified":1679135059972},{"_id":"themes/next/source/css/_common/components/post/post-body.styl","hash":"268e0a4cf638b9ce4db07268031ab34c5f31ac65","modified":1679135059972},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"eebe3013a9a976011570dce2d04dfeae4c31d790","modified":1679135059972},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"7245d8364092c2d184e658e801ba94815a2a1f81","modified":1679135059973},{"_id":"themes/next/source/css/_common/components/post/post-footer.styl","hash":"4790d37a40b80f7278ec55274f017dad21791038","modified":1679135059973},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"c34936a17c3d8af6c0988ac6746d7509dc0b50eb","modified":1679135059973},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"4d29b6ae7ed3dc44b10df851a4128b6441efa8be","modified":1679135059973},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"69dff7cf231d01f85671758455726dd666664a73","modified":1679135059974},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"777efaacbabb623f1d77fac5dd784401f8dea4cd","modified":1679135059974},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"65dde3ba925ac19b0bfcb7fa70cf4157bec02576","modified":1679135059974},{"_id":"themes/next/source/css/_common/components/third-party/disqusjs.styl","hash":"a2ffaa06c963514a79fda52665e707af6e8e2f5e","modified":1679135059975},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"406c03be3cf8a8411227bc1fecf942ca368f7e2a","modified":1679135059975},{"_id":"themes/next/source/css/_common/components/third-party/gitter.styl","hash":"7b36f776c41fbb744572c5de2c8d49b35656ec21","modified":1679135059975},{"_id":"themes/next/source/css/_common/components/third-party/index.styl","hash":"08d609b0534b9a5151cab7e6d54c0dec6a8dad8c","modified":1679135059975},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"1e5776ad4c5c8bcf7596ac74dcabc30704b3f5a0","modified":1679135059975},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"49c26184580fde8a732899a4de5aae8662e289b8","modified":1679135059975},{"_id":"themes/next/source/css/_common/components/third-party/utterances.styl","hash":"d28856f365a9373c4ae6fe1e5673d63df2dfd65f","modified":1679135059975},{"_id":"themes/next/source/css/_common/outline/footer/index.styl","hash":"39066b4e2e914d85736c9c33fa51f21a3f86c0e4","modified":1679135059976},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"c8648c8ea3105556be0068d9fb2735261d0d94bc","modified":1679135059976},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"05af22f3edc2383a3d97ec4c05e9ac43b014bead","modified":1679135059977},{"_id":"themes/next/source/css/_common/outline/header/index.styl","hash":"038625515ba4760e4dda6792549bddc0db5a3d20","modified":1679135059977},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"06d551ef6e26d426bb3ffb4638714488c7cbce66","modified":1679135059977},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"dce8ea62d7d7b08a0444fbb2f617be30bfcfc152","modified":1679135059977},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"d9bc2b520636b9df7f946295cd430593df4118ff","modified":1679135059978},{"_id":"themes/next/source/css/_common/outline/sidebar/index.styl","hash":"bdfef8d2363bc199dfbcc23ee833edca27cc9fcf","modified":1679135059979},{"_id":"themes/next/source/css/_common/outline/sidebar/related-posts.styl","hash":"b3689beb90cda64cafecaf6b25981fe8a9525992","modified":1679135059979},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2c2bfbc34b6f19d262ae7c041474985e12f4f4ad","modified":1679135059979},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"d8a028f532d562e6a86bb3b9c7b992e4b6dbbb51","modified":1679135059980},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"f8a97aad14e0b16b555ee0048da5402f818f9693","modified":1679135059980},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"63d8f5f169c2b1c969928fc79244c5fe89ee484e","modified":1679135059980},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"8f82d5141a18f6319e0609a3f6e4fcca6d442203","modified":1679135059980},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"cbc6b0938a2e60f35a5df32210904fb16e4938da","modified":1679135059980},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"509bad7d1d6b5c6f24a3f205b2ed7b65a2326dd4","modified":1679135059981},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2de038def2cb91da143b14696366c14a66e0e569","modified":1679135059981},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"047bf8176ea24e277b1a4f6e6ad599033f1d1a44","modified":1679135059982},{"_id":"themes/next/source/css/_common/scaffolding/highlight/index.styl","hash":"a3ea8e3d2347f417ec163d191c9d7c1e9d606c1e","modified":1679135059982},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"6b3680e0dbea8e14c1cec24ef63b7fae5e37f7ef","modified":1679135059984},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"8d9218980e185210ce034e9769ab639b9630fd88","modified":1679135059984},{"_id":"themes/next/source/css/_common/scaffolding/tags/index.styl","hash":"e22fde6f1657d311d46f64d868c4491d535c8caa","modified":1679135059984},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"531daf2612c6217950677a2d03924459ce57c291","modified":1679135059985},{"_id":"themes/next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7075dd32dd70da1e161e4bd14b46f1e8be62fa3c","modified":1679135059985},{"_id":"themes/next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"c7754dc6c866928b538f0863a05b96ec44b5e986","modified":1679135059985},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"3324e9d09faf3903bc9815358bda4000bbb691fa","modified":1679135059985},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"77122986509a6b4968bae2729417b7016137534c","modified":1679135059985},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f71b2022094c5bc8c74b4ed049639f7262e0b182","modified":1679135059986},{"_id":"themes/next/source/images/avatar.png","hash":"b478c467930eaff4e76f612e45f4979b69038d0f","modified":1679052120830},{"_id":"public/tags/index.html","hash":"d9f361f261226389e54952d3b1638ecd1f6e594f","modified":1680374590384},{"_id":"public/2023/03/23/ET框架TulipBubble实现逻辑/index.html","hash":"e325d27a3b99e8f65e7f5817e9224c77425f4101","modified":1680374590384},{"_id":"public/2023/02/25/videos/index.html","hash":"6e58f158638f0ffecd676223d9bd2d8363825a46","modified":1680374590384},{"_id":"public/archives/index.html","hash":"2ad12de5bbd61008219f65733e4d53b75b8364d6","modified":1680374590384},{"_id":"public/archives/2023/index.html","hash":"beb6241b1e75dfd44f63fa8e4eda7a77182b5ba8","modified":1680374590384},{"_id":"public/archives/2023/02/index.html","hash":"7ed6120f007e8f2ba4f696936d33980e3d2c93d1","modified":1680374590384},{"_id":"public/archives/2023/03/index.html","hash":"b9819f053c49d2b7417f3c5d6b9e6ec0b093c641","modified":1680374590384},{"_id":"public/tags/冷战/index.html","hash":"a2fe5d9518b2dc3dfdc7744338c5cb780cd634c4","modified":1680374590384},{"_id":"public/tags/美国/index.html","hash":"96234806ae88fc9d1dd3bb3be33cacfd1a074f1a","modified":1680374590384},{"_id":"public/tags/历史/index.html","hash":"d629e9b3f5d0feb24d2a0ee92aca7f2f41b81db6","modified":1680374590384},{"_id":"public/tags/苏联/index.html","hash":"8c193b3edfd315e3165284aaf33bd83645905738","modified":1680374590384},{"_id":"public/2023/03/20/ET框架初步理解/index.html","hash":"68560e8bfb2ddbfa61f8d0532db870750c0f9274","modified":1680374590384},{"_id":"public/2023/03/16/Github使用/index.html","hash":"9d1b3765ffbd2b8e13fd0dedf0eba38af0aad8c1","modified":1680374590384},{"_id":"public/index.html","hash":"b945373395474ad4100ca66fe7c04d108bcf3bf7","modified":1680374639919},{"_id":"public/images/apple-touch-icon-next.png","hash":"3f7c55ed5980444dd2424697d8fddabf16f3b075","modified":1679578017222},{"_id":"public/images/favicon-16x16-next.ico","hash":"5164e01c2aa538a4418552c8da9f6aa68a90e9a7","modified":1679578017222},{"_id":"public/images/favicon-32x32-next.ico","hash":"1466029f6ce1e8d3b5069357cf4daeb947994818","modified":1679578017222},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1679578017222},{"_id":"public/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1679578017222},{"_id":"public/2023/03/20/ET框架初步理解/4a45803c69ed8b7283f933aa6e1748973976ef4c.png","hash":"099947dcd47ccf15acd4bfb492893de18f6d44e3","modified":1679578017222},{"_id":"public/2023/03/20/ET框架初步理解/6e285ffc782c8443b1070964510e9530573f6c2d.png","hash":"e69da7540315e68734be8a58acde9fe38b18705c","modified":1679578017222},{"_id":"public/2023/03/20/ET框架初步理解/7845ce3fdee147fca9d5c7fe4d86a890b717ecfe.png","hash":"a3e70c29093723ed7e586ae84e722ba191e1cb41","modified":1679578017222},{"_id":"public/2023/03/20/ET框架初步理解/BackConfig.png","hash":"e69da7540315e68734be8a58acde9fe38b18705c","modified":1679578017222},{"_id":"public/images/avatar.png","hash":"b478c467930eaff4e76f612e45f4979b69038d0f","modified":1679578017222},{"_id":"public/2023/03/20/ET框架初步理解/BackEnd.png","hash":"a3e70c29093723ed7e586ae84e722ba191e1cb41","modified":1679578017222},{"_id":"public/2023/03/20/ET框架初步理解/front.png","hash":"099947dcd47ccf15acd4bfb492893de18f6d44e3","modified":1679578017222},{"_id":"public/2023/03/23/ET框架TulipBubble实现逻辑/2023-03-23-21-05-52-image.png","hash":"bde4ff7002cd030fa1102020239644bcb1173e63","modified":1679578017222},{"_id":"public/2023/03/16/Github使用/089c68368fd64dc9463fcbb493992b46998e45ad.png","hash":"4d47c07f05640c03c28bbdb717d7a95bb5f24bb1","modified":1679578017222},{"_id":"public/2023/03/16/Github使用/15.png","hash":"2fbdb63fdcf5c2bdcbedff9dab6ab024fb7ee1c3","modified":1679578017222},{"_id":"public/2023/03/16/Github使用/14.png","hash":"7677a6db1891da89ab84e408979b0c7c424678c3","modified":1679578017222},{"_id":"public/2023/03/16/Github使用/3aa70b0531dc3e2625c09c1ef8eac0078a29f54e.png","hash":"75abf9f7efe0ee474d0411193e1198dc68f86fd3","modified":1679578017222},{"_id":"public/2023/03/16/Github使用/2ac963f71072ecd1cc7f56f9153107153b737a36.png","hash":"10bb4f3cb67e25f5b2519d76448c673b7747527d","modified":1679578017222},{"_id":"public/2023/03/16/Github使用/62a3a7a6fbde2da426ced06d782dbd6ee43fb5c4.png","hash":"6775f387bca276e70ff2514007ad175aaf9ebbc1","modified":1679578017222},{"_id":"public/2023/03/16/Github使用/69a4adad5fa74c60aa7fdd3ac358f9bb718b3b4b.png","hash":"2fbdb63fdcf5c2bdcbedff9dab6ab024fb7ee1c3","modified":1679578017222},{"_id":"public/2023/03/16/Github使用/c96a2283efc6cc31030410ff42e59ac41209443a.png","hash":"1b48b87d2eaea4bbea51fc48cf0343873ac0f6be","modified":1679578017222},{"_id":"public/2023/03/16/Github使用/c81d9e95a6974e43bb3d62b5ce7029b0c535f29d.png","hash":"7677a6db1891da89ab84e408979b0c7c424678c3","modified":1679578017222},{"_id":"public/2023/03/16/Github使用/dfd1bcd4b5e9efbe1d7e8d52c289e292c4bd2b04.png","hash":"5996a234a8b2c6e464289dccc762abe582f41ad4","modified":1679578017222},{"_id":"public/2023/03/16/Github使用/fc261c3347d67a16ae3d5eef1b72182071954565.png","hash":"95c5bc92ed845f1ebe8ec0b1ab0bafdfa2f11421","modified":1679578017222},{"_id":"public/2023/03/16/Github使用/git.png","hash":"95c5bc92ed845f1ebe8ec0b1ab0bafdfa2f11421","modified":1679578017222},{"_id":"public/2023/03/16/Github使用/practice00.png","hash":"75abf9f7efe0ee474d0411193e1198dc68f86fd3","modified":1679578017222},{"_id":"public/2023/03/16/Github使用/practice04.png","hash":"6775f387bca276e70ff2514007ad175aaf9ebbc1","modified":1679578017222},{"_id":"public/2023/03/16/Github使用/practice05.png","hash":"1b48b87d2eaea4bbea51fc48cf0343873ac0f6be","modified":1679578017222},{"_id":"public/2023/03/16/Github使用/practice06.png","hash":"10bb4f3cb67e25f5b2519d76448c673b7747527d","modified":1679578017222},{"_id":"public/css/noscript.css","hash":"4cd5301e478e0e0d4b176740ec314087ec5cb707","modified":1679578017222},{"_id":"public/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1679578017222},{"_id":"public/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1679578017222},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1679578017222},{"_id":"public/js/motion.js","hash":"770d63c26f22705311028a36b52e999cc8a2da82","modified":1679578017222},{"_id":"public/js/next-boot.js","hash":"da0f07f9eaaa83de70128b0feaea3fdadb90457a","modified":1679578017222},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1679578017222},{"_id":"public/js/pjax.js","hash":"b03ba78c6916ad2f390d55bc1bc18fafb64b0ebf","modified":1679578017222},{"_id":"public/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1679578017222},{"_id":"public/js/schemes/muse.js","hash":"ba7ba2c129d1f240c6a22cec3e53f3f22af64b6b","modified":1679578017222},{"_id":"public/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1679578017222},{"_id":"public/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1679578017222},{"_id":"public/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1679578017222},{"_id":"public/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1679578017222},{"_id":"public/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1679578017222},{"_id":"public/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1679578017222},{"_id":"public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1679578017222},{"_id":"public/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1679578017222},{"_id":"public/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1679578017222},{"_id":"public/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1679578017222},{"_id":"public/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1679578017222},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1679578017222},{"_id":"public/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1679578017222},{"_id":"public/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1679578017222},{"_id":"public/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1679578017222},{"_id":"public/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1679578017222},{"_id":"public/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1679578017222},{"_id":"public/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1679578017222},{"_id":"public/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1679578017222},{"_id":"public/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1679578017222},{"_id":"public/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1679578017222},{"_id":"public/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1679578017222},{"_id":"public/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1679578017222},{"_id":"public/js/third-party/tags/mermaid.js","hash":"f27d817b0c2138dd3215b1f46af0753f60a008f3","modified":1679578017222},{"_id":"public/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1679578017222},{"_id":"public/css/main.css","hash":"9a404a49d874a6cda0827139198eb2cba6e37405","modified":1679578017222},{"_id":"public/js/utils.js","hash":"5e1cf39de050964e97fb3ba0825aeec7f4bc36dd","modified":1679578017222},{"_id":"public/2023/02/25/videos/b4c79bb4937a8fe3e059d09f307c0293b448d348.jpg","hash":"d8a2da35a9f9aeee81cec02721bc69e52a929fe5","modified":1679578017222},{"_id":"public/2023/03/16/Github使用/practice12.png","hash":"5996a234a8b2c6e464289dccc762abe582f41ad4","modified":1679578017222},{"_id":"public/2023/02/25/videos/CodWar.jpg","hash":"d8a2da35a9f9aeee81cec02721bc69e52a929fe5","modified":1679578017222},{"_id":"public/2023/03/16/Github使用/practice11.png","hash":"4d47c07f05640c03c28bbdb717d7a95bb5f24bb1","modified":1679578017222},{"_id":"public/2023/03/16/Github使用/265bf46b38778fb7476094dda85d00debb635e85.png","hash":"bfb25df7eec92350e8320d2bb12879e0192560dc","modified":1679578017222},{"_id":"public/2023/03/16/Github使用/5ea18123f9a50a08ca1fd5562c479b4aa184a2e4.png","hash":"8d3132d4b3e9cb6d8403a26a224a63488e83df51","modified":1679578017222},{"_id":"public/2023/03/16/Github使用/practice01.png","hash":"bfb25df7eec92350e8320d2bb12879e0192560dc","modified":1679578017222},{"_id":"public/2023/03/16/Github使用/practice08.png","hash":"8d3132d4b3e9cb6d8403a26a224a63488e83df51","modified":1679578017222},{"_id":"public/2023/03/16/Github使用/13.png","hash":"83c9405fddb316a574fed3b4c4e53f97cfae2434","modified":1679578017222},{"_id":"public/2023/03/16/Github使用/51204e17ea43f7a1992ea9abbf9ecb48768694fa.png","hash":"d2e4845c696d32fa1b277633f3c51d96beb9bef8","modified":1679578017222},{"_id":"public/2023/03/16/Github使用/578439ae227066f02d1319f645f09b0567c46bd6.png","hash":"dfdf31f250ed49d7bcbadc87543eebfa19ef70d5","modified":1679578017222},{"_id":"public/2023/03/16/Github使用/5a1f2bfbce2c6557b2d3442934c0a92b8a606944.png","hash":"84a8316c92b9fb561f279cdd2c47e2993b73bd07","modified":1679578017222},{"_id":"public/2023/03/16/Github使用/6aa5405ba7ffbe9c8760c5891854c1041e688d10.png","hash":"7f6a71fbc1baa1cda2ca035ba6c9869a5bfc2707","modified":1679578017222},{"_id":"public/2023/03/16/Github使用/86324066a24e3eb32af8305f91c0a064582ae9d5.png","hash":"5a51c07bcd6d4ffc9d848b8255be5311f7c52336","modified":1679578017222},{"_id":"public/2023/03/16/Github使用/git01.png","hash":"5a51c07bcd6d4ffc9d848b8255be5311f7c52336","modified":1679578017222},{"_id":"public/2023/03/16/Github使用/practice02.png","hash":"84a8316c92b9fb561f279cdd2c47e2993b73bd07","modified":1679578017222},{"_id":"public/2023/03/16/Github使用/practice03.png","hash":"dfdf31f250ed49d7bcbadc87543eebfa19ef70d5","modified":1679578017222},{"_id":"public/2023/03/16/Github使用/practice07.png","hash":"d2e4845c696d32fa1b277633f3c51d96beb9bef8","modified":1679578017222},{"_id":"public/2023/03/16/Github使用/practice09.png","hash":"7f6a71fbc1baa1cda2ca035ba6c9869a5bfc2707","modified":1679578017222},{"_id":"public/2023/03/16/Github使用/10.png","hash":"571fa7d797a24a5fc7062744c82fadad88818d7b","modified":1679578017222},{"_id":"public/2023/03/16/Github使用/7e1e6ca628c6bcc92afce94e8ce7a0cd9a491ac1.png","hash":"571fa7d797a24a5fc7062744c82fadad88818d7b","modified":1679578017222},{"_id":"source/_posts/SingleChip.md","hash":"5a61011adcf7faa48a53bfa52fca6ff0bcea7c0a","modified":1680374634735},{"_id":"source/_posts/SingleChip/08a01404c19e5459d57c8e384f5eaf22869a43eb.png","hash":"bba592f3efaa9b21a2b296813d157b34d4ccf4ad","modified":1680372541242},{"_id":"source/_posts/SingleChip/426941f16f054370a2e48c0b9334b919349fd85a.png","hash":"c7d0fe0ba21e89f4b93ee55462adcadf094607cf","modified":1680372541239},{"_id":"source/_posts/SingleChip/4c9eeaf452c81e4203aab3ab35f203b530e08202.png","hash":"7dfc6fc126437e107817781a48e0fc6d620d7919","modified":1680372541238},{"_id":"source/_posts/SingleChip/57037c8bea42c86053227fe549874b419653b56c.png","hash":"7a43492f3bbbb9e7a242a88d2383d7a3991abd02","modified":1680372541239},{"_id":"source/_posts/SingleChip/d5a14db6ef5b8ee6e4e4628c1290b38445a7835e.png","hash":"039d45d98182217a3d581bcc86a3d499be2df101","modified":1680372541238},{"_id":"source/_posts/SingleChip/54c588817fcd205435a974f1d8077220d5485bf4.png","hash":"db1f87f906380a51ec28b7fb9ba5f1a4598fa466","modified":1680372541240},{"_id":"source/_posts/SingleChip/62d506ea99c99e2d95a5c5d0b00410291b1a7de4.png","hash":"8e789ab593ccf3bfecc41e9d019808797448d7ef","modified":1680372541241},{"_id":"source/_posts/SingleChip/ba71358b9ca3c9a533af1de889672b443827b2b5.png","hash":"25e64925ccd989e516653983aa286b3ed756b7ef","modified":1680372541241},{"_id":"source/_posts/SingleChip/53dd30183091b0bb68dfbdb15031cc2dfa2e0306.png","hash":"4b87b76ad8ee5a78483ec34af4602d89bf102769","modified":1680372541237},{"_id":"source/_posts/SingleChip/2023-04-02-02-04-46-image.png","hash":"76b60efcdb909622a52e2370f92b54a420e875c6","modified":1680372286020},{"_id":"source/_posts/SingleChip/2023-04-02-02-04-59-image.png","hash":"76b60efcdb909622a52e2370f92b54a420e875c6","modified":1680372299582},{"_id":"source/_posts/SingleChip/2023-04-02-02-05-40-image.png","hash":"76b60efcdb909622a52e2370f92b54a420e875c6","modified":1680372340827},{"_id":"public/archives/2023/04/index.html","hash":"a4e561d2c4a912a05b8418f4e5c3a86ddf2c3dd6","modified":1680374590384},{"_id":"public/2023/04/02/SingleChip/index.html","hash":"36e93b20d0652af6eea217709a6c9228ac75ee74","modified":1680374639919},{"_id":"public/2023/04/02/SingleChip/08a01404c19e5459d57c8e384f5eaf22869a43eb.png","hash":"bba592f3efaa9b21a2b296813d157b34d4ccf4ad","modified":1680374590384},{"_id":"public/2023/04/02/SingleChip/426941f16f054370a2e48c0b9334b919349fd85a.png","hash":"c7d0fe0ba21e89f4b93ee55462adcadf094607cf","modified":1680374590384},{"_id":"public/2023/04/02/SingleChip/54c588817fcd205435a974f1d8077220d5485bf4.png","hash":"db1f87f906380a51ec28b7fb9ba5f1a4598fa466","modified":1680374590384},{"_id":"public/2023/04/02/SingleChip/57037c8bea42c86053227fe549874b419653b56c.png","hash":"7a43492f3bbbb9e7a242a88d2383d7a3991abd02","modified":1680374590384},{"_id":"public/2023/04/02/SingleChip/d5a14db6ef5b8ee6e4e4628c1290b38445a7835e.png","hash":"039d45d98182217a3d581bcc86a3d499be2df101","modified":1680374590384},{"_id":"public/2023/04/02/SingleChip/4c9eeaf452c81e4203aab3ab35f203b530e08202.png","hash":"7dfc6fc126437e107817781a48e0fc6d620d7919","modified":1680374590384},{"_id":"public/2023/04/02/SingleChip/53dd30183091b0bb68dfbdb15031cc2dfa2e0306.png","hash":"4b87b76ad8ee5a78483ec34af4602d89bf102769","modified":1680374590384},{"_id":"public/2023/04/02/SingleChip/62d506ea99c99e2d95a5c5d0b00410291b1a7de4.png","hash":"8e789ab593ccf3bfecc41e9d019808797448d7ef","modified":1680374590384},{"_id":"public/2023/04/02/SingleChip/ba71358b9ca3c9a533af1de889672b443827b2b5.png","hash":"25e64925ccd989e516653983aa286b3ed756b7ef","modified":1680374590384},{"_id":"public/2023/04/02/SingleChip/2023-04-02-02-04-46-image.png","hash":"76b60efcdb909622a52e2370f92b54a420e875c6","modified":1680374590384},{"_id":"public/2023/04/02/SingleChip/2023-04-02-02-04-59-image.png","hash":"76b60efcdb909622a52e2370f92b54a420e875c6","modified":1680374590384},{"_id":"public/2023/04/02/SingleChip/2023-04-02-02-05-40-image.png","hash":"76b60efcdb909622a52e2370f92b54a420e875c6","modified":1680374590384}],"Category":[],"Data":[],"Page":[{"title":"tags","date":"2023-03-18T12:47:51.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2023-03-18 20:47:51\ntype: tags\n---\n","updated":"2023-03-18T12:48:39.008Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clfl5dwpu0000qcu4ehq1bmvo","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"ET框架初步理解","date":"2023-03-20T11:42:31.000Z","_content":"\n**ET版本5.0**\n\n**项目文件与配置文件**\n\n* 前端\n  \n  ![](ET框架初步理解/4a45803c69ed8b7283f933aa6e1748973976ef4c.png)\n\n（关注）Bundles：制作的AssetBundles资源放在这个目录。\n\n（不关注）Editor：是自定义的一些unity编辑器中使用的一些扩展工具。\n\n<!--more-->\n\n（核心网络库）ET.Core：是ETCore框架的核心代码库，前后端相同并共用的。\n\n（当然关注）Model：是当前游戏项目本身的全部代码，是自己项目的代码。\n\n（不关注）Plugins：Unity生成的为游戏发布到各平台而准备的插件。\n\n（关注）Res：一些Config文本文件，FairyGUI导入的原始素材\n\n（不关注）Resources：游戏预制体目录\n\n（关注）Scenes：项目的场景文件\n\n（不关注）ThirdParty：需要用到的第三方C#调用库，mongo，Litjson，Google.Protobuf，FairyGUI\n\n* 后端\n  \n  ![](ET框架初步理解/7845ce3fdee147fca9d5c7fe4d86a890b717ecfe.png)\n\n（关注）App项目：ETCore网格框架的启动项目，里面只有一个Program.cs文件\n\n（关注）HotFix项目：后端的System与Handler代码，是我们项目后端主要的开发阵地，主要是调用ET.Core项目中的组件和类，来使用全部逻辑与同步请求及返回\n\n（关注）ET.Core项目：ETCore网络框架的核心组件与类，自己项目的功能组件与实体和其它类。\n\n   后端配置文件\n\n![](ET框架初步理解/6e285ffc782c8443b1070964510e9530573f6c2d.png)\n\n**重要知识点**\n\n* ETCore的使用\n\nUnity项目中，只需要要包含ET.Core项目（核心，与服务端代码一样），就能使用ET来进行网络请求与通信，Model项目中包含了少量现成提供可复用的组件，自己游戏的代码可以放在Model中，也可以另外创建一个项目引用ET.Core与Model即可。\n\n需要引用ThirdParty项目，这里有mongo,protobuf,fairgui这些第三方sdk。\n\n服务端项目中，系统逻辑与Handler都在Hotfix项目中编写，你自己项目的服务端代码主要在这里。后端ET.Core项目中可以加自己游戏的实体，组件，系统类。\n\nHandler是请求的响应，与功能逻辑实现的地方。System是组件的扩展方法，来帮助把需要的组件加入到系统的生命周期里（start,load,awake,update等）。\n\n消息指令与消息体在ET.Core项目中 \\ET.Core\\Module\\Message\\目录下。\n\n* Session使用\n\n用地址创建session \n\n远程地址：127.0.0.1:10002\n\n```C#\nSession sessionRealm = Game.Scene.GetComponent<NetOuterComponent>().Create(\"127.0.0.1:10002\");\nSession sessionRealm = Game.Scene.GetComponent<NetOuterComponent>().Create(GlobalConfigComponent.Instance.GlobalProto.Address);\n```\n\nGlobalConfigComponent.Instance.GlobalProto.Address就是配置文件中获取到像上面的远程地址。\n\n用IPEndPoint创建session \n\npublic IPEndPoint(long address, int port);\n\n```C#\nIPEndPoint realmIPEndPoint = new IPEndPoint(Int64.Parse(\"127.0.0.1\"),10002);\nSession realmSession = Game.Scene.GetComponent<NetOuterComponent>().Create(realmIPEndPoint);\n```\n\n不需要返回发送消息 session.Send\n\nSend方法的参数是一个消息体\n\n```C#\nrealmSession.Send(new A0004_PlayerOnline_G2R() { UserID = user.UserID, GateAppID = config.StartConfig.AppId });\n```\n\n发送请求获得返回 session.Call\n\nCall方法的参数是一个请求消息体，返回一个响应消息体\n\n```C#\nA1002_SetUserInfo_G2C SetUserInfo_Ack = (A1002_SetUserInfo_G2C)await SessionComponent.Instance.Session.Call(SetUserInfo_Req);\n```\n\n* 消息指令、消息体\n\n消息体，是把消息内容的不同字段构建一个消息体类型的实例，用实例属性来使用消息数据。\n\nET是先用数据构建消息体实例，把消息对象序列化为json或profobuf数据进行传送，收到消息再反序列化为消息对象在程序中使用。\n\n消息与handler命名参考举例：消息名需要先知道他是什么功能，再怎么往来。消息处理handler需要先知道从哪来，再是什么功能。方便开发时保持思路清晰。\n\n[功能表达]+[往来] ：GetUserInfo_C2G，GetUserInfo_G2C\n\n当然如果你更习惯统一：C2G_TestMessage\n\n如果是IActorMessage ：Actor_MatchSucess_M2G\n\n收到消息后处理handler ：M2G_MatchSucess_Handler\n\n认证服务Realm：R ，网关服务Gate：G，地图服务Map：M，客户端Client：C\n\n消息指令与消息体定义\n\nmessage C2G_TestMessage // IRequest\n\n请求名后面带上 // IRequest 这样生成的消息体就会继承IRequest\n\nmessage G2C_TestMessage // IResponse\n\n返回名后面带上 //IResponse 这样生成的消息体就会继承IResponse\n\n```Json\n//测试向服务器返回消息\nmessage G2C_TestMessage // IResponse\n{\n    int32 RpcId = 90;\n    int32 Error = 91;\n    string Message = 92;\n}\n```\n\nHotfixMessage.cs，HotfixOpcode.cs，InnerMessage.cs，InnerOpcode.cs，OuterMessage.cs，OuterOpcode.cs\n\n> InnerMessage：不同服务之间通信消息\n> \n> OuterMessage：前后端通信消息\n> \n> HotfixMessage：前后端通信消息，无热更的ETCore来说与OuterMessage没区别\n\n* 实体间Actor通信\n\n理解为什么要用actor通信：\n\nEntity.Id是实体的身份证号，instanceID是居住证号，实体instanceID是会换的，比如到了别的地图。actor系统会保存你的身份证和你在哪个地图的居住证。如果用居住证能找到你，就用instanceId把消息发给你了，如果找不到，就会用身份证找到你新的居住证，再把消息发给你。\n\n```C#\n //网关上的user实体是不是变动的，加消息组件，没有参数也没有AddLoaction()\n user.AddComponent<MailBoxComponent>();\n //session实体是客户端与网关的连接session，向此实体发消息，会转发到客户端，加消息组件带MailboxType.GateSession参数\n session.AddComponent<MailBoxComponent, string>(MailboxType.GateSession);\n //room,gamer实体会迁移地图，加消息组件有AddLoaction()\n room.AddComponent<MailBoxComponent>().AddLocation();\n newgamer.AddComponent<MailBoxComponent>().AddLocation();\n```\n\nET.Core事件\n\nHandler特性\n\n[MessageHandler(AppType.Gate)] \n\nUIFactory特性\n\n[UIFactory(FUIType.SetUserInfo)]\n\n创建实体或组件","source":"_posts/ET框架初步理解.md","raw":"---\ntitle: ET框架初步理解\ndate: 2023-03-20 19:42:31\ntags:\n\n---\n\n**ET版本5.0**\n\n**项目文件与配置文件**\n\n* 前端\n  \n  ![](ET框架初步理解/4a45803c69ed8b7283f933aa6e1748973976ef4c.png)\n\n（关注）Bundles：制作的AssetBundles资源放在这个目录。\n\n（不关注）Editor：是自定义的一些unity编辑器中使用的一些扩展工具。\n\n<!--more-->\n\n（核心网络库）ET.Core：是ETCore框架的核心代码库，前后端相同并共用的。\n\n（当然关注）Model：是当前游戏项目本身的全部代码，是自己项目的代码。\n\n（不关注）Plugins：Unity生成的为游戏发布到各平台而准备的插件。\n\n（关注）Res：一些Config文本文件，FairyGUI导入的原始素材\n\n（不关注）Resources：游戏预制体目录\n\n（关注）Scenes：项目的场景文件\n\n（不关注）ThirdParty：需要用到的第三方C#调用库，mongo，Litjson，Google.Protobuf，FairyGUI\n\n* 后端\n  \n  ![](ET框架初步理解/7845ce3fdee147fca9d5c7fe4d86a890b717ecfe.png)\n\n（关注）App项目：ETCore网格框架的启动项目，里面只有一个Program.cs文件\n\n（关注）HotFix项目：后端的System与Handler代码，是我们项目后端主要的开发阵地，主要是调用ET.Core项目中的组件和类，来使用全部逻辑与同步请求及返回\n\n（关注）ET.Core项目：ETCore网络框架的核心组件与类，自己项目的功能组件与实体和其它类。\n\n   后端配置文件\n\n![](ET框架初步理解/6e285ffc782c8443b1070964510e9530573f6c2d.png)\n\n**重要知识点**\n\n* ETCore的使用\n\nUnity项目中，只需要要包含ET.Core项目（核心，与服务端代码一样），就能使用ET来进行网络请求与通信，Model项目中包含了少量现成提供可复用的组件，自己游戏的代码可以放在Model中，也可以另外创建一个项目引用ET.Core与Model即可。\n\n需要引用ThirdParty项目，这里有mongo,protobuf,fairgui这些第三方sdk。\n\n服务端项目中，系统逻辑与Handler都在Hotfix项目中编写，你自己项目的服务端代码主要在这里。后端ET.Core项目中可以加自己游戏的实体，组件，系统类。\n\nHandler是请求的响应，与功能逻辑实现的地方。System是组件的扩展方法，来帮助把需要的组件加入到系统的生命周期里（start,load,awake,update等）。\n\n消息指令与消息体在ET.Core项目中 \\ET.Core\\Module\\Message\\目录下。\n\n* Session使用\n\n用地址创建session \n\n远程地址：127.0.0.1:10002\n\n```C#\nSession sessionRealm = Game.Scene.GetComponent<NetOuterComponent>().Create(\"127.0.0.1:10002\");\nSession sessionRealm = Game.Scene.GetComponent<NetOuterComponent>().Create(GlobalConfigComponent.Instance.GlobalProto.Address);\n```\n\nGlobalConfigComponent.Instance.GlobalProto.Address就是配置文件中获取到像上面的远程地址。\n\n用IPEndPoint创建session \n\npublic IPEndPoint(long address, int port);\n\n```C#\nIPEndPoint realmIPEndPoint = new IPEndPoint(Int64.Parse(\"127.0.0.1\"),10002);\nSession realmSession = Game.Scene.GetComponent<NetOuterComponent>().Create(realmIPEndPoint);\n```\n\n不需要返回发送消息 session.Send\n\nSend方法的参数是一个消息体\n\n```C#\nrealmSession.Send(new A0004_PlayerOnline_G2R() { UserID = user.UserID, GateAppID = config.StartConfig.AppId });\n```\n\n发送请求获得返回 session.Call\n\nCall方法的参数是一个请求消息体，返回一个响应消息体\n\n```C#\nA1002_SetUserInfo_G2C SetUserInfo_Ack = (A1002_SetUserInfo_G2C)await SessionComponent.Instance.Session.Call(SetUserInfo_Req);\n```\n\n* 消息指令、消息体\n\n消息体，是把消息内容的不同字段构建一个消息体类型的实例，用实例属性来使用消息数据。\n\nET是先用数据构建消息体实例，把消息对象序列化为json或profobuf数据进行传送，收到消息再反序列化为消息对象在程序中使用。\n\n消息与handler命名参考举例：消息名需要先知道他是什么功能，再怎么往来。消息处理handler需要先知道从哪来，再是什么功能。方便开发时保持思路清晰。\n\n[功能表达]+[往来] ：GetUserInfo_C2G，GetUserInfo_G2C\n\n当然如果你更习惯统一：C2G_TestMessage\n\n如果是IActorMessage ：Actor_MatchSucess_M2G\n\n收到消息后处理handler ：M2G_MatchSucess_Handler\n\n认证服务Realm：R ，网关服务Gate：G，地图服务Map：M，客户端Client：C\n\n消息指令与消息体定义\n\nmessage C2G_TestMessage // IRequest\n\n请求名后面带上 // IRequest 这样生成的消息体就会继承IRequest\n\nmessage G2C_TestMessage // IResponse\n\n返回名后面带上 //IResponse 这样生成的消息体就会继承IResponse\n\n```Json\n//测试向服务器返回消息\nmessage G2C_TestMessage // IResponse\n{\n    int32 RpcId = 90;\n    int32 Error = 91;\n    string Message = 92;\n}\n```\n\nHotfixMessage.cs，HotfixOpcode.cs，InnerMessage.cs，InnerOpcode.cs，OuterMessage.cs，OuterOpcode.cs\n\n> InnerMessage：不同服务之间通信消息\n> \n> OuterMessage：前后端通信消息\n> \n> HotfixMessage：前后端通信消息，无热更的ETCore来说与OuterMessage没区别\n\n* 实体间Actor通信\n\n理解为什么要用actor通信：\n\nEntity.Id是实体的身份证号，instanceID是居住证号，实体instanceID是会换的，比如到了别的地图。actor系统会保存你的身份证和你在哪个地图的居住证。如果用居住证能找到你，就用instanceId把消息发给你了，如果找不到，就会用身份证找到你新的居住证，再把消息发给你。\n\n```C#\n //网关上的user实体是不是变动的，加消息组件，没有参数也没有AddLoaction()\n user.AddComponent<MailBoxComponent>();\n //session实体是客户端与网关的连接session，向此实体发消息，会转发到客户端，加消息组件带MailboxType.GateSession参数\n session.AddComponent<MailBoxComponent, string>(MailboxType.GateSession);\n //room,gamer实体会迁移地图，加消息组件有AddLoaction()\n room.AddComponent<MailBoxComponent>().AddLocation();\n newgamer.AddComponent<MailBoxComponent>().AddLocation();\n```\n\nET.Core事件\n\nHandler特性\n\n[MessageHandler(AppType.Gate)] \n\nUIFactory特性\n\n[UIFactory(FUIType.SetUserInfo)]\n\n创建实体或组件","slug":"ET框架初步理解","published":1,"updated":"2023-03-23T13:26:35.998Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfl5dwpx0001qcu400eybjt7","content":"<p><strong>ET版本5.0</strong></p>\n<p><strong>项目文件与配置文件</strong></p>\n<ul>\n<li>前端<img src=\"/2023/03/20/ET%E6%A1%86%E6%9E%B6%E5%88%9D%E6%AD%A5%E7%90%86%E8%A7%A3/4a45803c69ed8b7283f933aa6e1748973976ef4c.png\"></li>\n</ul>\n<p>（关注）Bundles：制作的AssetBundles资源放在这个目录。</p>\n<p>（不关注）Editor：是自定义的一些unity编辑器中使用的一些扩展工具。</p>\n<span id=\"more\"></span>\n\n<p>（核心网络库）ET.Core：是ETCore框架的核心代码库，前后端相同并共用的。</p>\n<p>（当然关注）Model：是当前游戏项目本身的全部代码，是自己项目的代码。</p>\n<p>（不关注）Plugins：Unity生成的为游戏发布到各平台而准备的插件。</p>\n<p>（关注）Res：一些Config文本文件，FairyGUI导入的原始素材</p>\n<p>（不关注）Resources：游戏预制体目录</p>\n<p>（关注）Scenes：项目的场景文件</p>\n<p>（不关注）ThirdParty：需要用到的第三方C#调用库，mongo，Litjson，Google.Protobuf，FairyGUI</p>\n<ul>\n<li>后端<img src=\"/2023/03/20/ET%E6%A1%86%E6%9E%B6%E5%88%9D%E6%AD%A5%E7%90%86%E8%A7%A3/7845ce3fdee147fca9d5c7fe4d86a890b717ecfe.png\"></li>\n</ul>\n<p>（关注）App项目：ETCore网格框架的启动项目，里面只有一个Program.cs文件</p>\n<p>（关注）HotFix项目：后端的System与Handler代码，是我们项目后端主要的开发阵地，主要是调用ET.Core项目中的组件和类，来使用全部逻辑与同步请求及返回</p>\n<p>（关注）ET.Core项目：ETCore网络框架的核心组件与类，自己项目的功能组件与实体和其它类。</p>\n<p>   后端配置文件</p>\n<p><img src=\"/2023/03/20/ET%E6%A1%86%E6%9E%B6%E5%88%9D%E6%AD%A5%E7%90%86%E8%A7%A3/6e285ffc782c8443b1070964510e9530573f6c2d.png\"></p>\n<p><strong>重要知识点</strong></p>\n<ul>\n<li>ETCore的使用</li>\n</ul>\n<p>Unity项目中，只需要要包含ET.Core项目（核心，与服务端代码一样），就能使用ET来进行网络请求与通信，Model项目中包含了少量现成提供可复用的组件，自己游戏的代码可以放在Model中，也可以另外创建一个项目引用ET.Core与Model即可。</p>\n<p>需要引用ThirdParty项目，这里有mongo,protobuf,fairgui这些第三方sdk。</p>\n<p>服务端项目中，系统逻辑与Handler都在Hotfix项目中编写，你自己项目的服务端代码主要在这里。后端ET.Core项目中可以加自己游戏的实体，组件，系统类。</p>\n<p>Handler是请求的响应，与功能逻辑实现的地方。System是组件的扩展方法，来帮助把需要的组件加入到系统的生命周期里（start,load,awake,update等）。</p>\n<p>消息指令与消息体在ET.Core项目中 \\ET.Core\\Module\\Message\\目录下。</p>\n<ul>\n<li>Session使用</li>\n</ul>\n<p>用地址创建session </p>\n<p>远程地址：127.0.0.1:10002</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Session sessionRealm = Game.Scene.GetComponent&lt;NetOuterComponent&gt;().Create(<span class=\"string\">&quot;127.0.0.1:10002&quot;</span>);</span><br><span class=\"line\">Session sessionRealm = Game.Scene.GetComponent&lt;NetOuterComponent&gt;().Create(GlobalConfigComponent.Instance.GlobalProto.Address);</span><br></pre></td></tr></table></figure>\n\n<p>GlobalConfigComponent.Instance.GlobalProto.Address就是配置文件中获取到像上面的远程地址。</p>\n<p>用IPEndPoint创建session </p>\n<p>public IPEndPoint(long address, int port);</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IPEndPoint realmIPEndPoint = <span class=\"keyword\">new</span> IPEndPoint(Int64.Parse(<span class=\"string\">&quot;127.0.0.1&quot;</span>),<span class=\"number\">10002</span>);</span><br><span class=\"line\">Session realmSession = Game.Scene.GetComponent&lt;NetOuterComponent&gt;().Create(realmIPEndPoint);</span><br></pre></td></tr></table></figure>\n\n<p>不需要返回发送消息 session.Send</p>\n<p>Send方法的参数是一个消息体</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">realmSession.Send(<span class=\"keyword\">new</span> A0004_PlayerOnline_G2R() &#123; UserID = user.UserID, GateAppID = config.StartConfig.AppId &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>发送请求获得返回 session.Call</p>\n<p>Call方法的参数是一个请求消息体，返回一个响应消息体</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A1002_SetUserInfo_G2C SetUserInfo_Ack = (A1002_SetUserInfo_G2C)<span class=\"keyword\">await</span> SessionComponent.Instance.Session.Call(SetUserInfo_Req);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>消息指令、消息体</li>\n</ul>\n<p>消息体，是把消息内容的不同字段构建一个消息体类型的实例，用实例属性来使用消息数据。</p>\n<p>ET是先用数据构建消息体实例，把消息对象序列化为json或profobuf数据进行传送，收到消息再反序列化为消息对象在程序中使用。</p>\n<p>消息与handler命名参考举例：消息名需要先知道他是什么功能，再怎么往来。消息处理handler需要先知道从哪来，再是什么功能。方便开发时保持思路清晰。</p>\n<p>[功能表达]+[往来] ：GetUserInfo_C2G，GetUserInfo_G2C</p>\n<p>当然如果你更习惯统一：C2G_TestMessage</p>\n<p>如果是IActorMessage ：Actor_MatchSucess_M2G</p>\n<p>收到消息后处理handler ：M2G_MatchSucess_Handler</p>\n<p>认证服务Realm：R ，网关服务Gate：G，地图服务Map：M，客户端Client：C</p>\n<p>消息指令与消息体定义</p>\n<p>message C2G_TestMessage // IRequest</p>\n<p>请求名后面带上 // IRequest 这样生成的消息体就会继承IRequest</p>\n<p>message G2C_TestMessage // IResponse</p>\n<p>返回名后面带上 //IResponse 这样生成的消息体就会继承IResponse</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//测试向服务器返回消息</span></span><br><span class=\"line\">message G2C_TestMessage <span class=\"comment\">// IResponse</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    int32 RpcId = <span class=\"number\">90</span>;</span><br><span class=\"line\">    int32 Error = <span class=\"number\">91</span>;</span><br><span class=\"line\">    string Message = <span class=\"number\">92</span>;</span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>HotfixMessage.cs，HotfixOpcode.cs，InnerMessage.cs，InnerOpcode.cs，OuterMessage.cs，OuterOpcode.cs</p>\n<blockquote>\n<p>InnerMessage：不同服务之间通信消息</p>\n<p>OuterMessage：前后端通信消息</p>\n<p>HotfixMessage：前后端通信消息，无热更的ETCore来说与OuterMessage没区别</p>\n</blockquote>\n<ul>\n<li>实体间Actor通信</li>\n</ul>\n<p>理解为什么要用actor通信：</p>\n<p>Entity.Id是实体的身份证号，instanceID是居住证号，实体instanceID是会换的，比如到了别的地图。actor系统会保存你的身份证和你在哪个地图的居住证。如果用居住证能找到你，就用instanceId把消息发给你了，如果找不到，就会用身份证找到你新的居住证，再把消息发给你。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//网关上的user实体是不是变动的，加消息组件，没有参数也没有AddLoaction()</span></span><br><span class=\"line\">user.AddComponent&lt;MailBoxComponent&gt;();</span><br><span class=\"line\"><span class=\"comment\">//session实体是客户端与网关的连接session，向此实体发消息，会转发到客户端，加消息组件带MailboxType.GateSession参数</span></span><br><span class=\"line\">session.AddComponent&lt;MailBoxComponent, <span class=\"built_in\">string</span>&gt;(MailboxType.GateSession);</span><br><span class=\"line\"><span class=\"comment\">//room,gamer实体会迁移地图，加消息组件有AddLoaction()</span></span><br><span class=\"line\">room.AddComponent&lt;MailBoxComponent&gt;().AddLocation();</span><br><span class=\"line\">newgamer.AddComponent&lt;MailBoxComponent&gt;().AddLocation();</span><br></pre></td></tr></table></figure>\n\n<p>ET.Core事件</p>\n<p>Handler特性</p>\n<p>[MessageHandler(AppType.Gate)] </p>\n<p>UIFactory特性</p>\n<p>[UIFactory(FUIType.SetUserInfo)]</p>\n<p>创建实体或组件</p>\n","site":{"data":{}},"excerpt":"<p><strong>ET版本5.0</strong></p>\n<p><strong>项目文件与配置文件</strong></p>\n<ul>\n<li>前端<img src=\"/2023/03/20/ET%E6%A1%86%E6%9E%B6%E5%88%9D%E6%AD%A5%E7%90%86%E8%A7%A3/4a45803c69ed8b7283f933aa6e1748973976ef4c.png\"></li>\n</ul>\n<p>（关注）Bundles：制作的AssetBundles资源放在这个目录。</p>\n<p>（不关注）Editor：是自定义的一些unity编辑器中使用的一些扩展工具。</p>","more":"<p>（核心网络库）ET.Core：是ETCore框架的核心代码库，前后端相同并共用的。</p>\n<p>（当然关注）Model：是当前游戏项目本身的全部代码，是自己项目的代码。</p>\n<p>（不关注）Plugins：Unity生成的为游戏发布到各平台而准备的插件。</p>\n<p>（关注）Res：一些Config文本文件，FairyGUI导入的原始素材</p>\n<p>（不关注）Resources：游戏预制体目录</p>\n<p>（关注）Scenes：项目的场景文件</p>\n<p>（不关注）ThirdParty：需要用到的第三方C#调用库，mongo，Litjson，Google.Protobuf，FairyGUI</p>\n<ul>\n<li>后端<img src=\"/2023/03/20/ET%E6%A1%86%E6%9E%B6%E5%88%9D%E6%AD%A5%E7%90%86%E8%A7%A3/7845ce3fdee147fca9d5c7fe4d86a890b717ecfe.png\"></li>\n</ul>\n<p>（关注）App项目：ETCore网格框架的启动项目，里面只有一个Program.cs文件</p>\n<p>（关注）HotFix项目：后端的System与Handler代码，是我们项目后端主要的开发阵地，主要是调用ET.Core项目中的组件和类，来使用全部逻辑与同步请求及返回</p>\n<p>（关注）ET.Core项目：ETCore网络框架的核心组件与类，自己项目的功能组件与实体和其它类。</p>\n<p>   后端配置文件</p>\n<p><img src=\"/2023/03/20/ET%E6%A1%86%E6%9E%B6%E5%88%9D%E6%AD%A5%E7%90%86%E8%A7%A3/6e285ffc782c8443b1070964510e9530573f6c2d.png\"></p>\n<p><strong>重要知识点</strong></p>\n<ul>\n<li>ETCore的使用</li>\n</ul>\n<p>Unity项目中，只需要要包含ET.Core项目（核心，与服务端代码一样），就能使用ET来进行网络请求与通信，Model项目中包含了少量现成提供可复用的组件，自己游戏的代码可以放在Model中，也可以另外创建一个项目引用ET.Core与Model即可。</p>\n<p>需要引用ThirdParty项目，这里有mongo,protobuf,fairgui这些第三方sdk。</p>\n<p>服务端项目中，系统逻辑与Handler都在Hotfix项目中编写，你自己项目的服务端代码主要在这里。后端ET.Core项目中可以加自己游戏的实体，组件，系统类。</p>\n<p>Handler是请求的响应，与功能逻辑实现的地方。System是组件的扩展方法，来帮助把需要的组件加入到系统的生命周期里（start,load,awake,update等）。</p>\n<p>消息指令与消息体在ET.Core项目中 \\ET.Core\\Module\\Message\\目录下。</p>\n<ul>\n<li>Session使用</li>\n</ul>\n<p>用地址创建session </p>\n<p>远程地址：127.0.0.1:10002</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Session sessionRealm = Game.Scene.GetComponent&lt;NetOuterComponent&gt;().Create(<span class=\"string\">&quot;127.0.0.1:10002&quot;</span>);</span><br><span class=\"line\">Session sessionRealm = Game.Scene.GetComponent&lt;NetOuterComponent&gt;().Create(GlobalConfigComponent.Instance.GlobalProto.Address);</span><br></pre></td></tr></table></figure>\n\n<p>GlobalConfigComponent.Instance.GlobalProto.Address就是配置文件中获取到像上面的远程地址。</p>\n<p>用IPEndPoint创建session </p>\n<p>public IPEndPoint(long address, int port);</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IPEndPoint realmIPEndPoint = <span class=\"keyword\">new</span> IPEndPoint(Int64.Parse(<span class=\"string\">&quot;127.0.0.1&quot;</span>),<span class=\"number\">10002</span>);</span><br><span class=\"line\">Session realmSession = Game.Scene.GetComponent&lt;NetOuterComponent&gt;().Create(realmIPEndPoint);</span><br></pre></td></tr></table></figure>\n\n<p>不需要返回发送消息 session.Send</p>\n<p>Send方法的参数是一个消息体</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">realmSession.Send(<span class=\"keyword\">new</span> A0004_PlayerOnline_G2R() &#123; UserID = user.UserID, GateAppID = config.StartConfig.AppId &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>发送请求获得返回 session.Call</p>\n<p>Call方法的参数是一个请求消息体，返回一个响应消息体</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A1002_SetUserInfo_G2C SetUserInfo_Ack = (A1002_SetUserInfo_G2C)<span class=\"keyword\">await</span> SessionComponent.Instance.Session.Call(SetUserInfo_Req);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>消息指令、消息体</li>\n</ul>\n<p>消息体，是把消息内容的不同字段构建一个消息体类型的实例，用实例属性来使用消息数据。</p>\n<p>ET是先用数据构建消息体实例，把消息对象序列化为json或profobuf数据进行传送，收到消息再反序列化为消息对象在程序中使用。</p>\n<p>消息与handler命名参考举例：消息名需要先知道他是什么功能，再怎么往来。消息处理handler需要先知道从哪来，再是什么功能。方便开发时保持思路清晰。</p>\n<p>[功能表达]+[往来] ：GetUserInfo_C2G，GetUserInfo_G2C</p>\n<p>当然如果你更习惯统一：C2G_TestMessage</p>\n<p>如果是IActorMessage ：Actor_MatchSucess_M2G</p>\n<p>收到消息后处理handler ：M2G_MatchSucess_Handler</p>\n<p>认证服务Realm：R ，网关服务Gate：G，地图服务Map：M，客户端Client：C</p>\n<p>消息指令与消息体定义</p>\n<p>message C2G_TestMessage // IRequest</p>\n<p>请求名后面带上 // IRequest 这样生成的消息体就会继承IRequest</p>\n<p>message G2C_TestMessage // IResponse</p>\n<p>返回名后面带上 //IResponse 这样生成的消息体就会继承IResponse</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//测试向服务器返回消息</span></span><br><span class=\"line\">message G2C_TestMessage <span class=\"comment\">// IResponse</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    int32 RpcId = <span class=\"number\">90</span>;</span><br><span class=\"line\">    int32 Error = <span class=\"number\">91</span>;</span><br><span class=\"line\">    string Message = <span class=\"number\">92</span>;</span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>HotfixMessage.cs，HotfixOpcode.cs，InnerMessage.cs，InnerOpcode.cs，OuterMessage.cs，OuterOpcode.cs</p>\n<blockquote>\n<p>InnerMessage：不同服务之间通信消息</p>\n<p>OuterMessage：前后端通信消息</p>\n<p>HotfixMessage：前后端通信消息，无热更的ETCore来说与OuterMessage没区别</p>\n</blockquote>\n<ul>\n<li>实体间Actor通信</li>\n</ul>\n<p>理解为什么要用actor通信：</p>\n<p>Entity.Id是实体的身份证号，instanceID是居住证号，实体instanceID是会换的，比如到了别的地图。actor系统会保存你的身份证和你在哪个地图的居住证。如果用居住证能找到你，就用instanceId把消息发给你了，如果找不到，就会用身份证找到你新的居住证，再把消息发给你。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//网关上的user实体是不是变动的，加消息组件，没有参数也没有AddLoaction()</span></span><br><span class=\"line\">user.AddComponent&lt;MailBoxComponent&gt;();</span><br><span class=\"line\"><span class=\"comment\">//session实体是客户端与网关的连接session，向此实体发消息，会转发到客户端，加消息组件带MailboxType.GateSession参数</span></span><br><span class=\"line\">session.AddComponent&lt;MailBoxComponent, <span class=\"built_in\">string</span>&gt;(MailboxType.GateSession);</span><br><span class=\"line\"><span class=\"comment\">//room,gamer实体会迁移地图，加消息组件有AddLoaction()</span></span><br><span class=\"line\">room.AddComponent&lt;MailBoxComponent&gt;().AddLocation();</span><br><span class=\"line\">newgamer.AddComponent&lt;MailBoxComponent&gt;().AddLocation();</span><br></pre></td></tr></table></figure>\n\n<p>ET.Core事件</p>\n<p>Handler特性</p>\n<p>[MessageHandler(AppType.Gate)] </p>\n<p>UIFactory特性</p>\n<p>[UIFactory(FUIType.SetUserInfo)]</p>\n<p>创建实体或组件</p>"},{"title":"ET框架TulipBubble实现逻辑","date":"2023-03-23T11:54:39.000Z","_content":"\n* **登录注册逻辑**\n  \n  * UI\n    \n    有关脚本\n    \n    > UIEventType.cs\n    > \n    > TulipLobbyFactory.cs\n    > \n    > TulipLobbyComponent.cs\n    \n    UIEventType.cs：注册创建UI的事件去调用TulipLobbyFactory\n    \n    TulipLobbyFactory.cs：创建UI的事件给UI添加TulipLobbyComponent组件\n    \n    TulipLobbyComponent.cs：获取UI中的信息，给登录/注册按钮添加事件\n  \n  <!--more-->\n  \n  * 网络\n    \n    <img title=\"\" src=\"ET框架TulipBubble实现逻辑/2023-03-23-21-05-52-image.png\" alt=\"\" data-align=\"center\">\n    \n    有关脚本\n    \n    > - 前端\n    >   \n    >   TulipHelper.cs\n    > \n    > - 后端\n    >   \n    >   - Realm\n    >     \n    >     A0002_LoginHandler.cs\n    >     \n    >     A0001_RegisterHandler.cs\n    >   \n    >   - Gate\n    >     \n    >     A0006_GetLoginKey.cs\n    >     \n    >     A0003_LoginGateHandler.cs\n\n    TulipHelper.cs：不多说，向Realm发送登录{account,password}和注册请求{account,password}；发送登录后接收到Realm服的Gate服ip地址和Key后向Gate服发送登录请求{key}\n    \n      <br/>\n    \n    A0002_LoginHandler.cs：\n    \n    > 接收C登录请求{account,password}\n    > \n    > 判断账号密码是否合法\n    > \n    > 如果合法发给G{UserId}请求Key\n    > \n    > 回复C{GateIP,Key}\n    \n    \n    \n    A0006_GetLoginKey.cs：\n    \n    > 接收R{UserID}\n    > \n    > 利用UserID在SeesionKeyComponent中绑定UserId和Key\n    > \n    > 回复R{Key}\n    \n    \n    \n    A0001_RegisterHandler.cs:\n    \n    > 接收C注册请求{account,password}\n    > \n    > 判断账号是否合法\n    > \n    > 如果合法将AccountInfo和UserInfo保存到数据库\n    > \n    > 回复C{注册成功}\n    \n    \n    \n    A0003_LoginGateHandler.cs：\n    \n    > 接收C登录请求{key}\n    > \n    > 验证Key合法性\n    > \n    > 如果合法将UserId和Key解绑\n    > \n    > 使用UserId创建User\n    > \n    > 添加User到UserComponent\n    > \n    > Session添加SessionUserComponent 绑定Seession和User\n    > \n    > Session添加MailBoxComponent 通过MailBox进行actor通信\n    > \n    > 设置User的参数GateAppID，GateSessionID，ActorID\n    > \n    > 回复C{UserID}\n","source":"_posts/ET框架TulipBubble实现逻辑.md","raw":"---\ntitle: ET框架TulipBubble实现逻辑\ndate: 2023-03-23 19:54:39\ntags: \n---\n\n* **登录注册逻辑**\n  \n  * UI\n    \n    有关脚本\n    \n    > UIEventType.cs\n    > \n    > TulipLobbyFactory.cs\n    > \n    > TulipLobbyComponent.cs\n    \n    UIEventType.cs：注册创建UI的事件去调用TulipLobbyFactory\n    \n    TulipLobbyFactory.cs：创建UI的事件给UI添加TulipLobbyComponent组件\n    \n    TulipLobbyComponent.cs：获取UI中的信息，给登录/注册按钮添加事件\n  \n  <!--more-->\n  \n  * 网络\n    \n    <img title=\"\" src=\"ET框架TulipBubble实现逻辑/2023-03-23-21-05-52-image.png\" alt=\"\" data-align=\"center\">\n    \n    有关脚本\n    \n    > - 前端\n    >   \n    >   TulipHelper.cs\n    > \n    > - 后端\n    >   \n    >   - Realm\n    >     \n    >     A0002_LoginHandler.cs\n    >     \n    >     A0001_RegisterHandler.cs\n    >   \n    >   - Gate\n    >     \n    >     A0006_GetLoginKey.cs\n    >     \n    >     A0003_LoginGateHandler.cs\n\n    TulipHelper.cs：不多说，向Realm发送登录{account,password}和注册请求{account,password}；发送登录后接收到Realm服的Gate服ip地址和Key后向Gate服发送登录请求{key}\n    \n      <br/>\n    \n    A0002_LoginHandler.cs：\n    \n    > 接收C登录请求{account,password}\n    > \n    > 判断账号密码是否合法\n    > \n    > 如果合法发给G{UserId}请求Key\n    > \n    > 回复C{GateIP,Key}\n    \n    \n    \n    A0006_GetLoginKey.cs：\n    \n    > 接收R{UserID}\n    > \n    > 利用UserID在SeesionKeyComponent中绑定UserId和Key\n    > \n    > 回复R{Key}\n    \n    \n    \n    A0001_RegisterHandler.cs:\n    \n    > 接收C注册请求{account,password}\n    > \n    > 判断账号是否合法\n    > \n    > 如果合法将AccountInfo和UserInfo保存到数据库\n    > \n    > 回复C{注册成功}\n    \n    \n    \n    A0003_LoginGateHandler.cs：\n    \n    > 接收C登录请求{key}\n    > \n    > 验证Key合法性\n    > \n    > 如果合法将UserId和Key解绑\n    > \n    > 使用UserId创建User\n    > \n    > 添加User到UserComponent\n    > \n    > Session添加SessionUserComponent 绑定Seession和User\n    > \n    > Session添加MailBoxComponent 通过MailBox进行actor通信\n    > \n    > 设置User的参数GateAppID，GateSessionID，ActorID\n    > \n    > 回复C{UserID}\n","slug":"ET框架TulipBubble实现逻辑","published":1,"updated":"2023-03-23T13:26:44.861Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfl5dwq00002qcu4g7y08ciw","content":"<ul>\n<li><p><strong>登录注册逻辑</strong></p>\n<ul>\n<li>UI有关脚本<blockquote>\n<p>UIEventType.cs</p>\n<p>TulipLobbyFactory.cs</p>\n<p>TulipLobbyComponent.cs</p>\n</blockquote>\nUIEventType.cs：注册创建UI的事件去调用TulipLobbyFactoryTulipLobbyFactory.cs：创建UI的事件给UI添加TulipLobbyComponent组件TulipLobbyComponent.cs：获取UI中的信息，给登录/注册按钮添加事件</li>\n</ul>\n<span id=\"more\"></span>\n\n<ul>\n<li><p>网络</p>\n<img title src=\"/2023/03/23/ET%E6%A1%86%E6%9E%B6TulipBubble%E5%AE%9E%E7%8E%B0%E9%80%BB%E8%BE%91/2023-03-23-21-05-52-image.png\" alt data-align=\"center\">\n\n<p>有关脚本</p>\n<blockquote>\n<ul>\n<li><p>前端</p>\n<p>TulipHelper.cs</p>\n</li>\n<li><p>后端</p>\n<ul>\n<li><p>Realm</p>\n<p>A0002_LoginHandler.cs</p>\n<p>A0001_RegisterHandler.cs</p>\n</li>\n<li><p>Gate</p>\n<p>A0006_GetLoginKey.cs</p>\n<p>A0003_LoginGateHandler.cs</p>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>TulipHelper.cs：不多说，向Realm发送登录{account,password}和注册请求{account,password}；发送登录后接收到Realm服的Gate服ip地址和Key后向Gate服发送登录请求{key}</p>\n  <br>\n\n<p>A0002_LoginHandler.cs：</p>\n<blockquote>\n<p>接收C登录请求{account,password}</p>\n<p>判断账号密码是否合法</p>\n<p>如果合法发给G{UserId}请求Key</p>\n<p>回复C{GateIP,Key}</p>\n</blockquote>\n<p>A0006_GetLoginKey.cs：</p>\n<blockquote>\n<p>接收R{UserID}</p>\n<p>利用UserID在SeesionKeyComponent中绑定UserId和Key</p>\n<p>回复R{Key}</p>\n</blockquote>\n<p>A0001_RegisterHandler.cs:</p>\n<blockquote>\n<p>接收C注册请求{account,password}</p>\n<p>判断账号是否合法</p>\n<p>如果合法将AccountInfo和UserInfo保存到数据库</p>\n<p>回复C{注册成功}</p>\n</blockquote>\n<p>A0003_LoginGateHandler.cs：</p>\n<blockquote>\n<p>接收C登录请求{key}</p>\n<p>验证Key合法性</p>\n<p>如果合法将UserId和Key解绑</p>\n<p>使用UserId创建User</p>\n<p>添加User到UserComponent</p>\n<p>Session添加SessionUserComponent 绑定Seession和User</p>\n<p>Session添加MailBoxComponent 通过MailBox进行actor通信</p>\n<p>设置User的参数GateAppID，GateSessionID，ActorID</p>\n<p>回复C{UserID}</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<ul>\n<li><p><strong>登录注册逻辑</strong></p>\n<ul>\n<li>UI有关脚本<blockquote>\n<p>UIEventType.cs</p>\n<p>TulipLobbyFactory.cs</p>\n<p>TulipLobbyComponent.cs</p>\n</blockquote>\nUIEventType.cs：注册创建UI的事件去调用TulipLobbyFactoryTulipLobbyFactory.cs：创建UI的事件给UI添加TulipLobbyComponent组件TulipLobbyComponent.cs：获取UI中的信息，给登录/注册按钮添加事件</li>\n</ul></li></ul>","more":"<ul>\n<li><p>网络</p>\n<img title src=\"/2023/03/23/ET%E6%A1%86%E6%9E%B6TulipBubble%E5%AE%9E%E7%8E%B0%E9%80%BB%E8%BE%91/2023-03-23-21-05-52-image.png\" alt data-align=\"center\">\n\n<p>有关脚本</p>\n<blockquote>\n<ul>\n<li><p>前端</p>\n<p>TulipHelper.cs</p>\n</li>\n<li><p>后端</p>\n<ul>\n<li><p>Realm</p>\n<p>A0002_LoginHandler.cs</p>\n<p>A0001_RegisterHandler.cs</p>\n</li>\n<li><p>Gate</p>\n<p>A0006_GetLoginKey.cs</p>\n<p>A0003_LoginGateHandler.cs</p>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>TulipHelper.cs：不多说，向Realm发送登录{account,password}和注册请求{account,password}；发送登录后接收到Realm服的Gate服ip地址和Key后向Gate服发送登录请求{key}</p>\n  <br>\n\n<p>A0002_LoginHandler.cs：</p>\n<blockquote>\n<p>接收C登录请求{account,password}</p>\n<p>判断账号密码是否合法</p>\n<p>如果合法发给G{UserId}请求Key</p>\n<p>回复C{GateIP,Key}</p>\n</blockquote>\n<p>A0006_GetLoginKey.cs：</p>\n<blockquote>\n<p>接收R{UserID}</p>\n<p>利用UserID在SeesionKeyComponent中绑定UserId和Key</p>\n<p>回复R{Key}</p>\n</blockquote>\n<p>A0001_RegisterHandler.cs:</p>\n<blockquote>\n<p>接收C注册请求{account,password}</p>\n<p>判断账号是否合法</p>\n<p>如果合法将AccountInfo和UserInfo保存到数据库</p>\n<p>回复C{注册成功}</p>\n</blockquote>\n<p>A0003_LoginGateHandler.cs：</p>\n<blockquote>\n<p>接收C登录请求{key}</p>\n<p>验证Key合法性</p>\n<p>如果合法将UserId和Key解绑</p>\n<p>使用UserId创建User</p>\n<p>添加User到UserComponent</p>\n<p>Session添加SessionUserComponent 绑定Seession和User</p>\n<p>Session添加MailBoxComponent 通过MailBox进行actor通信</p>\n<p>设置User的参数GateAppID，GateSessionID，ActorID</p>\n<p>回复C{UserID}</p>\n</blockquote>\n</li>\n</ul>\n\n"},{"title":"Github使用","date":"2023-03-16T11:33:42.000Z","_content":"\n![](Github使用/fc261c3347d67a16ae3d5eef1b72182071954565.png)\n\n**常用的命令**\n\n1. 克隆仓库\n   \n   ```bash\n   $ git clone <repo> <directory>\n   ```\n   \n   * repo:Git 仓库\n   \n   * directory:本地目录\n\n<!-- more -->\n\n* 初始化仓库\n  \n  ```bash\n  $ git init <directory>\n  ```\n  \n  * directory:本地目录\n\n* 查看仓库状态\n  \n  ```bash\n  $ git status\n  ```\n\n* 添加文件\n  \n  ```bash\n  $ git add [file1] [file2] ...\n  $ git add [dir]\n  ```\n  \n  * file:文件\n  * dir:文件夹\n\n* 删除文件\n  \n  ```bash\n  $ git rm [-f | --force] [-n] [-r] [--cached] [--ignore-unmatch] [--quiet] [--pathspec-from-file=<file> [--pathspec-file-nul]] [--] [<pathspec>…​]\n  ```\n  \n  * f:覆盖最新的检测\n  * n/dry-run:不在硬盘上删除文件，只在仓库中删除文件\n  * r:递归删除文件夹\n  * cached:使用此选项仅从索引中取消和删除路径。工作树文件，无论是否修改，都将保持不变\n  * ignore-unmatch:即使没有匹配的文件，也会以0状态退出\n  * q/quiet:不打印输出\n  * pathspec:要删除的文件\n\n* 移动文件\n  \n  ```bash\n  $ git mv [-v] [-f] [-n] [-k] <source> <destination>\n  $ git mv [-v] [-f] [-n] [-k] <source> ... <destination directory>\n  ```\n  \n  * v/verbose:打印被移除文件的名称\n  * f/force:强制覆盖目标文件\n  * n/dry-run:只说明会做什么\n  * k:跳过重命名\n\n* 比较状态\n  \n  ```bash\n  $ git diff [file] 显示暂存区和工作区的差异\n  $ git diff --cached/staged [file] 显示暂存区和上一次提交(commit)的差异\n  $ git diff [first-branch]...[second-branch]\n  ```\n\n* 提交命令\n  \n  ```bash\n  $ git commit -m [message]\n  ```\n  \n  * message：可以是一些备注信息。\n\n* 回退版本\n  \n  ```bash\n  $ git reset [--soft | --mixed | --hard] [HEAD]\n  ```\n  \n  * mixed：为默认，可以不用带该参数，用于重置暂存区的文件与上一次的提交(commit)保持一致，工作区文件内容保持不变\n  * soft 参数用于回退到某个版本\n  * hard 参数撤销工作区中所有未提交的修改内容，将暂存区与工作区都回到上一次版本，并删除之前的所有信息提交\n\n* 分支相关\n  \n  ```bash\n  \\#列出本地所有分支\n  git branch\n  \\#列出所有远程分支\n  git branch -r\n  \\#新建一个分支，但依然停留在当前分支\n  git branch 分支名\n  \\#新建一个分支，并切换到该分支\n  git checkout -b 分支名\n  \\#合并指定分支到当前分支\n  git merge 分支名\n  \\#删除分支\n  git branch -d 分支名\n  \\#删除远程分支\n  git push origin --delete 分支名\n  git branch -dr 分支名\n  ```\n\n**提交代码**\n\n![](Github使用/86324066a24e3eb32af8305f91c0a064582ae9d5.png)\n\n向Github提交代码的两种情况\n\n1. 本地没有 Git 仓库，将远程仓库clone到本地\n   \n    通过clone命令创建的本地仓库，其本身就是一个 Git 仓库了，不用我们再进行\n    init初始化操作啦，而且自动关联远程仓库。我们只需要在这个仓库进行修改或者\n    添加等操作，然后commit即可。\n   \n   ```bash\n   $ git clone \"仓库地址\"\n   $ git push origin main\n   ```\n\n2. 本地有 Git 仓库，并且我们已经进行了多次commit操作\n   \n    进入仓库,关联远程仓库，origin为远程仓库的名字\n   \n   ```bash\n   $ git remote add origin 仓库地址\n   ```\n   \n    同步远程仓库和本地仓库\n   \n   ```bash\n   $ git pull origin main\n   ```\n   \n   强调:在向远程仓库提交代码的时候，一定要先进行pull操作，再进行push操作，防止本地仓库与远程仓库不同步导致冲突的问题，尤其是第二种提交代码的情况，很容易就出现问题。\n\n**实际使用**\n\n转载自[原文](https://blog.csdn.net/nrsc272420199/article/details/85219097)\n1.远程仓库只有一个master分支的情况\n   需要用到的命令\n\n```bash\ngit pull----------------从远程仓库拉取代码到本地\ngit stash---------------将你修改后的代码存储到本地(一个栈结构)-->一般会在git pull码失败时使用\ngit stash pop-----------将你stash到本地的代码与重新git pull下的代码合并\ngit add XXX-------------将XXX文件加入到暂存区\ngit commit -m \"注释\"----将暂存区的文件提交到本地仓库\ngit push----------------将本地仓库的内容推送到远程仓库\n```\n\n2. 实际场景\n   假设开发者A和开发者B都刚刚从远程仓库checkout了一份代码到本地.\n\nA:\n首先开发者A在README.md文件中进行了如下修改:\n\n![](Github使用/3aa70b0531dc3e2625c09c1ef8eac0078a29f54e.png)然后将修改内容按照如下方式提交到远程仓库:\n![](Github使用/265bf46b38778fb7476094dda85d00debb635e85.png)\n\nB:\n ![](Github使用/5a1f2bfbce2c6557b2d3442934c0a92b8a606944.png)  开发者B此时也要开发代码了,正常来讲,如果开发者B在开发完一个功能需要提交代码之前,肯定要git pull一下代码.比如说开发者B在README.md的第三行里增加了一句话,然后他去git pull代码,结果如下:\n\n**★注意点1★–git监控变化的单位是文件**\n   我不知道大家在这里会不会疑惑,反正我疑惑过很久,明明我在Git Bash里改动的是第二行,在Idea里改动的是第三行,不是说git监测的是变化吗?这里怎么就pull不下来呢?其实git所谓的监控变化,监控的单位是文件,也就是说假如其他开发者改动了XXX文件,并且同步到远程库了,你即使在XXX文件里改动了一个标点,加了一个空格,都无法pull成功.\n   git pull不成功时,你就需要使用git stash命令了,具体解决方式如下:\n\n![](Github使用/578439ae227066f02d1319f645f09b0567c46bd6.png)\n\n![](Github使用/62a3a7a6fbde2da426ced06d782dbd6ee43fb5c4.png)\n\n**★注意点2★–git pull可以把所有你上次push后没操作的文件pull下来**\nA:\n  接着上面的栗子,假设Git Bash用户同步了服务端的代码,并且在没跟IDEA用户商量的情况下,擅自修改了IDEA用户的代码,如下:\n\n![](Github使用/2ac963f71072ecd1cc7f56f9153107153b737a36.png)\n![](Github使用/c96a2283efc6cc31030410ff42e59ac41209443a.png)  并且Git Bash用户还创建了一个新的文件,如下:\n\nB:\n  开发者B如果没有进行开发,或者进行了其他文件的开发,而未对README.md文件进行操作,直接git pull,效果见下图.可以发现,git pull可以把所有你上次push后没操作的文件pull下来,并将你本地的代码变成和远程仓库一样的代码.\n\n![](Github使用/51204e17ea43f7a1992ea9abbf9ecb48768694fa.png)所以奉在pull代码的时候一定要多注意看一下代码有没有被改动过.\n\n3.使用idea的Update Project代替git pull + git stash +git stash pop\n\n![](Github使用/5ea18123f9a50a08ca1fd5562c479b4aa184a2e4.png)然后点击一下OK,就会弹出如下页面:\n\n![](Github使用/6aa5405ba7ffbe9c8760c5891854c1041e688d10.png)   然后双击一下有冲突的文件之后,就会弹出如下页面,自我感觉在这个界面里进行冲突解决,要比注意点1中第一个图,那种解决方式爽一些.\n\n![](Github使用/7e1e6ca628c6bcc92afce94e8ce7a0cd9a491ac1.png)并且解决完冲突后,立刻会弹出如下提示:\n\n![](Github使用/089c68368fd64dc9463fcbb493992b46998e45ad.png)点开提示之后,你就可以看到哪些文件修改了,哪些文件是新增的,而且你肯定会想去看看你原来操作过的文件有没有被updated过,从而避免注意点2中提到的情况.\n![{% asset_img practice12.png git图解 %}](Github使用/dfd1bcd4b5e9efbe1d7e8d52c289e292c4bd2b04.png)\n\n**git merge 相关**\n\n1. 在分支之后未对代码修改\n   \n   ![](Github使用/c81d9e95a6974e43bb3d62b5ce7029b0c535f29d.png)\n\n2. 在分支之对代码修改\n   \n   ![](Github使用/69a4adad5fa74c60aa7fdd3ac358f9bb718b3b4b.png)\n","source":"_posts/Github使用.md","raw":"---\ntitle: Github使用\ndate: 2023-03-16 19:33:42\ntags:\n---\n\n![](Github使用/fc261c3347d67a16ae3d5eef1b72182071954565.png)\n\n**常用的命令**\n\n1. 克隆仓库\n   \n   ```bash\n   $ git clone <repo> <directory>\n   ```\n   \n   * repo:Git 仓库\n   \n   * directory:本地目录\n\n<!-- more -->\n\n* 初始化仓库\n  \n  ```bash\n  $ git init <directory>\n  ```\n  \n  * directory:本地目录\n\n* 查看仓库状态\n  \n  ```bash\n  $ git status\n  ```\n\n* 添加文件\n  \n  ```bash\n  $ git add [file1] [file2] ...\n  $ git add [dir]\n  ```\n  \n  * file:文件\n  * dir:文件夹\n\n* 删除文件\n  \n  ```bash\n  $ git rm [-f | --force] [-n] [-r] [--cached] [--ignore-unmatch] [--quiet] [--pathspec-from-file=<file> [--pathspec-file-nul]] [--] [<pathspec>…​]\n  ```\n  \n  * f:覆盖最新的检测\n  * n/dry-run:不在硬盘上删除文件，只在仓库中删除文件\n  * r:递归删除文件夹\n  * cached:使用此选项仅从索引中取消和删除路径。工作树文件，无论是否修改，都将保持不变\n  * ignore-unmatch:即使没有匹配的文件，也会以0状态退出\n  * q/quiet:不打印输出\n  * pathspec:要删除的文件\n\n* 移动文件\n  \n  ```bash\n  $ git mv [-v] [-f] [-n] [-k] <source> <destination>\n  $ git mv [-v] [-f] [-n] [-k] <source> ... <destination directory>\n  ```\n  \n  * v/verbose:打印被移除文件的名称\n  * f/force:强制覆盖目标文件\n  * n/dry-run:只说明会做什么\n  * k:跳过重命名\n\n* 比较状态\n  \n  ```bash\n  $ git diff [file] 显示暂存区和工作区的差异\n  $ git diff --cached/staged [file] 显示暂存区和上一次提交(commit)的差异\n  $ git diff [first-branch]...[second-branch]\n  ```\n\n* 提交命令\n  \n  ```bash\n  $ git commit -m [message]\n  ```\n  \n  * message：可以是一些备注信息。\n\n* 回退版本\n  \n  ```bash\n  $ git reset [--soft | --mixed | --hard] [HEAD]\n  ```\n  \n  * mixed：为默认，可以不用带该参数，用于重置暂存区的文件与上一次的提交(commit)保持一致，工作区文件内容保持不变\n  * soft 参数用于回退到某个版本\n  * hard 参数撤销工作区中所有未提交的修改内容，将暂存区与工作区都回到上一次版本，并删除之前的所有信息提交\n\n* 分支相关\n  \n  ```bash\n  \\#列出本地所有分支\n  git branch\n  \\#列出所有远程分支\n  git branch -r\n  \\#新建一个分支，但依然停留在当前分支\n  git branch 分支名\n  \\#新建一个分支，并切换到该分支\n  git checkout -b 分支名\n  \\#合并指定分支到当前分支\n  git merge 分支名\n  \\#删除分支\n  git branch -d 分支名\n  \\#删除远程分支\n  git push origin --delete 分支名\n  git branch -dr 分支名\n  ```\n\n**提交代码**\n\n![](Github使用/86324066a24e3eb32af8305f91c0a064582ae9d5.png)\n\n向Github提交代码的两种情况\n\n1. 本地没有 Git 仓库，将远程仓库clone到本地\n   \n    通过clone命令创建的本地仓库，其本身就是一个 Git 仓库了，不用我们再进行\n    init初始化操作啦，而且自动关联远程仓库。我们只需要在这个仓库进行修改或者\n    添加等操作，然后commit即可。\n   \n   ```bash\n   $ git clone \"仓库地址\"\n   $ git push origin main\n   ```\n\n2. 本地有 Git 仓库，并且我们已经进行了多次commit操作\n   \n    进入仓库,关联远程仓库，origin为远程仓库的名字\n   \n   ```bash\n   $ git remote add origin 仓库地址\n   ```\n   \n    同步远程仓库和本地仓库\n   \n   ```bash\n   $ git pull origin main\n   ```\n   \n   强调:在向远程仓库提交代码的时候，一定要先进行pull操作，再进行push操作，防止本地仓库与远程仓库不同步导致冲突的问题，尤其是第二种提交代码的情况，很容易就出现问题。\n\n**实际使用**\n\n转载自[原文](https://blog.csdn.net/nrsc272420199/article/details/85219097)\n1.远程仓库只有一个master分支的情况\n   需要用到的命令\n\n```bash\ngit pull----------------从远程仓库拉取代码到本地\ngit stash---------------将你修改后的代码存储到本地(一个栈结构)-->一般会在git pull码失败时使用\ngit stash pop-----------将你stash到本地的代码与重新git pull下的代码合并\ngit add XXX-------------将XXX文件加入到暂存区\ngit commit -m \"注释\"----将暂存区的文件提交到本地仓库\ngit push----------------将本地仓库的内容推送到远程仓库\n```\n\n2. 实际场景\n   假设开发者A和开发者B都刚刚从远程仓库checkout了一份代码到本地.\n\nA:\n首先开发者A在README.md文件中进行了如下修改:\n\n![](Github使用/3aa70b0531dc3e2625c09c1ef8eac0078a29f54e.png)然后将修改内容按照如下方式提交到远程仓库:\n![](Github使用/265bf46b38778fb7476094dda85d00debb635e85.png)\n\nB:\n ![](Github使用/5a1f2bfbce2c6557b2d3442934c0a92b8a606944.png)  开发者B此时也要开发代码了,正常来讲,如果开发者B在开发完一个功能需要提交代码之前,肯定要git pull一下代码.比如说开发者B在README.md的第三行里增加了一句话,然后他去git pull代码,结果如下:\n\n**★注意点1★–git监控变化的单位是文件**\n   我不知道大家在这里会不会疑惑,反正我疑惑过很久,明明我在Git Bash里改动的是第二行,在Idea里改动的是第三行,不是说git监测的是变化吗?这里怎么就pull不下来呢?其实git所谓的监控变化,监控的单位是文件,也就是说假如其他开发者改动了XXX文件,并且同步到远程库了,你即使在XXX文件里改动了一个标点,加了一个空格,都无法pull成功.\n   git pull不成功时,你就需要使用git stash命令了,具体解决方式如下:\n\n![](Github使用/578439ae227066f02d1319f645f09b0567c46bd6.png)\n\n![](Github使用/62a3a7a6fbde2da426ced06d782dbd6ee43fb5c4.png)\n\n**★注意点2★–git pull可以把所有你上次push后没操作的文件pull下来**\nA:\n  接着上面的栗子,假设Git Bash用户同步了服务端的代码,并且在没跟IDEA用户商量的情况下,擅自修改了IDEA用户的代码,如下:\n\n![](Github使用/2ac963f71072ecd1cc7f56f9153107153b737a36.png)\n![](Github使用/c96a2283efc6cc31030410ff42e59ac41209443a.png)  并且Git Bash用户还创建了一个新的文件,如下:\n\nB:\n  开发者B如果没有进行开发,或者进行了其他文件的开发,而未对README.md文件进行操作,直接git pull,效果见下图.可以发现,git pull可以把所有你上次push后没操作的文件pull下来,并将你本地的代码变成和远程仓库一样的代码.\n\n![](Github使用/51204e17ea43f7a1992ea9abbf9ecb48768694fa.png)所以奉在pull代码的时候一定要多注意看一下代码有没有被改动过.\n\n3.使用idea的Update Project代替git pull + git stash +git stash pop\n\n![](Github使用/5ea18123f9a50a08ca1fd5562c479b4aa184a2e4.png)然后点击一下OK,就会弹出如下页面:\n\n![](Github使用/6aa5405ba7ffbe9c8760c5891854c1041e688d10.png)   然后双击一下有冲突的文件之后,就会弹出如下页面,自我感觉在这个界面里进行冲突解决,要比注意点1中第一个图,那种解决方式爽一些.\n\n![](Github使用/7e1e6ca628c6bcc92afce94e8ce7a0cd9a491ac1.png)并且解决完冲突后,立刻会弹出如下提示:\n\n![](Github使用/089c68368fd64dc9463fcbb493992b46998e45ad.png)点开提示之后,你就可以看到哪些文件修改了,哪些文件是新增的,而且你肯定会想去看看你原来操作过的文件有没有被updated过,从而避免注意点2中提到的情况.\n![{% asset_img practice12.png git图解 %}](Github使用/dfd1bcd4b5e9efbe1d7e8d52c289e292c4bd2b04.png)\n\n**git merge 相关**\n\n1. 在分支之后未对代码修改\n   \n   ![](Github使用/c81d9e95a6974e43bb3d62b5ce7029b0c535f29d.png)\n\n2. 在分支之对代码修改\n   \n   ![](Github使用/69a4adad5fa74c60aa7fdd3ac358f9bb718b3b4b.png)\n","slug":"Github使用","published":1,"updated":"2023-03-23T11:59:59.620Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfl5dwq10003qcu48u8scs43","content":"<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/fc261c3347d67a16ae3d5eef1b72182071954565.png\"></p>\n<p><strong>常用的命令</strong></p>\n<ol>\n<li>克隆仓库<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> &lt;repo&gt; &lt;directory&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>repo:Git 仓库</p>\n</li>\n<li><p>directory:本地目录</p>\n</li>\n</ul>\n</li>\n</ol>\n<span id=\"more\"></span>\n\n<ul>\n<li><p>初始化仓库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git init &lt;directory&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>directory:本地目录</li>\n</ul>\n</li>\n<li><p>查看仓库状态</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status</span><br></pre></td></tr></table></figure></li>\n<li><p>添加文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add [file1] [file2] ...</span><br><span class=\"line\">$ git add [<span class=\"built_in\">dir</span>]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>file:文件</li>\n<li>dir:文件夹</li>\n</ul>\n</li>\n<li><p>删除文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">rm</span> [-f | --force] [-n] [-r] [--cached] [--ignore-unmatch] [--quiet] [--pathspec-from-file=&lt;file&gt; [--pathspec-file-nul]] [--] [&lt;pathspec&gt;…​]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>f:覆盖最新的检测</li>\n<li>n/dry-run:不在硬盘上删除文件，只在仓库中删除文件</li>\n<li>r:递归删除文件夹</li>\n<li>cached:使用此选项仅从索引中取消和删除路径。工作树文件，无论是否修改，都将保持不变</li>\n<li>ignore-unmatch:即使没有匹配的文件，也会以0状态退出</li>\n<li>q/quiet:不打印输出</li>\n<li>pathspec:要删除的文件</li>\n</ul>\n</li>\n<li><p>移动文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">mv</span> [-v] [-f] [-n] [-k] &lt;<span class=\"built_in\">source</span>&gt; &lt;destination&gt;</span><br><span class=\"line\">$ git <span class=\"built_in\">mv</span> [-v] [-f] [-n] [-k] &lt;<span class=\"built_in\">source</span>&gt; ... &lt;destination directory&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>v/verbose:打印被移除文件的名称</li>\n<li>f/force:强制覆盖目标文件</li>\n<li>n/dry-run:只说明会做什么</li>\n<li>k:跳过重命名</li>\n</ul>\n</li>\n<li><p>比较状态</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff [file] 显示暂存区和工作区的差异</span><br><span class=\"line\">$ git diff --cached/staged [file] 显示暂存区和上一次提交(commit)的差异</span><br><span class=\"line\">$ git diff [first-branch]...[second-branch]</span><br></pre></td></tr></table></figure></li>\n<li><p>提交命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -m [message]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>message：可以是一些备注信息。</li>\n</ul>\n</li>\n<li><p>回退版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset [--soft | --mixed | --hard] [HEAD]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>mixed：为默认，可以不用带该参数，用于重置暂存区的文件与上一次的提交(commit)保持一致，工作区文件内容保持不变</li>\n<li>soft 参数用于回退到某个版本</li>\n<li>hard 参数撤销工作区中所有未提交的修改内容，将暂存区与工作区都回到上一次版本，并删除之前的所有信息提交</li>\n</ul>\n</li>\n<li><p>分支相关</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\<span class=\"comment\">#列出本地所有分支</span></span><br><span class=\"line\">git branch</span><br><span class=\"line\">\\<span class=\"comment\">#列出所有远程分支</span></span><br><span class=\"line\">git branch -r</span><br><span class=\"line\">\\<span class=\"comment\">#新建一个分支，但依然停留在当前分支</span></span><br><span class=\"line\">git branch 分支名</span><br><span class=\"line\">\\<span class=\"comment\">#新建一个分支，并切换到该分支</span></span><br><span class=\"line\">git checkout -b 分支名</span><br><span class=\"line\">\\<span class=\"comment\">#合并指定分支到当前分支</span></span><br><span class=\"line\">git merge 分支名</span><br><span class=\"line\">\\<span class=\"comment\">#删除分支</span></span><br><span class=\"line\">git branch -d 分支名</span><br><span class=\"line\">\\<span class=\"comment\">#删除远程分支</span></span><br><span class=\"line\">git push origin --delete 分支名</span><br><span class=\"line\">git branch -dr 分支名</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>提交代码</strong></p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/86324066a24e3eb32af8305f91c0a064582ae9d5.png\"></p>\n<p>向Github提交代码的两种情况</p>\n<ol>\n<li><p>本地没有 Git 仓库，将远程仓库clone到本地</p>\n<p> 通过clone命令创建的本地仓库，其本身就是一个 Git 仓库了，不用我们再进行<br> init初始化操作啦，而且自动关联远程仓库。我们只需要在这个仓库进行修改或者<br> 添加等操作，然后commit即可。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> <span class=\"string\">&quot;仓库地址&quot;</span></span><br><span class=\"line\">$ git push origin main</span><br></pre></td></tr></table></figure></li>\n<li><p>本地有 Git 仓库，并且我们已经进行了多次commit操作</p>\n<p> 进入仓库,关联远程仓库，origin为远程仓库的名字</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote add origin 仓库地址</span><br></pre></td></tr></table></figure>\n\n<p> 同步远程仓库和本地仓库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull origin main</span><br></pre></td></tr></table></figure>\n\n<p>强调:在向远程仓库提交代码的时候，一定要先进行pull操作，再进行push操作，防止本地仓库与远程仓库不同步导致冲突的问题，尤其是第二种提交代码的情况，很容易就出现问题。</p>\n</li>\n</ol>\n<p><strong>实际使用</strong></p>\n<p>转载自<a href=\"https://blog.csdn.net/nrsc272420199/article/details/85219097\">原文</a><br>1.远程仓库只有一个master分支的情况<br>   需要用到的命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull----------------从远程仓库拉取代码到本地</span><br><span class=\"line\">git stash---------------将你修改后的代码存储到本地(一个栈结构)--&gt;一般会在git pull码失败时使用</span><br><span class=\"line\">git stash pop-----------将你stash到本地的代码与重新git pull下的代码合并</span><br><span class=\"line\">git add XXX-------------将XXX文件加入到暂存区</span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;注释&quot;</span>----将暂存区的文件提交到本地仓库</span><br><span class=\"line\">git push----------------将本地仓库的内容推送到远程仓库</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>实际场景<br>假设开发者A和开发者B都刚刚从远程仓库checkout了一份代码到本地.</li>\n</ol>\n<p>A:<br>首先开发者A在README.md文件中进行了如下修改:</p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/3aa70b0531dc3e2625c09c1ef8eac0078a29f54e.png\">然后将修改内容按照如下方式提交到远程仓库:<br><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/265bf46b38778fb7476094dda85d00debb635e85.png\"></p>\n<p>B:<br> <img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/5a1f2bfbce2c6557b2d3442934c0a92b8a606944.png\">  开发者B此时也要开发代码了,正常来讲,如果开发者B在开发完一个功能需要提交代码之前,肯定要git pull一下代码.比如说开发者B在README.md的第三行里增加了一句话,然后他去git pull代码,结果如下:</p>\n<p><strong>★注意点1★–git监控变化的单位是文件</strong><br>   我不知道大家在这里会不会疑惑,反正我疑惑过很久,明明我在Git Bash里改动的是第二行,在Idea里改动的是第三行,不是说git监测的是变化吗?这里怎么就pull不下来呢?其实git所谓的监控变化,监控的单位是文件,也就是说假如其他开发者改动了XXX文件,并且同步到远程库了,你即使在XXX文件里改动了一个标点,加了一个空格,都无法pull成功.<br>   git pull不成功时,你就需要使用git stash命令了,具体解决方式如下:</p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/578439ae227066f02d1319f645f09b0567c46bd6.png\"></p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/62a3a7a6fbde2da426ced06d782dbd6ee43fb5c4.png\"></p>\n<p><strong>★注意点2★–git pull可以把所有你上次push后没操作的文件pull下来</strong><br>A:<br>  接着上面的栗子,假设Git Bash用户同步了服务端的代码,并且在没跟IDEA用户商量的情况下,擅自修改了IDEA用户的代码,如下:</p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/2ac963f71072ecd1cc7f56f9153107153b737a36.png\"><br><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/c96a2283efc6cc31030410ff42e59ac41209443a.png\">  并且Git Bash用户还创建了一个新的文件,如下:</p>\n<p>B:<br>  开发者B如果没有进行开发,或者进行了其他文件的开发,而未对README.md文件进行操作,直接git pull,效果见下图.可以发现,git pull可以把所有你上次push后没操作的文件pull下来,并将你本地的代码变成和远程仓库一样的代码.</p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/51204e17ea43f7a1992ea9abbf9ecb48768694fa.png\">所以奉在pull代码的时候一定要多注意看一下代码有没有被改动过.</p>\n<p>3.使用idea的Update Project代替git pull + git stash +git stash pop</p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/5ea18123f9a50a08ca1fd5562c479b4aa184a2e4.png\">然后点击一下OK,就会弹出如下页面:</p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/6aa5405ba7ffbe9c8760c5891854c1041e688d10.png\">   然后双击一下有冲突的文件之后,就会弹出如下页面,自我感觉在这个界面里进行冲突解决,要比注意点1中第一个图,那种解决方式爽一些.</p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/7e1e6ca628c6bcc92afce94e8ce7a0cd9a491ac1.png\">并且解决完冲突后,立刻会弹出如下提示:</p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/089c68368fd64dc9463fcbb493992b46998e45ad.png\">点开提示之后,你就可以看到哪些文件修改了,哪些文件是新增的,而且你肯定会想去看看你原来操作过的文件有没有被updated过,从而避免注意点2中提到的情况.<br><img 16 2023 src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/dfd1bcd4b5e9efbe1d7e8d52c289e292c4bd2b04.png\" alt=\"<img src=\" 03 github%e4%bd%bf%e7%94%a8 practice12.png\" class title=\"git图解\">\"></p>\n<p><strong>git merge 相关</strong></p>\n<ol>\n<li><p>在分支之后未对代码修改</p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/c81d9e95a6974e43bb3d62b5ce7029b0c535f29d.png\"></p>\n</li>\n<li><p>在分支之对代码修改</p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/69a4adad5fa74c60aa7fdd3ac358f9bb718b3b4b.png\"></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/fc261c3347d67a16ae3d5eef1b72182071954565.png\"></p>\n<p><strong>常用的命令</strong></p>\n<ol>\n<li>克隆仓库<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> &lt;repo&gt; &lt;directory&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>repo:Git 仓库</p>\n</li>\n<li><p>directory:本地目录</p>\n</li>\n</ul>\n</li>\n</ol>","more":"<ul>\n<li><p>初始化仓库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git init &lt;directory&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>directory:本地目录</li>\n</ul>\n</li>\n<li><p>查看仓库状态</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status</span><br></pre></td></tr></table></figure></li>\n<li><p>添加文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add [file1] [file2] ...</span><br><span class=\"line\">$ git add [<span class=\"built_in\">dir</span>]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>file:文件</li>\n<li>dir:文件夹</li>\n</ul>\n</li>\n<li><p>删除文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">rm</span> [-f | --force] [-n] [-r] [--cached] [--ignore-unmatch] [--quiet] [--pathspec-from-file=&lt;file&gt; [--pathspec-file-nul]] [--] [&lt;pathspec&gt;…​]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>f:覆盖最新的检测</li>\n<li>n/dry-run:不在硬盘上删除文件，只在仓库中删除文件</li>\n<li>r:递归删除文件夹</li>\n<li>cached:使用此选项仅从索引中取消和删除路径。工作树文件，无论是否修改，都将保持不变</li>\n<li>ignore-unmatch:即使没有匹配的文件，也会以0状态退出</li>\n<li>q/quiet:不打印输出</li>\n<li>pathspec:要删除的文件</li>\n</ul>\n</li>\n<li><p>移动文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">mv</span> [-v] [-f] [-n] [-k] &lt;<span class=\"built_in\">source</span>&gt; &lt;destination&gt;</span><br><span class=\"line\">$ git <span class=\"built_in\">mv</span> [-v] [-f] [-n] [-k] &lt;<span class=\"built_in\">source</span>&gt; ... &lt;destination directory&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>v/verbose:打印被移除文件的名称</li>\n<li>f/force:强制覆盖目标文件</li>\n<li>n/dry-run:只说明会做什么</li>\n<li>k:跳过重命名</li>\n</ul>\n</li>\n<li><p>比较状态</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff [file] 显示暂存区和工作区的差异</span><br><span class=\"line\">$ git diff --cached/staged [file] 显示暂存区和上一次提交(commit)的差异</span><br><span class=\"line\">$ git diff [first-branch]...[second-branch]</span><br></pre></td></tr></table></figure></li>\n<li><p>提交命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -m [message]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>message：可以是一些备注信息。</li>\n</ul>\n</li>\n<li><p>回退版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset [--soft | --mixed | --hard] [HEAD]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>mixed：为默认，可以不用带该参数，用于重置暂存区的文件与上一次的提交(commit)保持一致，工作区文件内容保持不变</li>\n<li>soft 参数用于回退到某个版本</li>\n<li>hard 参数撤销工作区中所有未提交的修改内容，将暂存区与工作区都回到上一次版本，并删除之前的所有信息提交</li>\n</ul>\n</li>\n<li><p>分支相关</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\<span class=\"comment\">#列出本地所有分支</span></span><br><span class=\"line\">git branch</span><br><span class=\"line\">\\<span class=\"comment\">#列出所有远程分支</span></span><br><span class=\"line\">git branch -r</span><br><span class=\"line\">\\<span class=\"comment\">#新建一个分支，但依然停留在当前分支</span></span><br><span class=\"line\">git branch 分支名</span><br><span class=\"line\">\\<span class=\"comment\">#新建一个分支，并切换到该分支</span></span><br><span class=\"line\">git checkout -b 分支名</span><br><span class=\"line\">\\<span class=\"comment\">#合并指定分支到当前分支</span></span><br><span class=\"line\">git merge 分支名</span><br><span class=\"line\">\\<span class=\"comment\">#删除分支</span></span><br><span class=\"line\">git branch -d 分支名</span><br><span class=\"line\">\\<span class=\"comment\">#删除远程分支</span></span><br><span class=\"line\">git push origin --delete 分支名</span><br><span class=\"line\">git branch -dr 分支名</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>提交代码</strong></p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/86324066a24e3eb32af8305f91c0a064582ae9d5.png\"></p>\n<p>向Github提交代码的两种情况</p>\n<ol>\n<li><p>本地没有 Git 仓库，将远程仓库clone到本地</p>\n<p> 通过clone命令创建的本地仓库，其本身就是一个 Git 仓库了，不用我们再进行<br> init初始化操作啦，而且自动关联远程仓库。我们只需要在这个仓库进行修改或者<br> 添加等操作，然后commit即可。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> <span class=\"string\">&quot;仓库地址&quot;</span></span><br><span class=\"line\">$ git push origin main</span><br></pre></td></tr></table></figure></li>\n<li><p>本地有 Git 仓库，并且我们已经进行了多次commit操作</p>\n<p> 进入仓库,关联远程仓库，origin为远程仓库的名字</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote add origin 仓库地址</span><br></pre></td></tr></table></figure>\n\n<p> 同步远程仓库和本地仓库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull origin main</span><br></pre></td></tr></table></figure>\n\n<p>强调:在向远程仓库提交代码的时候，一定要先进行pull操作，再进行push操作，防止本地仓库与远程仓库不同步导致冲突的问题，尤其是第二种提交代码的情况，很容易就出现问题。</p>\n</li>\n</ol>\n<p><strong>实际使用</strong></p>\n<p>转载自<a href=\"https://blog.csdn.net/nrsc272420199/article/details/85219097\">原文</a><br>1.远程仓库只有一个master分支的情况<br>   需要用到的命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull----------------从远程仓库拉取代码到本地</span><br><span class=\"line\">git stash---------------将你修改后的代码存储到本地(一个栈结构)--&gt;一般会在git pull码失败时使用</span><br><span class=\"line\">git stash pop-----------将你stash到本地的代码与重新git pull下的代码合并</span><br><span class=\"line\">git add XXX-------------将XXX文件加入到暂存区</span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;注释&quot;</span>----将暂存区的文件提交到本地仓库</span><br><span class=\"line\">git push----------------将本地仓库的内容推送到远程仓库</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>实际场景<br>假设开发者A和开发者B都刚刚从远程仓库checkout了一份代码到本地.</li>\n</ol>\n<p>A:<br>首先开发者A在README.md文件中进行了如下修改:</p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/3aa70b0531dc3e2625c09c1ef8eac0078a29f54e.png\">然后将修改内容按照如下方式提交到远程仓库:<br><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/265bf46b38778fb7476094dda85d00debb635e85.png\"></p>\n<p>B:<br> <img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/5a1f2bfbce2c6557b2d3442934c0a92b8a606944.png\">  开发者B此时也要开发代码了,正常来讲,如果开发者B在开发完一个功能需要提交代码之前,肯定要git pull一下代码.比如说开发者B在README.md的第三行里增加了一句话,然后他去git pull代码,结果如下:</p>\n<p><strong>★注意点1★–git监控变化的单位是文件</strong><br>   我不知道大家在这里会不会疑惑,反正我疑惑过很久,明明我在Git Bash里改动的是第二行,在Idea里改动的是第三行,不是说git监测的是变化吗?这里怎么就pull不下来呢?其实git所谓的监控变化,监控的单位是文件,也就是说假如其他开发者改动了XXX文件,并且同步到远程库了,你即使在XXX文件里改动了一个标点,加了一个空格,都无法pull成功.<br>   git pull不成功时,你就需要使用git stash命令了,具体解决方式如下:</p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/578439ae227066f02d1319f645f09b0567c46bd6.png\"></p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/62a3a7a6fbde2da426ced06d782dbd6ee43fb5c4.png\"></p>\n<p><strong>★注意点2★–git pull可以把所有你上次push后没操作的文件pull下来</strong><br>A:<br>  接着上面的栗子,假设Git Bash用户同步了服务端的代码,并且在没跟IDEA用户商量的情况下,擅自修改了IDEA用户的代码,如下:</p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/2ac963f71072ecd1cc7f56f9153107153b737a36.png\"><br><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/c96a2283efc6cc31030410ff42e59ac41209443a.png\">  并且Git Bash用户还创建了一个新的文件,如下:</p>\n<p>B:<br>  开发者B如果没有进行开发,或者进行了其他文件的开发,而未对README.md文件进行操作,直接git pull,效果见下图.可以发现,git pull可以把所有你上次push后没操作的文件pull下来,并将你本地的代码变成和远程仓库一样的代码.</p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/51204e17ea43f7a1992ea9abbf9ecb48768694fa.png\">所以奉在pull代码的时候一定要多注意看一下代码有没有被改动过.</p>\n<p>3.使用idea的Update Project代替git pull + git stash +git stash pop</p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/5ea18123f9a50a08ca1fd5562c479b4aa184a2e4.png\">然后点击一下OK,就会弹出如下页面:</p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/6aa5405ba7ffbe9c8760c5891854c1041e688d10.png\">   然后双击一下有冲突的文件之后,就会弹出如下页面,自我感觉在这个界面里进行冲突解决,要比注意点1中第一个图,那种解决方式爽一些.</p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/7e1e6ca628c6bcc92afce94e8ce7a0cd9a491ac1.png\">并且解决完冲突后,立刻会弹出如下提示:</p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/089c68368fd64dc9463fcbb493992b46998e45ad.png\">点开提示之后,你就可以看到哪些文件修改了,哪些文件是新增的,而且你肯定会想去看看你原来操作过的文件有没有被updated过,从而避免注意点2中提到的情况.<br><img 16 2023 src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/dfd1bcd4b5e9efbe1d7e8d52c289e292c4bd2b04.png\" alt=\"<img src=\" 03 github%e4%bd%bf%e7%94%a8 practice12.png\" class title=\"git图解\">\"></p>\n<p><strong>git merge 相关</strong></p>\n<ol>\n<li><p>在分支之后未对代码修改</p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/c81d9e95a6974e43bb3d62b5ce7029b0c535f29d.png\"></p>\n</li>\n<li><p>在分支之对代码修改</p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/69a4adad5fa74c60aa7fdd3ac358f9bb718b3b4b.png\"></p>\n</li>\n</ol>"},{"title":"冷战历史","date":"2023-02-24T16:19:15.000Z","_content":"\n<img title=\"\" src=\"videos/b4c79bb4937a8fe3e059d09f307c0293b448d348.jpg\" alt=\"\" data-align=\"center\">\n\n<!-- more -->\n\n我的第一篇博客慢慢更新冷战历史\n\n* 冷战的起源\n  \n  * 斯大林与1943年共产国际的解体\n    \n    &nbsp;&nbsp;1943年5月，作为世界革命大本营的共产国际（第三国际）突然宣布解散，这是国际共产主义运动历史上一件具有标志性的事件。就组织形式而言，第三国际是一个共产党世界性的统一机构，各国党只是它的一个支部。共产国际解散后，各国共产党都独立了。虽然到中苏分裂之前，国际共运还是以莫斯科为中心继续存在，但是其组织形式和活动方式发生了根本性改变——共产党情报局只是欧洲九国共产党的协调和指挥机构，而苏共二十大以后各国共产党都是通过召开会议来统一他们的政策和行动。就斗争任务而言，共产国际在理论和逻辑上始终以发动世界革命为己任，而在共产党情报局那里，所谓世界革命战略充其量只是莫斯科动员各国人民支持和援助苏联的口号，苏共二十大则明确提出了“和平共处”的外交路线。\n\n**冷战热斗背景演讲**\n\n<div style=\"position: relative; width: 100%; height: 0; padding-bottom: 75%;\"><iframe \nsrc=\"//player.bilibili.com/player.html?aid=427826505&bvid=BV1YG411s7L1&cid=756709475&page=1\" scrolling=\"no\" border=\"0\" \nframeborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"position: absolute; width: 100%; \nheight: 100%; left: 0; top: 0;\"> </iframe></div>\n","source":"_posts/videos.md","raw":"---\ntitle: 冷战历史\ndate: 2023-2-25 00:19:15\ntags: ['冷战','历史','美国','苏联']\n\n---\n\n<img title=\"\" src=\"videos/b4c79bb4937a8fe3e059d09f307c0293b448d348.jpg\" alt=\"\" data-align=\"center\">\n\n<!-- more -->\n\n我的第一篇博客慢慢更新冷战历史\n\n* 冷战的起源\n  \n  * 斯大林与1943年共产国际的解体\n    \n    &nbsp;&nbsp;1943年5月，作为世界革命大本营的共产国际（第三国际）突然宣布解散，这是国际共产主义运动历史上一件具有标志性的事件。就组织形式而言，第三国际是一个共产党世界性的统一机构，各国党只是它的一个支部。共产国际解散后，各国共产党都独立了。虽然到中苏分裂之前，国际共运还是以莫斯科为中心继续存在，但是其组织形式和活动方式发生了根本性改变——共产党情报局只是欧洲九国共产党的协调和指挥机构，而苏共二十大以后各国共产党都是通过召开会议来统一他们的政策和行动。就斗争任务而言，共产国际在理论和逻辑上始终以发动世界革命为己任，而在共产党情报局那里，所谓世界革命战略充其量只是莫斯科动员各国人民支持和援助苏联的口号，苏共二十大则明确提出了“和平共处”的外交路线。\n\n**冷战热斗背景演讲**\n\n<div style=\"position: relative; width: 100%; height: 0; padding-bottom: 75%;\"><iframe \nsrc=\"//player.bilibili.com/player.html?aid=427826505&bvid=BV1YG411s7L1&cid=756709475&page=1\" scrolling=\"no\" border=\"0\" \nframeborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"position: absolute; width: 100%; \nheight: 100%; left: 0; top: 0;\"> </iframe></div>\n","slug":"videos","published":1,"updated":"2023-03-23T11:55:45.388Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clfl5dwq20004qcu47x6l8a1e","content":"<img title src=\"/2023/02/25/videos/b4c79bb4937a8fe3e059d09f307c0293b448d348.jpg\" alt data-align=\"center\">\n\n<span id=\"more\"></span>\n\n<p>我的第一篇博客慢慢更新冷战历史</p>\n<ul>\n<li>冷战的起源<ul>\n<li>斯大林与1943年共产国际的解体&nbsp;&nbsp;1943年5月，作为世界革命大本营的共产国际（第三国际）突然宣布解散，这是国际共产主义运动历史上一件具有标志性的事件。就组织形式而言，第三国际是一个共产党世界性的统一机构，各国党只是它的一个支部。共产国际解散后，各国共产党都独立了。虽然到中苏分裂之前，国际共运还是以莫斯科为中心继续存在，但是其组织形式和活动方式发生了根本性改变——共产党情报局只是欧洲九国共产党的协调和指挥机构，而苏共二十大以后各国共产党都是通过召开会议来统一他们的政策和行动。就斗争任务而言，共产国际在理论和逻辑上始终以发动世界革命为己任，而在共产党情报局那里，所谓世界革命战略充其量只是莫斯科动员各国人民支持和援助苏联的口号，苏共二十大则明确提出了“和平共处”的外交路线。</li>\n</ul>\n</li>\n</ul>\n<p><strong>冷战热斗背景演讲</strong></p>\n<div style=\"position: relative; width: 100%; height: 0; padding-bottom: 75%;\"><iframe src=\"//player.bilibili.com/player.html?aid=427826505&bvid=BV1YG411s7L1&cid=756709475&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"position: absolute; width: 100%; \nheight: 100%; left: 0; top: 0;\"> </iframe></div>\n","site":{"data":{}},"excerpt":"<img title src=\"/2023/02/25/videos/b4c79bb4937a8fe3e059d09f307c0293b448d348.jpg\" alt data-align=\"center\">","more":"<p>我的第一篇博客慢慢更新冷战历史</p>\n<ul>\n<li>冷战的起源<ul>\n<li>斯大林与1943年共产国际的解体&nbsp;&nbsp;1943年5月，作为世界革命大本营的共产国际（第三国际）突然宣布解散，这是国际共产主义运动历史上一件具有标志性的事件。就组织形式而言，第三国际是一个共产党世界性的统一机构，各国党只是它的一个支部。共产国际解散后，各国共产党都独立了。虽然到中苏分裂之前，国际共运还是以莫斯科为中心继续存在，但是其组织形式和活动方式发生了根本性改变——共产党情报局只是欧洲九国共产党的协调和指挥机构，而苏共二十大以后各国共产党都是通过召开会议来统一他们的政策和行动。就斗争任务而言，共产国际在理论和逻辑上始终以发动世界革命为己任，而在共产党情报局那里，所谓世界革命战略充其量只是莫斯科动员各国人民支持和援助苏联的口号，苏共二十大则明确提出了“和平共处”的外交路线。</li>\n</ul>\n</li>\n</ul>\n<p><strong>冷战热斗背景演讲</strong></p>\n<div style=\"position: relative; width: 100%; height: 0; padding-bottom: 75%;\"><iframe src=\"//player.bilibili.com/player.html?aid=427826505&bvid=BV1YG411s7L1&cid=756709475&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"position: absolute; width: 100%; \nheight: 100%; left: 0; top: 0;\"> </iframe></div>"},{"title":"嵌入式与单片机实验课答案","date":"2023-04-01T18:02:14.000Z","_content":"\n1. 第一次实验\n   \n   * 实验基本要求\n     \n     ![](SingleChip/2023-04-02-02-05-40-image.png)\n     \n     <!--more-->\n     \n     创建项目文件\n     \n     ![Screenshot from 2023-04-02 00-47-22.png](SingleChip/53dd30183091b0bb68dfbdb15031cc2dfa2e0306.png)\n     \n     ```bash\n     mkdir Project //在用户目录下（~）创建Project文件夹\n     cd Project/  \n     mkdir Homework //在Project目录下创建Homework文件夹\n     cd Homework/\n     mkdir 10 //此时实验的项目地址\n     cd 10\n     ```\n     \n        \n     \n     使用vim创建mean.sh文件\n     \n     ```bash\n     vim mean.sh \n     ```\n     \n     如果出现这种情况\n     ![](SingleChip/4c9eeaf452c81e4203aab3ab35f203b530e08202.png)\n     \n     ```bash\n     sudo apt install vim\n     ```\n     \n     安装完后在执行vim mean.sh，执行完后界面为\n     \n     \n     \n     ![Screenshot from 2023-04-02 01-14-51.png](SingleChip/426941f16f054370a2e48c0b9334b919349fd85a.png)\n     \n       按i键进入插入模式\n     \n     输入代码\n     \n     ```bash\n     #!/bin/bash\n     total=0\n     count=0\n     inputfile='1000ValuesCalcMean'\n     while read line;do\n         total=$((total+line)）\n         count=$[$count+1]\n     done < $inputfile\n     echo $[$total/$count] > mean_result_学号_名字.txt\n     ```\n     \n         ![](SingleChip/d5a14db6ef5b8ee6e4e4628c1290b38445a7835e.png)\n     \n     输入完后按esc键退出插入模式，输入:wq退出vim\n     \n     ```bash\n     sudo chmod 777 mean.sh //给mean.sh权限\n     ./mean.sh              //执行mean.sh\n     ```\n     \n     执行完后10文件夹内出现 mean_result_学号_名字.txt 文件\n     \n     ![](SingleChip/57037c8bea42c86053227fe549874b419653b56c.png)\n     \n     内容为 平均数\n     \n     创建ReadMe.md\n     \n     ```bash\n     vim ReadMe.md\n     ```\n     \n     进入后直接:wq退出\n     \n     ![Screenshot from 2023-04-02 01-14-51.png](SingleChip/426941f16f054370a2e48c0b9334b919349fd85a.png)\n     \n     看到文件夹内多出了文件ReaMe.md，双击\n     \n     ![Screenshot from 2023-04-02 01-16-19.png](SingleChip/54c588817fcd205435a974f1d8077220d5485bf4.png)\n     \n     在文本编辑器内写入以下示例后保存\n     \n     ![Screenshot from 2023-04-02 01-21-06.png](SingleChip/62d506ea99c99e2d95a5c5d0b00410291b1a7de4.png)\n     \n     打包成.tgz格式的压缩包(别忘了传图片)\n     \n     ```bash\n     tar -czvf 压缩包的名字.tgz 你要压缩的第一个文件 第二个 ....\n     ```\n     \n     ![Screenshot from 2023-04-02 01-22-26.png](SingleChip/ba71358b9ca3c9a533af1de889672b443827b2b5.png)\n     \n     进入学习通上交即可\n   \n   * 进阶要求\n     \n     代码修改为\n     \n     ![Screenshot from 2023-04-02 01-54-33.png](SingleChip/08a01404c19e5459d57c8e384f5eaf22869a43eb.png)\n     \n     执行命令改为\n     \n     ```bash\n     ./mean.sh 1000ValuesCalcMean\n     ```\n     \n     执行完后压缩上交即可(别忘了在ReadMe中说明使用了进阶要求)\n     \n     \n     \n     \n","source":"_posts/SingleChip.md","raw":"---\ntitle: 嵌入式与单片机实验课答案\ndate: 2023-04-02 02:02:14\ntags:\n---\n\n1. 第一次实验\n   \n   * 实验基本要求\n     \n     ![](SingleChip/2023-04-02-02-05-40-image.png)\n     \n     <!--more-->\n     \n     创建项目文件\n     \n     ![Screenshot from 2023-04-02 00-47-22.png](SingleChip/53dd30183091b0bb68dfbdb15031cc2dfa2e0306.png)\n     \n     ```bash\n     mkdir Project //在用户目录下（~）创建Project文件夹\n     cd Project/  \n     mkdir Homework //在Project目录下创建Homework文件夹\n     cd Homework/\n     mkdir 10 //此时实验的项目地址\n     cd 10\n     ```\n     \n        \n     \n     使用vim创建mean.sh文件\n     \n     ```bash\n     vim mean.sh \n     ```\n     \n     如果出现这种情况\n     ![](SingleChip/4c9eeaf452c81e4203aab3ab35f203b530e08202.png)\n     \n     ```bash\n     sudo apt install vim\n     ```\n     \n     安装完后在执行vim mean.sh，执行完后界面为\n     \n     \n     \n     ![Screenshot from 2023-04-02 01-14-51.png](SingleChip/426941f16f054370a2e48c0b9334b919349fd85a.png)\n     \n       按i键进入插入模式\n     \n     输入代码\n     \n     ```bash\n     #!/bin/bash\n     total=0\n     count=0\n     inputfile='1000ValuesCalcMean'\n     while read line;do\n         total=$((total+line)）\n         count=$[$count+1]\n     done < $inputfile\n     echo $[$total/$count] > mean_result_学号_名字.txt\n     ```\n     \n         ![](SingleChip/d5a14db6ef5b8ee6e4e4628c1290b38445a7835e.png)\n     \n     输入完后按esc键退出插入模式，输入:wq退出vim\n     \n     ```bash\n     sudo chmod 777 mean.sh //给mean.sh权限\n     ./mean.sh              //执行mean.sh\n     ```\n     \n     执行完后10文件夹内出现 mean_result_学号_名字.txt 文件\n     \n     ![](SingleChip/57037c8bea42c86053227fe549874b419653b56c.png)\n     \n     内容为 平均数\n     \n     创建ReadMe.md\n     \n     ```bash\n     vim ReadMe.md\n     ```\n     \n     进入后直接:wq退出\n     \n     ![Screenshot from 2023-04-02 01-14-51.png](SingleChip/426941f16f054370a2e48c0b9334b919349fd85a.png)\n     \n     看到文件夹内多出了文件ReaMe.md，双击\n     \n     ![Screenshot from 2023-04-02 01-16-19.png](SingleChip/54c588817fcd205435a974f1d8077220d5485bf4.png)\n     \n     在文本编辑器内写入以下示例后保存\n     \n     ![Screenshot from 2023-04-02 01-21-06.png](SingleChip/62d506ea99c99e2d95a5c5d0b00410291b1a7de4.png)\n     \n     打包成.tgz格式的压缩包(别忘了传图片)\n     \n     ```bash\n     tar -czvf 压缩包的名字.tgz 你要压缩的第一个文件 第二个 ....\n     ```\n     \n     ![Screenshot from 2023-04-02 01-22-26.png](SingleChip/ba71358b9ca3c9a533af1de889672b443827b2b5.png)\n     \n     进入学习通上交即可\n   \n   * 进阶要求\n     \n     代码修改为\n     \n     ![Screenshot from 2023-04-02 01-54-33.png](SingleChip/08a01404c19e5459d57c8e384f5eaf22869a43eb.png)\n     \n     执行命令改为\n     \n     ```bash\n     ./mean.sh 1000ValuesCalcMean\n     ```\n     \n     执行完后压缩上交即可(别忘了在ReadMe中说明使用了进阶要求)\n     \n     \n     \n     \n","slug":"SingleChip","published":1,"updated":"2023-04-01T18:43:54.735Z","_id":"clfybn8fj0000sou47884fhom","comments":1,"layout":"post","photos":[],"link":"","content":"<ol>\n<li>第一次实验<ul>\n<li><p>实验基本要求</p>\n<p><img src=\"/2023/04/02/SingleChip/2023-04-02-02-05-40-image.png\"></p>\n<span id=\"more\"></span>\n\n<p>创建项目文件</p>\n<p><img src=\"/2023/04/02/SingleChip/53dd30183091b0bb68dfbdb15031cc2dfa2e0306.png\" alt=\"Screenshot from 2023-04-02 00-47-22.png\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> Project //在用户目录下（~）创建Project文件夹</span><br><span class=\"line\"><span class=\"built_in\">cd</span> Project/  </span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> Homework //在Project目录下创建Homework文件夹</span><br><span class=\"line\"><span class=\"built_in\">cd</span> Homework/</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> 10 //此时实验的项目地址</span><br><span class=\"line\"><span class=\"built_in\">cd</span> 10</span><br></pre></td></tr></table></figure>\n\n<p>   </p>\n<p>使用vim创建mean.sh文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim mean.sh </span><br></pre></td></tr></table></figure>\n\n<p>如果出现这种情况<br><img src=\"/2023/04/02/SingleChip/4c9eeaf452c81e4203aab3ab35f203b530e08202.png\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install vim</span><br></pre></td></tr></table></figure>\n\n<p>安装完后在执行vim mean.sh，执行完后界面为</p>\n<p><img src=\"/2023/04/02/SingleChip/426941f16f054370a2e48c0b9334b919349fd85a.png\" alt=\"Screenshot from 2023-04-02 01-14-51.png\"></p>\n<p>  按i键进入插入模式</p>\n<p>输入代码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">total=0</span><br><span class=\"line\">count=0</span><br><span class=\"line\">inputfile=<span class=\"string\">&#x27;1000ValuesCalcMean&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"built_in\">read</span> line;<span class=\"keyword\">do</span></span><br><span class=\"line\">    total=$((total+line)）</span><br><span class=\"line\">    count=$[<span class=\"variable\">$count</span>+<span class=\"number\">1</span>]</span><br><span class=\"line\">done &lt; <span class=\"variable\">$inputfile</span></span><br><span class=\"line\">echo $[<span class=\"variable\">$total</span>/<span class=\"variable\">$count</span>] &gt; mean_result_学号_名字.txt</span><br></pre></td></tr></table></figure>\n\n<p>    <img src=\"/2023/04/02/SingleChip/d5a14db6ef5b8ee6e4e4628c1290b38445a7835e.png\"></p>\n<p>输入完后按esc键退出插入模式，输入:wq退出vim</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">chmod</span> 777 mean.sh //给mean.sh权限</span><br><span class=\"line\">./mean.sh              //执行mean.sh</span><br></pre></td></tr></table></figure>\n\n<p>执行完后10文件夹内出现 mean_result_学号_名字.txt 文件</p>\n<p><img src=\"/2023/04/02/SingleChip/57037c8bea42c86053227fe549874b419653b56c.png\"></p>\n<p>内容为 平均数</p>\n<p>创建ReadMe.md</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ReadMe.md</span><br></pre></td></tr></table></figure>\n\n<p>进入后直接:wq退出</p>\n<p><img src=\"/2023/04/02/SingleChip/426941f16f054370a2e48c0b9334b919349fd85a.png\" alt=\"Screenshot from 2023-04-02 01-14-51.png\"></p>\n<p>看到文件夹内多出了文件ReaMe.md，双击</p>\n<p><img src=\"/2023/04/02/SingleChip/54c588817fcd205435a974f1d8077220d5485bf4.png\" alt=\"Screenshot from 2023-04-02 01-16-19.png\"></p>\n<p>在文本编辑器内写入以下示例后保存</p>\n<p><img src=\"/2023/04/02/SingleChip/62d506ea99c99e2d95a5c5d0b00410291b1a7de4.png\" alt=\"Screenshot from 2023-04-02 01-21-06.png\"></p>\n<p>打包成.tgz格式的压缩包(别忘了传图片)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -czvf 压缩包的名字.tgz 你要压缩的第一个文件 第二个 ....</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/04/02/SingleChip/ba71358b9ca3c9a533af1de889672b443827b2b5.png\" alt=\"Screenshot from 2023-04-02 01-22-26.png\"></p>\n<p>进入学习通上交即可</p>\n</li>\n<li><p>进阶要求</p>\n<p>代码修改为</p>\n<p><img src=\"/2023/04/02/SingleChip/08a01404c19e5459d57c8e384f5eaf22869a43eb.png\" alt=\"Screenshot from 2023-04-02 01-54-33.png\"></p>\n<p>执行命令改为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./mean.sh 1000ValuesCalcMean</span><br></pre></td></tr></table></figure>\n\n<p>执行完后压缩上交即可(别忘了在ReadMe中说明使用了进阶要求)</p>\n</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<ol>\n<li>第一次实验<ul>\n<li><p>实验基本要求</p>\n<p><img src=\"/2023/04/02/SingleChip/2023-04-02-02-05-40-image.png\"></p></li></ul></li></ol>","more":"<p>创建项目文件</p>\n<p><img src=\"/2023/04/02/SingleChip/53dd30183091b0bb68dfbdb15031cc2dfa2e0306.png\" alt=\"Screenshot from 2023-04-02 00-47-22.png\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> Project //在用户目录下（~）创建Project文件夹</span><br><span class=\"line\"><span class=\"built_in\">cd</span> Project/  </span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> Homework //在Project目录下创建Homework文件夹</span><br><span class=\"line\"><span class=\"built_in\">cd</span> Homework/</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> 10 //此时实验的项目地址</span><br><span class=\"line\"><span class=\"built_in\">cd</span> 10</span><br></pre></td></tr></table></figure>\n\n<p>   </p>\n<p>使用vim创建mean.sh文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim mean.sh </span><br></pre></td></tr></table></figure>\n\n<p>如果出现这种情况<br><img src=\"/2023/04/02/SingleChip/4c9eeaf452c81e4203aab3ab35f203b530e08202.png\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install vim</span><br></pre></td></tr></table></figure>\n\n<p>安装完后在执行vim mean.sh，执行完后界面为</p>\n<p><img src=\"/2023/04/02/SingleChip/426941f16f054370a2e48c0b9334b919349fd85a.png\" alt=\"Screenshot from 2023-04-02 01-14-51.png\"></p>\n<p>  按i键进入插入模式</p>\n<p>输入代码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">total=0</span><br><span class=\"line\">count=0</span><br><span class=\"line\">inputfile=<span class=\"string\">&#x27;1000ValuesCalcMean&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"built_in\">read</span> line;<span class=\"keyword\">do</span></span><br><span class=\"line\">    total=$((total+line)）</span><br><span class=\"line\">    count=$[<span class=\"variable\">$count</span>+<span class=\"number\">1</span>]</span><br><span class=\"line\">done &lt; <span class=\"variable\">$inputfile</span></span><br><span class=\"line\">echo $[<span class=\"variable\">$total</span>/<span class=\"variable\">$count</span>] &gt; mean_result_学号_名字.txt</span><br></pre></td></tr></table></figure>\n\n<p>    <img src=\"/2023/04/02/SingleChip/d5a14db6ef5b8ee6e4e4628c1290b38445a7835e.png\"></p>\n<p>输入完后按esc键退出插入模式，输入:wq退出vim</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">chmod</span> 777 mean.sh //给mean.sh权限</span><br><span class=\"line\">./mean.sh              //执行mean.sh</span><br></pre></td></tr></table></figure>\n\n<p>执行完后10文件夹内出现 mean_result_学号_名字.txt 文件</p>\n<p><img src=\"/2023/04/02/SingleChip/57037c8bea42c86053227fe549874b419653b56c.png\"></p>\n<p>内容为 平均数</p>\n<p>创建ReadMe.md</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ReadMe.md</span><br></pre></td></tr></table></figure>\n\n<p>进入后直接:wq退出</p>\n<p><img src=\"/2023/04/02/SingleChip/426941f16f054370a2e48c0b9334b919349fd85a.png\" alt=\"Screenshot from 2023-04-02 01-14-51.png\"></p>\n<p>看到文件夹内多出了文件ReaMe.md，双击</p>\n<p><img src=\"/2023/04/02/SingleChip/54c588817fcd205435a974f1d8077220d5485bf4.png\" alt=\"Screenshot from 2023-04-02 01-16-19.png\"></p>\n<p>在文本编辑器内写入以下示例后保存</p>\n<p><img src=\"/2023/04/02/SingleChip/62d506ea99c99e2d95a5c5d0b00410291b1a7de4.png\" alt=\"Screenshot from 2023-04-02 01-21-06.png\"></p>\n<p>打包成.tgz格式的压缩包(别忘了传图片)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -czvf 压缩包的名字.tgz 你要压缩的第一个文件 第二个 ....</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/04/02/SingleChip/ba71358b9ca3c9a533af1de889672b443827b2b5.png\" alt=\"Screenshot from 2023-04-02 01-22-26.png\"></p>\n<p>进入学习通上交即可</p>\n\n<li><p>进阶要求</p>\n<p>代码修改为</p>\n<p><img src=\"/2023/04/02/SingleChip/08a01404c19e5459d57c8e384f5eaf22869a43eb.png\" alt=\"Screenshot from 2023-04-02 01-54-33.png\"></p>\n<p>执行命令改为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./mean.sh 1000ValuesCalcMean</span><br></pre></td></tr></table></figure>\n\n<p>执行完后压缩上交即可(别忘了在ReadMe中说明使用了进阶要求)</p>\n</li>\n\n\n"}],"PostAsset":[{"_id":"source/_posts/ET框架初步理解/4a45803c69ed8b7283f933aa6e1748973976ef4c.png","slug":"4a45803c69ed8b7283f933aa6e1748973976ef4c.png","post":"clfl5dwpx0001qcu400eybjt7","modified":0,"renderable":0},{"_id":"source/_posts/ET框架初步理解/6e285ffc782c8443b1070964510e9530573f6c2d.png","slug":"6e285ffc782c8443b1070964510e9530573f6c2d.png","post":"clfl5dwpx0001qcu400eybjt7","modified":0,"renderable":0},{"_id":"source/_posts/ET框架初步理解/7845ce3fdee147fca9d5c7fe4d86a890b717ecfe.png","slug":"7845ce3fdee147fca9d5c7fe4d86a890b717ecfe.png","post":"clfl5dwpx0001qcu400eybjt7","modified":0,"renderable":0},{"_id":"source/_posts/ET框架初步理解/BackConfig.png","slug":"BackConfig.png","post":"clfl5dwpx0001qcu400eybjt7","modified":0,"renderable":0},{"_id":"source/_posts/ET框架初步理解/BackEnd.png","slug":"BackEnd.png","post":"clfl5dwpx0001qcu400eybjt7","modified":0,"renderable":0},{"_id":"source/_posts/ET框架初步理解/front.png","slug":"front.png","post":"clfl5dwpx0001qcu400eybjt7","modified":0,"renderable":0},{"_id":"source/_posts/ET框架TulipBubble实现逻辑/2023-03-23-21-05-52-image.png","slug":"2023-03-23-21-05-52-image.png","post":"clfl5dwq00002qcu4g7y08ciw","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/089c68368fd64dc9463fcbb493992b46998e45ad.png","slug":"089c68368fd64dc9463fcbb493992b46998e45ad.png","post":"clfl5dwq10003qcu48u8scs43","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/10.png","slug":"10.png","post":"clfl5dwq10003qcu48u8scs43","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/13.png","slug":"13.png","post":"clfl5dwq10003qcu48u8scs43","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/14.png","slug":"14.png","post":"clfl5dwq10003qcu48u8scs43","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/15.png","slug":"15.png","post":"clfl5dwq10003qcu48u8scs43","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/265bf46b38778fb7476094dda85d00debb635e85.png","slug":"265bf46b38778fb7476094dda85d00debb635e85.png","post":"clfl5dwq10003qcu48u8scs43","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/2ac963f71072ecd1cc7f56f9153107153b737a36.png","slug":"2ac963f71072ecd1cc7f56f9153107153b737a36.png","post":"clfl5dwq10003qcu48u8scs43","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/3aa70b0531dc3e2625c09c1ef8eac0078a29f54e.png","slug":"3aa70b0531dc3e2625c09c1ef8eac0078a29f54e.png","post":"clfl5dwq10003qcu48u8scs43","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/51204e17ea43f7a1992ea9abbf9ecb48768694fa.png","slug":"51204e17ea43f7a1992ea9abbf9ecb48768694fa.png","post":"clfl5dwq10003qcu48u8scs43","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/578439ae227066f02d1319f645f09b0567c46bd6.png","slug":"578439ae227066f02d1319f645f09b0567c46bd6.png","post":"clfl5dwq10003qcu48u8scs43","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/5a1f2bfbce2c6557b2d3442934c0a92b8a606944.png","slug":"5a1f2bfbce2c6557b2d3442934c0a92b8a606944.png","post":"clfl5dwq10003qcu48u8scs43","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/5ea18123f9a50a08ca1fd5562c479b4aa184a2e4.png","slug":"5ea18123f9a50a08ca1fd5562c479b4aa184a2e4.png","post":"clfl5dwq10003qcu48u8scs43","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/62a3a7a6fbde2da426ced06d782dbd6ee43fb5c4.png","slug":"62a3a7a6fbde2da426ced06d782dbd6ee43fb5c4.png","post":"clfl5dwq10003qcu48u8scs43","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/69a4adad5fa74c60aa7fdd3ac358f9bb718b3b4b.png","slug":"69a4adad5fa74c60aa7fdd3ac358f9bb718b3b4b.png","post":"clfl5dwq10003qcu48u8scs43","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/6aa5405ba7ffbe9c8760c5891854c1041e688d10.png","slug":"6aa5405ba7ffbe9c8760c5891854c1041e688d10.png","post":"clfl5dwq10003qcu48u8scs43","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/7e1e6ca628c6bcc92afce94e8ce7a0cd9a491ac1.png","slug":"7e1e6ca628c6bcc92afce94e8ce7a0cd9a491ac1.png","post":"clfl5dwq10003qcu48u8scs43","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/86324066a24e3eb32af8305f91c0a064582ae9d5.png","slug":"86324066a24e3eb32af8305f91c0a064582ae9d5.png","post":"clfl5dwq10003qcu48u8scs43","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/c81d9e95a6974e43bb3d62b5ce7029b0c535f29d.png","slug":"c81d9e95a6974e43bb3d62b5ce7029b0c535f29d.png","post":"clfl5dwq10003qcu48u8scs43","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/c96a2283efc6cc31030410ff42e59ac41209443a.png","slug":"c96a2283efc6cc31030410ff42e59ac41209443a.png","post":"clfl5dwq10003qcu48u8scs43","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/dfd1bcd4b5e9efbe1d7e8d52c289e292c4bd2b04.png","slug":"dfd1bcd4b5e9efbe1d7e8d52c289e292c4bd2b04.png","post":"clfl5dwq10003qcu48u8scs43","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/fc261c3347d67a16ae3d5eef1b72182071954565.png","slug":"fc261c3347d67a16ae3d5eef1b72182071954565.png","post":"clfl5dwq10003qcu48u8scs43","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/git.png","slug":"git.png","post":"clfl5dwq10003qcu48u8scs43","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/git01.png","slug":"git01.png","post":"clfl5dwq10003qcu48u8scs43","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/practice00.png","slug":"practice00.png","post":"clfl5dwq10003qcu48u8scs43","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/practice01.png","slug":"practice01.png","post":"clfl5dwq10003qcu48u8scs43","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/practice02.png","slug":"practice02.png","post":"clfl5dwq10003qcu48u8scs43","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/practice03.png","slug":"practice03.png","post":"clfl5dwq10003qcu48u8scs43","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/practice04.png","slug":"practice04.png","post":"clfl5dwq10003qcu48u8scs43","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/practice05.png","slug":"practice05.png","post":"clfl5dwq10003qcu48u8scs43","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/practice06.png","slug":"practice06.png","post":"clfl5dwq10003qcu48u8scs43","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/practice07.png","slug":"practice07.png","post":"clfl5dwq10003qcu48u8scs43","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/practice08.png","slug":"practice08.png","post":"clfl5dwq10003qcu48u8scs43","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/practice09.png","slug":"practice09.png","post":"clfl5dwq10003qcu48u8scs43","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/practice11.png","slug":"practice11.png","post":"clfl5dwq10003qcu48u8scs43","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/practice12.png","slug":"practice12.png","post":"clfl5dwq10003qcu48u8scs43","modified":0,"renderable":0},{"_id":"source/_posts/videos/b4c79bb4937a8fe3e059d09f307c0293b448d348.jpg","slug":"b4c79bb4937a8fe3e059d09f307c0293b448d348.jpg","post":"clfl5dwq20004qcu47x6l8a1e","modified":0,"renderable":0},{"_id":"source/_posts/videos/CodWar.jpg","slug":"CodWar.jpg","post":"clfl5dwq20004qcu47x6l8a1e","modified":0,"renderable":0},{"_id":"source/_posts/SingleChip/08a01404c19e5459d57c8e384f5eaf22869a43eb.png","slug":"08a01404c19e5459d57c8e384f5eaf22869a43eb.png","post":"clfybn8fj0000sou47884fhom","modified":0,"renderable":0},{"_id":"source/_posts/SingleChip/2023-04-02-02-04-46-image.png","slug":"2023-04-02-02-04-46-image.png","post":"clfybn8fj0000sou47884fhom","modified":0,"renderable":0},{"_id":"source/_posts/SingleChip/2023-04-02-02-04-59-image.png","slug":"2023-04-02-02-04-59-image.png","post":"clfybn8fj0000sou47884fhom","modified":0,"renderable":0},{"_id":"source/_posts/SingleChip/2023-04-02-02-05-40-image.png","slug":"2023-04-02-02-05-40-image.png","post":"clfybn8fj0000sou47884fhom","modified":0,"renderable":0},{"_id":"source/_posts/SingleChip/426941f16f054370a2e48c0b9334b919349fd85a.png","slug":"426941f16f054370a2e48c0b9334b919349fd85a.png","post":"clfybn8fj0000sou47884fhom","modified":0,"renderable":0},{"_id":"source/_posts/SingleChip/4c9eeaf452c81e4203aab3ab35f203b530e08202.png","slug":"4c9eeaf452c81e4203aab3ab35f203b530e08202.png","post":"clfybn8fj0000sou47884fhom","modified":0,"renderable":0},{"_id":"source/_posts/SingleChip/53dd30183091b0bb68dfbdb15031cc2dfa2e0306.png","slug":"53dd30183091b0bb68dfbdb15031cc2dfa2e0306.png","post":"clfybn8fj0000sou47884fhom","modified":0,"renderable":0},{"_id":"source/_posts/SingleChip/54c588817fcd205435a974f1d8077220d5485bf4.png","slug":"54c588817fcd205435a974f1d8077220d5485bf4.png","post":"clfybn8fj0000sou47884fhom","modified":0,"renderable":0},{"_id":"source/_posts/SingleChip/57037c8bea42c86053227fe549874b419653b56c.png","slug":"57037c8bea42c86053227fe549874b419653b56c.png","post":"clfybn8fj0000sou47884fhom","modified":0,"renderable":0},{"_id":"source/_posts/SingleChip/62d506ea99c99e2d95a5c5d0b00410291b1a7de4.png","slug":"62d506ea99c99e2d95a5c5d0b00410291b1a7de4.png","post":"clfybn8fj0000sou47884fhom","modified":0,"renderable":0},{"_id":"source/_posts/SingleChip/ba71358b9ca3c9a533af1de889672b443827b2b5.png","slug":"ba71358b9ca3c9a533af1de889672b443827b2b5.png","post":"clfybn8fj0000sou47884fhom","modified":0,"renderable":0},{"_id":"source/_posts/SingleChip/d5a14db6ef5b8ee6e4e4628c1290b38445a7835e.png","slug":"d5a14db6ef5b8ee6e4e4628c1290b38445a7835e.png","post":"clfybn8fj0000sou47884fhom","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"clfl5dwq20004qcu47x6l8a1e","tag_id":"clfl5dwq30005qcu4beev7e2i","_id":"clfl5dwq50009qcu49tkset9b"},{"post_id":"clfl5dwq20004qcu47x6l8a1e","tag_id":"clfl5dwq40006qcu42s4l1kyx","_id":"clfl5dwq5000aqcu44f4n22ca"},{"post_id":"clfl5dwq20004qcu47x6l8a1e","tag_id":"clfl5dwq40007qcu4307afyyz","_id":"clfl5dwq5000bqcu4hkzqa2p3"},{"post_id":"clfl5dwq20004qcu47x6l8a1e","tag_id":"clfl5dwq50008qcu44t49fi8u","_id":"clfl5dwq5000cqcu4g1ka6deb"}],"Tag":[{"name":"冷战","_id":"clfl5dwq30005qcu4beev7e2i"},{"name":"历史","_id":"clfl5dwq40006qcu42s4l1kyx"},{"name":"美国","_id":"clfl5dwq40007qcu4307afyyz"},{"name":"苏联","_id":"clfl5dwq50008qcu44t49fi8u"}]}}