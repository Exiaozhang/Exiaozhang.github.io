{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/css/noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.ico","path":"images/favicon-16x16-next.ico","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.ico","path":"images/favicon-32x32-next.ico","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/matomo.js","path":"js/third-party/analytics/matomo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/gitter.js","path":"js/third-party/chat/gitter.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/ET框架TulipBubble实现逻辑.md","hash":"4ac90531d9c59d940621a6d657425dfa515a9c7d","modified":1680851962670},{"_id":"source/_posts/ET框架初步理解.md","hash":"b22250df0355b6be29c8c2eb731fb65e5c9e4d84","modified":1680696722594},{"_id":"source/_posts/Github使用.md","hash":"e50781d414b5042bb26470ff0739bd9f75fb1963","modified":1680696722594},{"_id":"source/_posts/SingleChip.md","hash":"40c2cbaca1c81c44937b9892d3b7d47e886281b1","modified":1680858672750},{"_id":"source/_posts/videos.md","hash":"fb0e9fc88cbeaeb7352f583ea5bca0ba070d252f","modified":1680696722610},{"_id":"source/tags/index.md","hash":"24db9f7590579fd8ba2f4e578f1e8f6970ad7c5b","modified":1680696722610},{"_id":"source/_posts/ET框架TulipBubble实现逻辑/2023-03-23-21-05-52-image.png","hash":"bde4ff7002cd030fa1102020239644bcb1173e63","modified":1680696722594},{"_id":"source/_posts/ET框架初步理解/4a45803c69ed8b7283f933aa6e1748973976ef4c.png","hash":"099947dcd47ccf15acd4bfb492893de18f6d44e3","modified":1680696722594},{"_id":"source/_posts/ET框架初步理解/6e285ffc782c8443b1070964510e9530573f6c2d.png","hash":"e69da7540315e68734be8a58acde9fe38b18705c","modified":1680696722594},{"_id":"source/_posts/ET框架初步理解/7845ce3fdee147fca9d5c7fe4d86a890b717ecfe.png","hash":"a3e70c29093723ed7e586ae84e722ba191e1cb41","modified":1680696722594},{"_id":"source/_posts/ET框架初步理解/BackConfig.png","hash":"e69da7540315e68734be8a58acde9fe38b18705c","modified":1680696722594},{"_id":"source/_posts/ET框架初步理解/BackEnd.png","hash":"a3e70c29093723ed7e586ae84e722ba191e1cb41","modified":1680696722594},{"_id":"source/_posts/ET框架初步理解/front.png","hash":"099947dcd47ccf15acd4bfb492893de18f6d44e3","modified":1680696722594},{"_id":"source/_posts/Github使用/089c68368fd64dc9463fcbb493992b46998e45ad.png","hash":"4d47c07f05640c03c28bbdb717d7a95bb5f24bb1","modified":1680696722594},{"_id":"source/_posts/Github使用/14.png","hash":"7677a6db1891da89ab84e408979b0c7c424678c3","modified":1680696722598},{"_id":"source/_posts/Github使用/15.png","hash":"2fbdb63fdcf5c2bdcbedff9dab6ab024fb7ee1c3","modified":1680696722598},{"_id":"source/_posts/Github使用/2ac963f71072ecd1cc7f56f9153107153b737a36.png","hash":"10bb4f3cb67e25f5b2519d76448c673b7747527d","modified":1680696722598},{"_id":"source/_posts/Github使用/3aa70b0531dc3e2625c09c1ef8eac0078a29f54e.png","hash":"75abf9f7efe0ee474d0411193e1198dc68f86fd3","modified":1680696722598},{"_id":"source/_posts/Github使用/62a3a7a6fbde2da426ced06d782dbd6ee43fb5c4.png","hash":"6775f387bca276e70ff2514007ad175aaf9ebbc1","modified":1680696722598},{"_id":"source/_posts/Github使用/69a4adad5fa74c60aa7fdd3ac358f9bb718b3b4b.png","hash":"2fbdb63fdcf5c2bdcbedff9dab6ab024fb7ee1c3","modified":1680696722602},{"_id":"source/_posts/Github使用/c81d9e95a6974e43bb3d62b5ce7029b0c535f29d.png","hash":"7677a6db1891da89ab84e408979b0c7c424678c3","modified":1680696722602},{"_id":"source/_posts/Github使用/c96a2283efc6cc31030410ff42e59ac41209443a.png","hash":"1b48b87d2eaea4bbea51fc48cf0343873ac0f6be","modified":1680696722602},{"_id":"source/_posts/Github使用/dfd1bcd4b5e9efbe1d7e8d52c289e292c4bd2b04.png","hash":"5996a234a8b2c6e464289dccc762abe582f41ad4","modified":1680696722602},{"_id":"source/_posts/Github使用/fc261c3347d67a16ae3d5eef1b72182071954565.png","hash":"95c5bc92ed845f1ebe8ec0b1ab0bafdfa2f11421","modified":1680696722602},{"_id":"source/_posts/Github使用/git.png","hash":"95c5bc92ed845f1ebe8ec0b1ab0bafdfa2f11421","modified":1680696722602},{"_id":"source/_posts/Github使用/practice00.png","hash":"75abf9f7efe0ee474d0411193e1198dc68f86fd3","modified":1680696722602},{"_id":"source/_posts/Github使用/practice04.png","hash":"6775f387bca276e70ff2514007ad175aaf9ebbc1","modified":1680696722606},{"_id":"source/_posts/Github使用/practice05.png","hash":"1b48b87d2eaea4bbea51fc48cf0343873ac0f6be","modified":1680696722606},{"_id":"source/_posts/Github使用/practice06.png","hash":"10bb4f3cb67e25f5b2519d76448c673b7747527d","modified":1680696722606},{"_id":"source/_posts/Github使用/practice11.png","hash":"4d47c07f05640c03c28bbdb717d7a95bb5f24bb1","modified":1680696722606},{"_id":"source/_posts/Github使用/practice12.png","hash":"5996a234a8b2c6e464289dccc762abe582f41ad4","modified":1680696722606},{"_id":"source/_posts/SingleChip/08a01404c19e5459d57c8e384f5eaf22869a43eb.png","hash":"bba592f3efaa9b21a2b296813d157b34d4ccf4ad","modified":1680696722610},{"_id":"source/_posts/SingleChip/426941f16f054370a2e48c0b9334b919349fd85a.png","hash":"c7d0fe0ba21e89f4b93ee55462adcadf094607cf","modified":1680696722610},{"_id":"source/_posts/SingleChip/4c9eeaf452c81e4203aab3ab35f203b530e08202.png","hash":"7dfc6fc126437e107817781a48e0fc6d620d7919","modified":1680696722610},{"_id":"source/_posts/SingleChip/54c588817fcd205435a974f1d8077220d5485bf4.png","hash":"db1f87f906380a51ec28b7fb9ba5f1a4598fa466","modified":1680696722610},{"_id":"source/_posts/SingleChip/57037c8bea42c86053227fe549874b419653b56c.png","hash":"7a43492f3bbbb9e7a242a88d2383d7a3991abd02","modified":1680696722610},{"_id":"source/_posts/SingleChip/d5a14db6ef5b8ee6e4e4628c1290b38445a7835e.png","hash":"039d45d98182217a3d581bcc86a3d499be2df101","modified":1680696722610},{"_id":"source/_posts/videos/CodWar.jpg","hash":"d8a2da35a9f9aeee81cec02721bc69e52a929fe5","modified":1680696722610},{"_id":"source/_posts/videos/b4c79bb4937a8fe3e059d09f307c0293b448d348.jpg","hash":"d8a2da35a9f9aeee81cec02721bc69e52a929fe5","modified":1680696722610},{"_id":"source/_posts/.idea/.idea._posts.dir/.idea/.gitignore","hash":"8842ff3da6ee1c95d31d888791f392495f0e2eee","modified":1680696722594},{"_id":"source/_posts/.idea/.idea._posts.dir/.idea/encodings.xml","hash":"87f8739b05f4041104c270b2999084fb96ec4da3","modified":1680696722594},{"_id":"source/_posts/.idea/.idea._posts.dir/.idea/indexLayout.xml","hash":"1351667d44a62abdf7a637d274ea4f8ac0b24d91","modified":1680696722594},{"_id":"source/_posts/Github使用/265bf46b38778fb7476094dda85d00debb635e85.png","hash":"bfb25df7eec92350e8320d2bb12879e0192560dc","modified":1680696722598},{"_id":"source/_posts/Github使用/5ea18123f9a50a08ca1fd5562c479b4aa184a2e4.png","hash":"8d3132d4b3e9cb6d8403a26a224a63488e83df51","modified":1680696722598},{"_id":"source/_posts/Github使用/practice01.png","hash":"bfb25df7eec92350e8320d2bb12879e0192560dc","modified":1680696722602},{"_id":"source/_posts/Github使用/practice08.png","hash":"8d3132d4b3e9cb6d8403a26a224a63488e83df51","modified":1680696722606},{"_id":"source/_posts/SingleChip/53dd30183091b0bb68dfbdb15031cc2dfa2e0306.png","hash":"4b87b76ad8ee5a78483ec34af4602d89bf102769","modified":1680696722610},{"_id":"source/_posts/SingleChip/62d506ea99c99e2d95a5c5d0b00410291b1a7de4.png","hash":"8e789ab593ccf3bfecc41e9d019808797448d7ef","modified":1680696722610},{"_id":"source/_posts/SingleChip/ba71358b9ca3c9a533af1de889672b443827b2b5.png","hash":"25e64925ccd989e516653983aa286b3ed756b7ef","modified":1680696722610},{"_id":"source/_posts/Github使用/13.png","hash":"83c9405fddb316a574fed3b4c4e53f97cfae2434","modified":1680696722594},{"_id":"source/_posts/Github使用/51204e17ea43f7a1992ea9abbf9ecb48768694fa.png","hash":"d2e4845c696d32fa1b277633f3c51d96beb9bef8","modified":1680696722598},{"_id":"source/_posts/Github使用/578439ae227066f02d1319f645f09b0567c46bd6.png","hash":"dfdf31f250ed49d7bcbadc87543eebfa19ef70d5","modified":1680696722598},{"_id":"source/_posts/Github使用/5a1f2bfbce2c6557b2d3442934c0a92b8a606944.png","hash":"84a8316c92b9fb561f279cdd2c47e2993b73bd07","modified":1680696722598},{"_id":"source/_posts/Github使用/6aa5405ba7ffbe9c8760c5891854c1041e688d10.png","hash":"7f6a71fbc1baa1cda2ca035ba6c9869a5bfc2707","modified":1680696722602},{"_id":"source/_posts/Github使用/86324066a24e3eb32af8305f91c0a064582ae9d5.png","hash":"5a51c07bcd6d4ffc9d848b8255be5311f7c52336","modified":1680696722602},{"_id":"source/_posts/Github使用/git01.png","hash":"5a51c07bcd6d4ffc9d848b8255be5311f7c52336","modified":1680696722602},{"_id":"source/_posts/Github使用/practice02.png","hash":"84a8316c92b9fb561f279cdd2c47e2993b73bd07","modified":1680696722606},{"_id":"source/_posts/Github使用/practice03.png","hash":"dfdf31f250ed49d7bcbadc87543eebfa19ef70d5","modified":1680696722606},{"_id":"source/_posts/Github使用/practice07.png","hash":"d2e4845c696d32fa1b277633f3c51d96beb9bef8","modified":1680696722606},{"_id":"source/_posts/Github使用/practice09.png","hash":"7f6a71fbc1baa1cda2ca035ba6c9869a5bfc2707","modified":1680696722606},{"_id":"source/_posts/Github使用/10.png","hash":"571fa7d797a24a5fc7062744c82fadad88818d7b","modified":1680696722594},{"_id":"source/_posts/Github使用/7e1e6ca628c6bcc92afce94e8ce7a0cd9a491ac1.png","hash":"571fa7d797a24a5fc7062744c82fadad88818d7b","modified":1680696722602},{"_id":"source/_posts/SingleChip/2023-04-02-02-04-46-image.png","hash":"76b60efcdb909622a52e2370f92b54a420e875c6","modified":1680696722610},{"_id":"source/_posts/SingleChip/2023-04-02-02-04-59-image.png","hash":"76b60efcdb909622a52e2370f92b54a420e875c6","modified":1680696722610},{"_id":"source/_posts/SingleChip/2023-04-02-02-05-40-image.png","hash":"76b60efcdb909622a52e2370f92b54a420e875c6","modified":1680696722610},{"_id":"public/tags/index.html","hash":"9a48ca94fc6c1b9b74d660d6190c80585a9b8ef7","modified":1680857432055},{"_id":"public/2023/04/02/SingleChip/index.html","hash":"4ea664c0bc6f532b75f7202bf5f5cfc8ddbbb367","modified":1680858677728},{"_id":"public/2023/03/23/ET框架TulipBubble实现逻辑/index.html","hash":"7bb386475384de9ad31320029cd10f3374dc4f32","modified":1680857432055},{"_id":"public/2023/03/20/ET框架初步理解/index.html","hash":"f1fc7b0abfa91341d495881ea1429d9bc267d60f","modified":1680857432055},{"_id":"public/2023/03/16/Github使用/index.html","hash":"0f97f7167c95e4dc24dd1104ee325eace728a1cc","modified":1680857432055},{"_id":"public/2023/02/25/videos/index.html","hash":"9b6c14bcb3899e7ffc586fdf1fc32a09b885c496","modified":1680857432055},{"_id":"public/archives/index.html","hash":"10ff148587f35291473b627b3a1b8afe5f5b8db4","modified":1680857432055},{"_id":"public/archives/2023/index.html","hash":"5dcdc4a48dcb6b1e2f1b691038c0ead6304815f0","modified":1680857432055},{"_id":"public/archives/2023/02/index.html","hash":"b8c87d61ed14c208ce659c4836a19e925559d095","modified":1680857432055},{"_id":"public/archives/2023/03/index.html","hash":"e53ffd4ac9ffea26c395da54a30ffc4e0a87d180","modified":1680857432055},{"_id":"public/archives/2023/04/index.html","hash":"fe3fd250a6d3c33ded144c6da93da032a97cbcd7","modified":1680857432055},{"_id":"public/index.html","hash":"aa4523b914fd0bdf00f87122aadf8d7e9cc36ab3","modified":1680858677728},{"_id":"public/tags/冷战/index.html","hash":"af0c5130d500d31439594149fc687b4bb6be25f7","modified":1680857432055},{"_id":"public/tags/历史/index.html","hash":"215d8834cece77c186359e548ad116d6f0fec4fd","modified":1680857432055},{"_id":"public/tags/美国/index.html","hash":"b50ca78f2353ceb029901f1b0d3c412acca12fd4","modified":1680857432055},{"_id":"public/tags/苏联/index.html","hash":"50238f9e6ebad9b10b998685fea2a927fe746abc","modified":1680857432055},{"_id":"public/2023/03/23/ET框架TulipBubble实现逻辑/2023-03-23-21-05-52-image.png","hash":"bde4ff7002cd030fa1102020239644bcb1173e63","modified":1680702142817},{"_id":"public/2023/03/20/ET框架初步理解/4a45803c69ed8b7283f933aa6e1748973976ef4c.png","hash":"099947dcd47ccf15acd4bfb492893de18f6d44e3","modified":1680702142817},{"_id":"public/2023/03/20/ET框架初步理解/6e285ffc782c8443b1070964510e9530573f6c2d.png","hash":"e69da7540315e68734be8a58acde9fe38b18705c","modified":1680702142817},{"_id":"public/2023/03/20/ET框架初步理解/7845ce3fdee147fca9d5c7fe4d86a890b717ecfe.png","hash":"a3e70c29093723ed7e586ae84e722ba191e1cb41","modified":1680702142817},{"_id":"public/2023/03/20/ET框架初步理解/BackConfig.png","hash":"e69da7540315e68734be8a58acde9fe38b18705c","modified":1680702142817},{"_id":"public/2023/03/20/ET框架初步理解/BackEnd.png","hash":"a3e70c29093723ed7e586ae84e722ba191e1cb41","modified":1680702142817},{"_id":"public/2023/03/20/ET框架初步理解/front.png","hash":"099947dcd47ccf15acd4bfb492893de18f6d44e3","modified":1680702142817},{"_id":"public/2023/03/16/Github使用/089c68368fd64dc9463fcbb493992b46998e45ad.png","hash":"4d47c07f05640c03c28bbdb717d7a95bb5f24bb1","modified":1680702142817},{"_id":"public/2023/03/16/Github使用/14.png","hash":"7677a6db1891da89ab84e408979b0c7c424678c3","modified":1680702142817},{"_id":"public/2023/03/16/Github使用/15.png","hash":"2fbdb63fdcf5c2bdcbedff9dab6ab024fb7ee1c3","modified":1680702142817},{"_id":"public/2023/03/16/Github使用/2ac963f71072ecd1cc7f56f9153107153b737a36.png","hash":"10bb4f3cb67e25f5b2519d76448c673b7747527d","modified":1680702142817},{"_id":"public/2023/03/16/Github使用/3aa70b0531dc3e2625c09c1ef8eac0078a29f54e.png","hash":"75abf9f7efe0ee474d0411193e1198dc68f86fd3","modified":1680702142817},{"_id":"public/2023/03/16/Github使用/62a3a7a6fbde2da426ced06d782dbd6ee43fb5c4.png","hash":"6775f387bca276e70ff2514007ad175aaf9ebbc1","modified":1680702142817},{"_id":"public/2023/03/16/Github使用/69a4adad5fa74c60aa7fdd3ac358f9bb718b3b4b.png","hash":"2fbdb63fdcf5c2bdcbedff9dab6ab024fb7ee1c3","modified":1680702142817},{"_id":"public/2023/03/16/Github使用/c81d9e95a6974e43bb3d62b5ce7029b0c535f29d.png","hash":"7677a6db1891da89ab84e408979b0c7c424678c3","modified":1680702142817},{"_id":"public/2023/03/16/Github使用/c96a2283efc6cc31030410ff42e59ac41209443a.png","hash":"1b48b87d2eaea4bbea51fc48cf0343873ac0f6be","modified":1680702142817},{"_id":"public/2023/03/16/Github使用/dfd1bcd4b5e9efbe1d7e8d52c289e292c4bd2b04.png","hash":"5996a234a8b2c6e464289dccc762abe582f41ad4","modified":1680702142817},{"_id":"public/2023/03/16/Github使用/fc261c3347d67a16ae3d5eef1b72182071954565.png","hash":"95c5bc92ed845f1ebe8ec0b1ab0bafdfa2f11421","modified":1680702142817},{"_id":"public/2023/03/16/Github使用/git.png","hash":"95c5bc92ed845f1ebe8ec0b1ab0bafdfa2f11421","modified":1680702142817},{"_id":"public/2023/03/16/Github使用/practice00.png","hash":"75abf9f7efe0ee474d0411193e1198dc68f86fd3","modified":1680702142817},{"_id":"public/2023/03/16/Github使用/practice04.png","hash":"6775f387bca276e70ff2514007ad175aaf9ebbc1","modified":1680702142817},{"_id":"public/2023/03/16/Github使用/practice05.png","hash":"1b48b87d2eaea4bbea51fc48cf0343873ac0f6be","modified":1680702142817},{"_id":"public/2023/03/16/Github使用/practice06.png","hash":"10bb4f3cb67e25f5b2519d76448c673b7747527d","modified":1680702142817},{"_id":"public/2023/03/16/Github使用/practice11.png","hash":"4d47c07f05640c03c28bbdb717d7a95bb5f24bb1","modified":1680702142817},{"_id":"public/2023/03/16/Github使用/practice12.png","hash":"5996a234a8b2c6e464289dccc762abe582f41ad4","modified":1680702142817},{"_id":"public/2023/04/02/SingleChip/08a01404c19e5459d57c8e384f5eaf22869a43eb.png","hash":"bba592f3efaa9b21a2b296813d157b34d4ccf4ad","modified":1680702142817},{"_id":"public/2023/04/02/SingleChip/426941f16f054370a2e48c0b9334b919349fd85a.png","hash":"c7d0fe0ba21e89f4b93ee55462adcadf094607cf","modified":1680702142817},{"_id":"public/2023/04/02/SingleChip/4c9eeaf452c81e4203aab3ab35f203b530e08202.png","hash":"7dfc6fc126437e107817781a48e0fc6d620d7919","modified":1680702142817},{"_id":"public/2023/04/02/SingleChip/54c588817fcd205435a974f1d8077220d5485bf4.png","hash":"db1f87f906380a51ec28b7fb9ba5f1a4598fa466","modified":1680702142817},{"_id":"public/2023/04/02/SingleChip/57037c8bea42c86053227fe549874b419653b56c.png","hash":"7a43492f3bbbb9e7a242a88d2383d7a3991abd02","modified":1680702142817},{"_id":"public/2023/04/02/SingleChip/d5a14db6ef5b8ee6e4e4628c1290b38445a7835e.png","hash":"039d45d98182217a3d581bcc86a3d499be2df101","modified":1680702142817},{"_id":"public/2023/02/25/videos/CodWar.jpg","hash":"d8a2da35a9f9aeee81cec02721bc69e52a929fe5","modified":1680702142817},{"_id":"public/2023/02/25/videos/b4c79bb4937a8fe3e059d09f307c0293b448d348.jpg","hash":"d8a2da35a9f9aeee81cec02721bc69e52a929fe5","modified":1680702142817},{"_id":"public/2023/03/16/Github使用/265bf46b38778fb7476094dda85d00debb635e85.png","hash":"bfb25df7eec92350e8320d2bb12879e0192560dc","modified":1680702142817},{"_id":"public/2023/03/16/Github使用/5ea18123f9a50a08ca1fd5562c479b4aa184a2e4.png","hash":"8d3132d4b3e9cb6d8403a26a224a63488e83df51","modified":1680702142817},{"_id":"public/2023/03/16/Github使用/practice01.png","hash":"bfb25df7eec92350e8320d2bb12879e0192560dc","modified":1680702142817},{"_id":"public/2023/03/16/Github使用/practice08.png","hash":"8d3132d4b3e9cb6d8403a26a224a63488e83df51","modified":1680702142817},{"_id":"public/2023/04/02/SingleChip/53dd30183091b0bb68dfbdb15031cc2dfa2e0306.png","hash":"4b87b76ad8ee5a78483ec34af4602d89bf102769","modified":1680702142817},{"_id":"public/2023/04/02/SingleChip/62d506ea99c99e2d95a5c5d0b00410291b1a7de4.png","hash":"8e789ab593ccf3bfecc41e9d019808797448d7ef","modified":1680702142817},{"_id":"public/2023/04/02/SingleChip/ba71358b9ca3c9a533af1de889672b443827b2b5.png","hash":"25e64925ccd989e516653983aa286b3ed756b7ef","modified":1680702142817},{"_id":"public/2023/03/16/Github使用/13.png","hash":"83c9405fddb316a574fed3b4c4e53f97cfae2434","modified":1680702142817},{"_id":"public/2023/03/16/Github使用/578439ae227066f02d1319f645f09b0567c46bd6.png","hash":"dfdf31f250ed49d7bcbadc87543eebfa19ef70d5","modified":1680702142817},{"_id":"public/2023/03/16/Github使用/51204e17ea43f7a1992ea9abbf9ecb48768694fa.png","hash":"d2e4845c696d32fa1b277633f3c51d96beb9bef8","modified":1680702142817},{"_id":"public/2023/03/16/Github使用/5a1f2bfbce2c6557b2d3442934c0a92b8a606944.png","hash":"84a8316c92b9fb561f279cdd2c47e2993b73bd07","modified":1680702142817},{"_id":"public/2023/03/16/Github使用/6aa5405ba7ffbe9c8760c5891854c1041e688d10.png","hash":"7f6a71fbc1baa1cda2ca035ba6c9869a5bfc2707","modified":1680702142817},{"_id":"public/2023/03/16/Github使用/86324066a24e3eb32af8305f91c0a064582ae9d5.png","hash":"5a51c07bcd6d4ffc9d848b8255be5311f7c52336","modified":1680702142817},{"_id":"public/2023/03/16/Github使用/git01.png","hash":"5a51c07bcd6d4ffc9d848b8255be5311f7c52336","modified":1680702142817},{"_id":"public/2023/03/16/Github使用/practice02.png","hash":"84a8316c92b9fb561f279cdd2c47e2993b73bd07","modified":1680702142817},{"_id":"public/2023/03/16/Github使用/practice03.png","hash":"dfdf31f250ed49d7bcbadc87543eebfa19ef70d5","modified":1680702142817},{"_id":"public/2023/03/16/Github使用/practice07.png","hash":"d2e4845c696d32fa1b277633f3c51d96beb9bef8","modified":1680702142817},{"_id":"public/2023/03/16/Github使用/practice09.png","hash":"7f6a71fbc1baa1cda2ca035ba6c9869a5bfc2707","modified":1680702142817},{"_id":"public/2023/03/16/Github使用/10.png","hash":"571fa7d797a24a5fc7062744c82fadad88818d7b","modified":1680702142817},{"_id":"public/2023/03/16/Github使用/7e1e6ca628c6bcc92afce94e8ce7a0cd9a491ac1.png","hash":"571fa7d797a24a5fc7062744c82fadad88818d7b","modified":1680702142817},{"_id":"public/2023/04/02/SingleChip/2023-04-02-02-04-46-image.png","hash":"76b60efcdb909622a52e2370f92b54a420e875c6","modified":1680702142817},{"_id":"public/2023/04/02/SingleChip/2023-04-02-02-04-59-image.png","hash":"76b60efcdb909622a52e2370f92b54a420e875c6","modified":1680702142817},{"_id":"public/2023/04/02/SingleChip/2023-04-02-02-05-40-image.png","hash":"76b60efcdb909622a52e2370f92b54a420e875c6","modified":1680702142817},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1680756906124},{"_id":"themes/next/.gitattributes","hash":"ec43734985e1cafd53d88ded3020103f7416123c","modified":1680756906124},{"_id":"themes/next/.eslintrc.json","hash":"9c0762486f24a8c5e60f8b6c875e4c4728942649","modified":1680756906124},{"_id":"themes/next/.stylelintrc","hash":"dedb8dd4d454cb1bb6aba594ef2cbd05ec2427d8","modified":1680756906124},{"_id":"themes/next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1680756906124},{"_id":"themes/next/.gitignore","hash":"417520c4dbbeab9c7e3ab10d944da0886366a0ee","modified":1680756906124},{"_id":"themes/next/_vendors.yml","hash":"463e3097d6e245105f6612994215ab5c637cae28","modified":1680756906124},{"_id":"themes/next/README.md","hash":"36c4b25587ca494102323dab5a38de5490451a64","modified":1680756906124},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1680756906124},{"_id":"themes/next/package.json","hash":"a192fe2e0904b490c885e8545a409536b41ef46e","modified":1680756906128},{"_id":"themes/next/renovate.json","hash":"cb29cc16e61b0b8a6dac34657d76822ae29ad5aa","modified":1680756906128},{"_id":"themes/next/.githooks/install.js","hash":"0977cb57c8b91ea166b5bbc481e4ddeaf77e9b18","modified":1680756906124},{"_id":"themes/next/.githooks/pre-commit","hash":"f473eac1aaaa96c947d67988bbed140bbab1a821","modified":1680756906124},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"21cbff565a0445d3a880fff1ee417e309740a9ab","modified":1680756906124},{"_id":"themes/next/_config.yml","hash":"0dc106bdc3f6bea3576d2a8bca0a41485dbe4bed","modified":1680756906124},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"fa76760856429b6421abc54e63b2d3c815372900","modified":1680756906124},{"_id":"themes/next/.github/config.yml","hash":"7984e665e9de481a0e0e51fca5668337713f810b","modified":1680756906124},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1680756906124},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"330656d93b6c03df9fb1f2f0e3534c971969473b","modified":1680756906124},{"_id":"themes/next/.github/label-commenter-config.yml","hash":"1097fc47beeacfc1edb0248c27b17bf64bde3565","modified":1680756906124},{"_id":"themes/next/.github/labeler.yml","hash":"5c4bc2bd561e6d9b33ee118cc12218c5de46f72d","modified":1680756906124},{"_id":"themes/next/.github/release.yml","hash":"112310b81f959747f8eaafc2ca2150e1dcf916d8","modified":1680756906124},{"_id":"themes/next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1680756906124},{"_id":"themes/next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1680756906124},{"_id":"themes/next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1680756906124},{"_id":"themes/next/languages/ar.yml","hash":"46026e98fe279a9db5d68bf91afa5d8e41f9ccfb","modified":1680756906124},{"_id":"themes/next/languages/de.yml","hash":"c4fc18c338309271d1afe737e6c404a6fa313bbc","modified":1680756906124},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1680756906124},{"_id":"themes/next/languages/default.yml","hash":"4bbdb4284afe495437cf7817b97b45f60e12d1e4","modified":1680756906124},{"_id":"themes/next/languages/bn.yml","hash":"74133a827c104d1d84509177f283947fe9327a80","modified":1680756906124},{"_id":"themes/next/languages/es.yml","hash":"8b6d4a8a056df4362d20ae1f6ac7a590dd7246e5","modified":1680756906124},{"_id":"themes/next/languages/en.yml","hash":"4bbdb4284afe495437cf7817b97b45f60e12d1e4","modified":1680756906124},{"_id":"themes/next/languages/fa.yml","hash":"1e256c8df039ddeba66526c5eb2d6c79177a7fc6","modified":1680756906124},{"_id":"themes/next/languages/fr.yml","hash":"2436942610e38b73b175cb0f8ed1f8f23d42a7ce","modified":1680756906124},{"_id":"themes/next/languages/id.yml","hash":"c4bad93b23c7eefa730fd7fec5b05ace3ce9ca4d","modified":1680756906124},{"_id":"themes/next/languages/it.yml","hash":"4d6efcdaea89dfe751b7707d91858bf33d3538b7","modified":1680756906124},{"_id":"themes/next/languages/ko.yml","hash":"25ee0d5b9a0464a91af7d2efb33293c09ad5abdf","modified":1680756906124},{"_id":"themes/next/languages/ja.yml","hash":"a0906702d3c87d0e1661e300ad0bdf7e679a3d91","modified":1680756906124},{"_id":"themes/next/languages/nl.yml","hash":"8a4da307b4a19e3c96b90a07a2da8dc5d50e5d9e","modified":1680756906124},{"_id":"themes/next/languages/pt-BR.yml","hash":"10d80915c41328f31a4f2d8ac736bba020f373d8","modified":1680756906124},{"_id":"themes/next/languages/pt.yml","hash":"fa7c43ec872aee2739b25dd7260e0764ea9e26fd","modified":1680756906124},{"_id":"themes/next/languages/th.yml","hash":"4fac74a39d3906c4a727476be4750530a505933a","modified":1680756906124},{"_id":"themes/next/languages/ru.yml","hash":"16b96783ba363255b4c8156c3e1efebdb37676f8","modified":1680756906124},{"_id":"themes/next/languages/si.yml","hash":"034c5a0df49144e8f16ae2300dba9fde58b9329e","modified":1680756906124},{"_id":"themes/next/languages/tk.yml","hash":"37d9af426b040004841273d163059cd49cd67d65","modified":1680756906124},{"_id":"themes/next/languages/uk.yml","hash":"fbaed3039ed8605b81422003a4ecb2a6514e339d","modified":1680756906124},{"_id":"themes/next/languages/vi.yml","hash":"a6ba04c743a5b494ac56612ce6b858d9ae3ae1bd","modified":1680756906124},{"_id":"themes/next/languages/tr.yml","hash":"890f87f6a33ad8452b771607d4c3ff14810b35fa","modified":1680756906124},{"_id":"themes/next/languages/zh-CN.yml","hash":"5cebea74f3198a4a20cacf23069c3b91e4f03d85","modified":1680756906128},{"_id":"themes/next/languages/zh-HK.yml","hash":"8ab7219563dab13885840207a86055000d173465","modified":1680756906128},{"_id":"themes/next/languages/zh-TW.yml","hash":"9fdce9d316e205fc132b2181254ef3b04007a97d","modified":1680756906128},{"_id":"themes/next/layout/_layout.njk","hash":"fc0a45112f2dcfc2642404e8934ea32a793c3bd7","modified":1680756906128},{"_id":"themes/next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1680756906128},{"_id":"themes/next/layout/category.njk","hash":"c68b7343d0f8145010f93351908cc36ef6212ec1","modified":1680756906128},{"_id":"themes/next/layout/index.njk","hash":"dd63e488ae8cc144335a5958acedf6a16edd7a92","modified":1680756906128},{"_id":"themes/next/layout/post.njk","hash":"0bfce9f133f501a9a4837257e3b862b3bbca15be","modified":1680756906128},{"_id":"themes/next/test/index.js","hash":"6bf0289846538be3e9a63809af98f00e1fbdd90b","modified":1680756906136},{"_id":"themes/next/layout/page.njk","hash":"b0660b2af0ac7d3fda14ca4d9f2c9e79ef06c6f9","modified":1680756906128},{"_id":"themes/next/layout/tag.njk","hash":"9e16ba20c28a7f2c6bc75aa427f48122301a30aa","modified":1680756906128},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.yml","hash":"239e2f35798faf00393d125169cb170b888bfc9d","modified":1680756906124},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.yml","hash":"d78c3c9ee958490a239df057392d0d88dc355426","modified":1680756906124},{"_id":"themes/next/.github/ISSUE_TEMPLATE/config.yml","hash":"c40ae7903b6cc99f94c9d45ac7ba8c2850bb1309","modified":1680756906124},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.yml","hash":"0ce4a60c2908fc23964338c979f3dab3761be546","modified":1680756906124},{"_id":"themes/next/.github/workflows/codeql.yml","hash":"8da13d7c325addb6b7c1d9ac3683dafd43e3709a","modified":1680756906124},{"_id":"themes/next/.github/workflows/label-commenter.yml","hash":"434cc0674290958b1e9bbc46c3486f073c0722db","modified":1680756906124},{"_id":"themes/next/.github/workflows/labeler.yml","hash":"e9d51e93f239a2d4b69722c69db3463b4baf0f4c","modified":1680756906124},{"_id":"themes/next/.github/workflows/linter.yml","hash":"2ab8720e4b9534e48ba324b73b0b58cb54df689f","modified":1680756906124},{"_id":"themes/next/.github/workflows/lock.yml","hash":"f1bf7f86c11419b63323bd21e388e6bdaf24d27d","modified":1680756906124},{"_id":"themes/next/.github/workflows/pr-reminder.yml","hash":"3ab3e8d9dc0e1d9bd54f44fba476792fb1ee190d","modified":1680756906124},{"_id":"themes/next/.github/workflows/tester.yml","hash":"80a20c3a7522249f051a48239db41d1317e9b552","modified":1680756906124},{"_id":"themes/next/docs/ru/README.md","hash":"ac3c4a7616ea80f0d32d68d6e53233952ba756dc","modified":1680756906124},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7a06d443f374bd1e84294067a0ac796afd9fbe60","modified":1680756906124},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":1680756906124},{"_id":"themes/next/layout/_macro/post-collapse.njk","hash":"1a30d751871dabfa80940042ddb1f77d07d830b9","modified":1680756906128},{"_id":"themes/next/docs/zh-CN/README.md","hash":"9bbdbb0656505acceef9b9895a576164175fe888","modified":1680756906124},{"_id":"themes/next/layout/_macro/post.njk","hash":"7e8268fd5cbd552322b276f52459fd187c2453d2","modified":1680756906128},{"_id":"themes/next/layout/_macro/sidebar.njk","hash":"547c62ab14d9e05d2d9116db9048a677fbe1fb6d","modified":1680756906128},{"_id":"themes/next/layout/_partials/comments.njk","hash":"d0c470b0f6690aa217e9ada848c5e2e73fb27c6f","modified":1680756906128},{"_id":"themes/next/layout/_partials/footer.njk","hash":"c40760b559c516677c8b11a00ba50c011f2079fd","modified":1680756906128},{"_id":"themes/next/layout/_partials/widgets.njk","hash":"e7f988ecddb2159313699a00827a45eca5622bd4","modified":1680756906128},{"_id":"themes/next/layout/_scripts/index.njk","hash":"6668878a0f9a1166c6a879755f54a08d942da870","modified":1680756906128},{"_id":"themes/next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1680756906128},{"_id":"themes/next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":1680756906128},{"_id":"themes/next/layout/_partials/pagination.njk","hash":"bc719473ed5948ab6859449d60b8d36cfc1542b4","modified":1680756906128},{"_id":"themes/next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":1680756906128},{"_id":"themes/next/layout/_third-party/index.njk","hash":"aa37f8e98208177b63e3328d6e53b022c6edf3b2","modified":1680756906128},{"_id":"themes/next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1680756906128},{"_id":"themes/next/scripts/events/index.js","hash":"bd9ea82376cd87df611ea3ae077875c7c595a3df","modified":1680756906128},{"_id":"themes/next/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":1680756906128},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1680756906128},{"_id":"themes/next/scripts/filters/locals.js","hash":"9eb5310664759931287dd28ea39165dfb67f12ed","modified":1680756906128},{"_id":"themes/next/scripts/filters/minify.js","hash":"ce8477e7fb226525bae5872cd68a1c2c23ad50c8","modified":1680756906128},{"_id":"themes/next/scripts/filters/post.js","hash":"fdc8a0af90035e89c3fcb754a0eb189b8951a2bc","modified":1680756906132},{"_id":"themes/next/scripts/helpers/navigation.js","hash":"78107021101553c3d23e89290f7530b60cf4aa86","modified":1680756906132},{"_id":"themes/next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":1680756906132},{"_id":"themes/next/scripts/helpers/engine.js","hash":"d292b78485e8e8055712b0ed6de7cf559c5fbdcd","modified":1680756906132},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"fd24abfaba4d91923ddb6aecf0268b216678c8bd","modified":1680756906132},{"_id":"themes/next/scripts/helpers/next-paginator.js","hash":"e86c764b546e4fbb87970cabc4135a56f9ef9fe1","modified":1680756906132},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"226fccbe9c93265e65a300e3cb4bf6f9065cfdd7","modified":1680756906132},{"_id":"themes/next/scripts/helpers/next-vendors.js","hash":"afdd6a188a74c188f0dd154fac70efd4080ca262","modified":1680756906132},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1680756906132},{"_id":"themes/next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1680756906132},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1680756906132},{"_id":"themes/next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1680756906132},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"9ed799c329abf830f623689d7e136991256a24ca","modified":1680756906132},{"_id":"themes/next/scripts/tags/index.js","hash":"17f9451ce1f10f78437f52218757d38d4e1591b0","modified":1680756906132},{"_id":"themes/next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1680756906132},{"_id":"themes/next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1680756906132},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":1680756906132},{"_id":"themes/next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1680756906132},{"_id":"themes/next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1680756906132},{"_id":"themes/next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1680756906132},{"_id":"themes/next/source/css/_colors.styl","hash":"3c6798c10cc220d83481cb3f3782e78558cee789","modified":1680756906132},{"_id":"themes/next/source/css/main.styl","hash":"921a58577f411cf4eb5cfd66db0a241f8f88578c","modified":1680756906136},{"_id":"themes/next/source/css/noscript.styl","hash":"dadc81256afb127b77eac6763d5ee0ec9c77f0a3","modified":1680756906136},{"_id":"themes/next/source/css/_mixins.styl","hash":"83647a6207333b9609ba90b0946b3fa9548e6381","modified":1680756906132},{"_id":"themes/next/source/images/favicon-16x16-next.ico","hash":"5164e01c2aa538a4418552c8da9f6aa68a90e9a7","modified":1680756906136},{"_id":"themes/next/source/images/favicon-32x32-next.ico","hash":"1466029f6ce1e8d3b5069357cf4daeb947994818","modified":1680756906136},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1680756906136},{"_id":"themes/next/source/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1680756906136},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"3f7c55ed5980444dd2424697d8fddabf16f3b075","modified":1680756906136},{"_id":"themes/next/source/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1680756906136},{"_id":"themes/next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1680756906136},{"_id":"themes/next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1680756906136},{"_id":"themes/next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1680756906136},{"_id":"themes/next/source/js/next-boot.js","hash":"da0f07f9eaaa83de70128b0feaea3fdadb90457a","modified":1680756906136},{"_id":"themes/next/source/js/motion.js","hash":"770d63c26f22705311028a36b52e999cc8a2da82","modified":1680756906136},{"_id":"themes/next/source/js/pjax.js","hash":"b03ba78c6916ad2f390d55bc1bc18fafb64b0ebf","modified":1680756906136},{"_id":"themes/next/source/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1680756906136},{"_id":"themes/next/test/helpers/font.js","hash":"342ef3c6fd2dcca2a8802a516ed6d7f389fd2ca2","modified":1680756906136},{"_id":"themes/next/test/helpers/index.js","hash":"63ba28afed697f7b3574436b1133b8ecc9c0c357","modified":1680756906136},{"_id":"themes/next/test/helpers/next-url.js","hash":"a91d880cb75e0a8e65a7be4c7362b2c8ebfb7c4f","modified":1680756906136},{"_id":"themes/next/test/tags/button.js","hash":"48f2aa4c513e9e24bd6a811410520b74cd7ea88b","modified":1680756906136},{"_id":"themes/next/source/js/utils.js","hash":"5e1cf39de050964e97fb3ba0825aeec7f4bc36dd","modified":1680756906136},{"_id":"themes/next/test/tags/caniuse.js","hash":"aa5e728445caeaf7c2ccd0f3fcb2cad0c93ca6d1","modified":1680756906136},{"_id":"themes/next/test/tags/center-quote.js","hash":"7667342fd1a1417eaf6a254012b84ae40e8d13dd","modified":1680756906136},{"_id":"themes/next/test/tags/group-pictures.js","hash":"5c68ae0184f9da6e00ba199f2554d503d8e6da71","modified":1680756906136},{"_id":"themes/next/test/tags/index.js","hash":"e8779e54f0979b221858f8bb74dd081bb503b910","modified":1680756906136},{"_id":"themes/next/test/tags/mermaid.js","hash":"ab77be5f3c6d9a57c7b9dda6decf1906a736fef9","modified":1680756906136},{"_id":"themes/next/test/tags/link-grid.js","hash":"43d298fafb7c45a874b766d443843bd26346e689","modified":1680756906136},{"_id":"themes/next/test/tags/label.js","hash":"4ebf3698c258ca978b997acbdd0dece44069c09d","modified":1680756906136},{"_id":"themes/next/test/tags/note.js","hash":"3dcfcd65bf9f326972ea7571fdb1444200f5d07e","modified":1680756906136},{"_id":"themes/next/test/tags/pdf.js","hash":"fd6ea5123560a90f7e7c1eface23dbe1455db25f","modified":1680756906136},{"_id":"themes/next/test/tags/video.js","hash":"b796fc4dceb20a30e730c322bb5474c0162464cc","modified":1680756906136},{"_id":"themes/next/test/validate/index.js","hash":"5a95ccc8598667535bd022e988055c0e019f3670","modified":1680756906136},{"_id":"themes/next/layout/_partials/head/head-unique.njk","hash":"8da52a144060db1a0a088ccb2e6cc8376d1fce70","modified":1680756906128},{"_id":"themes/next/layout/_partials/head/head.njk","hash":"5388b157bba4a40b9312f4a45c6678974ccf0837","modified":1680756906128},{"_id":"themes/next/test/tags/tabs.js","hash":"d63722919f9da2e44d6b952801e10a2915ea9c12","modified":1680756906136},{"_id":"themes/next/layout/_partials/header/brand.njk","hash":"dd9c4c03e99dfde0dfb8edefcb2c933f2f560efc","modified":1680756906128},{"_id":"themes/next/layout/_partials/header/index.njk","hash":"650de421a8ce4cf685428ffbe0087ff84cbd1356","modified":1680756906128},{"_id":"themes/next/layout/_partials/header/menu-item.njk","hash":"41a8b0cc16f60fa085cb719d07216d86b6bc4bf8","modified":1680756906128},{"_id":"themes/next/layout/_partials/header/menu.njk","hash":"ee6fc2f111572d3eeab0a2fecbb2d6b3e37ab26b","modified":1680756906128},{"_id":"themes/next/layout/_partials/page/breadcrumb.njk","hash":"89825e75cc45e9709fa6ba89883669eedaff6f46","modified":1680756906128},{"_id":"themes/next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1680756906128},{"_id":"themes/next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1680756906128},{"_id":"themes/next/layout/_partials/header/sub-menu.njk","hash":"06480d8ec5f0b87eafd47f082f07968d7282dd5c","modified":1680756906128},{"_id":"themes/next/layout/_partials/page/schedule.njk","hash":"0f4bc8e257da60f77c0c1738607b2bde55810684","modified":1680756906128},{"_id":"themes/next/layout/_partials/post/post-copyright.njk","hash":"133942922e34abae9e4de7ea5591d77c0caa4b37","modified":1680756906128},{"_id":"themes/next/layout/_partials/post/post-followme.njk","hash":"c1e33b4889f75acc490af3c8bde0ec56c518ff41","modified":1680756906128},{"_id":"themes/next/layout/_partials/post/post-related.njk","hash":"e0986db00a0201dd3c60570f964829c84ba5bc68","modified":1680756906128},{"_id":"themes/next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1680756906128},{"_id":"themes/next/layout/_partials/post/post-meta.njk","hash":"9fa47e4fb342811da590ee4adc91cf81118c0a39","modified":1680756906128},{"_id":"themes/next/layout/_partials/post/post-reward.njk","hash":"e8b8a7c41e9ec612d0c0c73419529d55d1c16256","modified":1680756906128},{"_id":"themes/next/layout/_partials/post/post-share.njk","hash":"3f28cc4411c0ffc0e41b7970d5ab329c7e46f497","modified":1680756906128},{"_id":"themes/next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":1680756906128},{"_id":"themes/next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":1680756906128},{"_id":"themes/next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":1680756906128},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1680756906128},{"_id":"themes/next/layout/_third-party/analytics/cloudflare.njk","hash":"a5b8297c2c383124dd6a56e256ecc0c0dcf489be","modified":1680756906128},{"_id":"themes/next/layout/_partials/sidebar/site-overview.njk","hash":"70342218473a6e6aa9148de06bfffe121afb8548","modified":1680756906128},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1680756906128},{"_id":"themes/next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1680756906128},{"_id":"themes/next/layout/_third-party/analytics/index.njk","hash":"f900306497b133e8b098bd9f4b96b93d1d96c185","modified":1680756906128},{"_id":"themes/next/layout/_third-party/analytics/matomo.njk","hash":"4e89648a8ec8194c5823064cbca39c938a799006","modified":1680756906128},{"_id":"themes/next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"9dc00fcb0a05899f048eace9f9160b78956655d5","modified":1680756906128},{"_id":"themes/next/layout/_third-party/analytics/plausible.njk","hash":"ef9f2bb7110507f1c4336800af9157d5fa9765bd","modified":1680756906128},{"_id":"themes/next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1680756906128},{"_id":"themes/next/layout/_third-party/analytics/umami.njk","hash":"181f69b6718c7a8642a88652260cc0a26084a3ee","modified":1680756906128},{"_id":"themes/next/layout/_third-party/chat/gitter.njk","hash":"f8cc14b7aa949999a1faaeb7855e2f20b59a386d","modified":1680756906128},{"_id":"themes/next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1680756906128},{"_id":"themes/next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1680756906128},{"_id":"themes/next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1680756906128},{"_id":"themes/next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1680756906128},{"_id":"themes/next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1680756906128},{"_id":"themes/next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1680756906128},{"_id":"themes/next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1680756906128},{"_id":"themes/next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1680756906128},{"_id":"themes/next/layout/_third-party/math/katex.njk","hash":"1ebf658690468ea197bdd0416eb7cfa4bd0b083a","modified":1680756906128},{"_id":"themes/next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1680756906128},{"_id":"themes/next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1680756906128},{"_id":"themes/next/layout/_third-party/search/algolia-search.njk","hash":"24ed76e0c72a25ac152820c750a05826a706b6f4","modified":1680756906128},{"_id":"themes/next/layout/_third-party/search/localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":1680756906128},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1680756906128},{"_id":"themes/next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1680756906128},{"_id":"themes/next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1680756906128},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1680756906128},{"_id":"themes/next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1680756906128},{"_id":"themes/next/scripts/events/lib/config.js","hash":"9ec51eb61f7fee612ffc5252f489003a0fa301fc","modified":1680756906128},{"_id":"themes/next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":1680756906128},{"_id":"themes/next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1680756906128},{"_id":"themes/next/scripts/events/lib/navigation.js","hash":"dd3562686d95a50375e6fd32e717ccb0d99c1e3d","modified":1680756906128},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1680756906128},{"_id":"themes/next/scripts/events/lib/utils.js","hash":"ec996d0673f766167c86df0966e9da1ae036e103","modified":1680756906128},{"_id":"themes/next/scripts/events/lib/vendors.js","hash":"64e4024376b51fe81be7ad80235abdf0a83853bd","modified":1680756906128},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"5798cfc8f63665031dd3e01debed051628cec319","modified":1680756906128},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"19a402a225c31edffc50f202a14e0d582d3db23e","modified":1680756906128},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"a600a98e7436edeb31e291abca359885567df3c9","modified":1680756906128},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1680756906128},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1680756906128},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1680756906128},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1680756906128},{"_id":"themes/next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1680756906128},{"_id":"themes/next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1680756906128},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1680756906136},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a1418c9dc8c0f1a0ad4ded0f4627c45bf0db1a10","modified":1680756906136},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":1680756906136},{"_id":"themes/next/source/js/schemes/muse.js","hash":"ba7ba2c129d1f240c6a22cec3e53f3f22af64b6b","modified":1680756906136},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"48f4f277946a168d0db1ea02804e85c22ca2c7db","modified":1680756906136},{"_id":"themes/next/source/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1680756906136},{"_id":"themes/next/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1680756906136},{"_id":"themes/next/source/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1680756906136},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"7664491542046df9a3887cf40a06e00c0b4086a9","modified":1680756906132},{"_id":"themes/next/source/css/_common/components/index.styl","hash":"2298e521253b3bf376a2412271bc2a7d305051f3","modified":1680756906132},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"90a86045a33c1bae49fc2f6fa1e1b53170c7f77b","modified":1680756906132},{"_id":"themes/next/source/css/_common/outline/index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":1680756906132},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"d0a7c99095f490b0d2ed6b1be43d435960798cec","modified":1680756906132},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"64775c729512b30b144ab5ae9dc4a4dfd4e13f35","modified":1680756906132},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1680756906132},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1680756906132},{"_id":"themes/next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1680756906132},{"_id":"themes/next/source/css/_variables/base.styl","hash":"c4fc4e862d09221265ab1466085f057be2ad2e4d","modified":1680756906136},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"f4228c759db4a650c8d38745c2edd1dc83c45687","modified":1680756906132},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1680756906132},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"77b85d4de5ab747e04008ab31200311b29748740","modified":1680756906132},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1680756906132},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"fa4fd8f76464e214fb7318f325b13c2b62f4b478","modified":1680756906132},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"9dfe853c901bdc52fc950bacdf15484dbb9bf140","modified":1680756906132},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"fb550935d374e0bdf1097fce187337dc05cad3e1","modified":1680756906132},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"485d23ccb42c0d0c8ead7ea8930dd3e06d79a285","modified":1680756906132},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1680756906132},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"7fecfb76420f786d6bf60218a81705bb48fb1d18","modified":1680756906132},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"d856127cd7e0a28a88edf0b2eb860ede9c3fdb60","modified":1680756906132},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"b7f48be3c43bfa393d62142544a5487a67871713","modified":1680756906132},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1680756906132},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"547c0b5cd5e7ea10d21863d13a6b16579a49396c","modified":1680756906132},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"ac2dc0ce9c775a83ef7132ae957b54539366ac9c","modified":1680756906136},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1680756906136},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"4266eed6f75625bb30ef0280dc5d4093e7c3beb1","modified":1680756906136},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"72dc825c50357402c342d62ab60fc0c478ab6bc1","modified":1680756906136},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"91dbf3ca5c3a613d4e30618c120da535bf2d0336","modified":1680756906136},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1680756906136},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1680756906136},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1680756906136},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1680756906136},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1680756906136},{"_id":"themes/next/source/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1680756906136},{"_id":"themes/next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1680756906136},{"_id":"themes/next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1680756906136},{"_id":"themes/next/source/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1680756906136},{"_id":"themes/next/source/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1680756906136},{"_id":"themes/next/source/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1680756906136},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1680756906136},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1680756906136},{"_id":"themes/next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1680756906136},{"_id":"themes/next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1680756906136},{"_id":"themes/next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1680756906136},{"_id":"themes/next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1680756906136},{"_id":"themes/next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1680756906136},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1680756906136},{"_id":"themes/next/source/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1680756906136},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1680756906136},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1680756906136},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1680756906132},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","hash":"f27d817b0c2138dd3215b1f46af0753f60a008f3","modified":1680756906136},{"_id":"themes/next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1680756906136},{"_id":"themes/next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1680756906132},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1680756906132},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":1680756906132},{"_id":"themes/next/source/css/_common/components/post/post-body.styl","hash":"d757768a58743601d0d84158ba955eb15d4c3c01","modified":1680756906132},{"_id":"themes/next/source/css/_common/components/post/index.styl","hash":"098d4bd034e986fcf7e443eac4fc2193935461b7","modified":1680756906132},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1680756906132},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"ec37a36e94ba791663607a5022f763915778578f","modified":1680756906132},{"_id":"themes/next/source/css/_common/components/post/post-footer.styl","hash":"11497388f124bfbb4001495a67d3629a9f618405","modified":1680756906132},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1680756906132},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1ecfd64507954810b07a9d21fb5305b5378feda0","modified":1680756906132},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"010c901e4ef49a606f8a350efbf09044e76d2ff3","modified":1680756906132},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1680756906132},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"04cf4a69537fc14d3b8904f965d283356853847f","modified":1680756906132},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"40c9839d3288c3b7de0bf38ac2e18f6c8eba6227","modified":1680756906132},{"_id":"themes/next/source/css/_common/components/third-party/disqusjs.styl","hash":"877a537d5b95beb048142e4fdee6f17e6ef9c7bb","modified":1680756906132},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8f094c4ac17e2ab45569b12d157747f9c7333c12","modified":1680756906132},{"_id":"themes/next/source/css/_common/components/third-party/gitter.styl","hash":"35104dc6883a61c31e0e368dac8ac2f697be62fe","modified":1680756906132},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":1680756906132},{"_id":"themes/next/source/css/_common/components/third-party/index.styl","hash":"77550e0d3e029b7458e35d8c5ae1fbd612c9673b","modified":1680756906132},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"e72799ce3f9b79753e365b2f8c8ef6c310668d4a","modified":1680756906132},{"_id":"themes/next/source/css/_common/components/third-party/utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":1680756906132},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e74f4bb47a101b014ee2a1783c87f3b87323f9a0","modified":1680756906132},{"_id":"themes/next/source/css/_common/outline/footer/index.styl","hash":"4e967702cf4c637132346bc74ec8854426f1a68c","modified":1680756906132},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"38c64c2d04e46848382bfa246a0e9c508294767b","modified":1680756906132},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"b750af2fb833c10c4313b5a4258237161a7833d7","modified":1680756906132},{"_id":"themes/next/source/css/_common/outline/header/index.styl","hash":"6e0d0796ef7fbbb62ffdfb448753a850de82c74f","modified":1680756906132},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"a851e9d5aefcd027c95eeb323860b6da70f202d1","modified":1680756906132},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1680756906132},{"_id":"themes/next/source/css/_common/outline/sidebar/index.styl","hash":"da5e88f8debd5ac8d7af5c6ba6240df66104955f","modified":1680756906132},{"_id":"themes/next/source/css/_common/outline/sidebar/related-posts.styl","hash":"b05908f04ef95f2d91e6eba89b12411c378d050f","modified":1680756906132},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"52fc98b1435129eb3edb9293ced9e507741f1350","modified":1680756906132},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1680756906132},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"b926e368f702f8686aaa2eb98d3d2e533418958c","modified":1680756906132},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"c6a27beb3f741211a14576026f3b4cfc44cc6407","modified":1680756906132},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"c2e354a565c8c1b32bd0ceacc972b17982758b67","modified":1680756906132},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"24752d145c6fb8f5344dca9c7b9640839c02e009","modified":1680756906132},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"9a7c71560fbdc936ad4e736fe15063ea3e8a644b","modified":1680756906132},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":1680756906132},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"670fc109b56a010b166b86b616823a1aae97a738","modified":1680756906132},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":1680756906132},{"_id":"themes/next/source/css/_common/scaffolding/highlight/index.styl","hash":"9056be572ec1cfa429abb22be4b45a662d5b0fb1","modified":1680756906132},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1680756906132},{"_id":"themes/next/source/css/_common/scaffolding/tags/index.styl","hash":"3f76c73a891bbc10679753e702feba9e8a5ffdd2","modified":1680756906132},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1680756906132},{"_id":"themes/next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7f8a7345e6537a62cd9e9a94c8f7065b541d9b04","modified":1680756906132},{"_id":"themes/next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":1680756906132},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"98d4c20aff0f0fcfe1824017fb06ab21ef0d218e","modified":1680756906132},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"7a39bcce7274284e87388743db62afc847fe6897","modified":1680756906132},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b6654a1d7cf82577d8263faffee8af3ad4a5c0e8","modified":1680756906132},{"_id":"themes/next/source/images/avatar.png","hash":"b478c467930eaff4e76f612e45f4979b69038d0f","modified":1680756906136},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"782ee1fc5e669d3ddbfeb82b73ad7fe561f1a4fb","modified":1680756906132},{"_id":"source/_posts/Ubuntu-Nodejs.md","hash":"2f66ac822eab42945db0580048d0377fc189bd6c","modified":1680857533954},{"_id":"source/_posts/Ubuntu-Nodejs/2023-04-07-15-36-35-Screenshot from 2023-04-07 15-36-21.png","hash":"2fdc1f87a71bf81e8ff1637a502b8a78a32e7810","modified":1680852995146},{"_id":"source/_posts/Ubuntu-Nodejs/1b20eb77d85e7959657003b7b219a44065b0876d.png","hash":"4c470fc0a265cb7adbf4148b478a6d617d1c8279","modified":1680853596194},{"_id":"source/_posts/Ubuntu-Nodejs/2023-04-07-15-31-01-Screenshot from 2023-04-07 15-30-53.png","hash":"5accee79ee52949f6e61674997ef81c213296076","modified":1680852661890},{"_id":"source/_posts/SingleChip/2023-04-07-15-48-18-Screenshot from 2023-04-07 15-47-51.png","hash":"cd8a29cbfb9485256fae756650dfee5a74984a83","modified":1680853698458},{"_id":"source/_posts/SingleChip/2023-04-07-16-44-34-Screenshot from 2023-04-07 15-47-51.png","hash":"cd8a29cbfb9485256fae756650dfee5a74984a83","modified":1680857074898},{"_id":"source/_posts/SingleChip/5dd629b107312e0c0f858dd937af777ac3045bcd.png","hash":"cd8a29cbfb9485256fae756650dfee5a74984a83","modified":1680857059626},{"_id":"public/2023/04/07/Ubuntu-Nodejs/index.html","hash":"8d049b120c4376cebe75f2b90c5e0c802cea84e4","modified":1680857538384},{"_id":"public/images/apple-touch-icon-next.png","hash":"3f7c55ed5980444dd2424697d8fddabf16f3b075","modified":1680857432055},{"_id":"public/images/favicon-16x16-next.ico","hash":"5164e01c2aa538a4418552c8da9f6aa68a90e9a7","modified":1680857432055},{"_id":"public/images/favicon-32x32-next.ico","hash":"1466029f6ce1e8d3b5069357cf4daeb947994818","modified":1680857432055},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1680857432055},{"_id":"public/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1680857432055},{"_id":"public/2023/04/07/Ubuntu-Nodejs/2023-04-07-15-36-35-Screenshot from 2023-04-07 15-36-21.png","hash":"2fdc1f87a71bf81e8ff1637a502b8a78a32e7810","modified":1680857432055},{"_id":"public/images/avatar.png","hash":"b478c467930eaff4e76f612e45f4979b69038d0f","modified":1680857432055},{"_id":"public/css/noscript.css","hash":"4cd5301e478e0e0d4b176740ec314087ec5cb707","modified":1680857432055},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1680857432055},{"_id":"public/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1680857432055},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1680857432055},{"_id":"public/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1680857432055},{"_id":"public/js/motion.js","hash":"770d63c26f22705311028a36b52e999cc8a2da82","modified":1680857432055},{"_id":"public/js/next-boot.js","hash":"da0f07f9eaaa83de70128b0feaea3fdadb90457a","modified":1680857432055},{"_id":"public/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1680857432055},{"_id":"public/js/pjax.js","hash":"b03ba78c6916ad2f390d55bc1bc18fafb64b0ebf","modified":1680857432055},{"_id":"public/js/schemes/muse.js","hash":"ba7ba2c129d1f240c6a22cec3e53f3f22af64b6b","modified":1680857432055},{"_id":"public/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1680857432055},{"_id":"public/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1680857432055},{"_id":"public/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1680857432055},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1680857432055},{"_id":"public/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1680857432055},{"_id":"public/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1680857432055},{"_id":"public/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1680857432055},{"_id":"public/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1680857432055},{"_id":"public/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1680857432055},{"_id":"public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1680857432055},{"_id":"public/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1680857432055},{"_id":"public/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1680857432055},{"_id":"public/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1680857432055},{"_id":"public/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1680857432055},{"_id":"public/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1680857432055},{"_id":"public/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1680857432055},{"_id":"public/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1680857432055},{"_id":"public/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1680857432055},{"_id":"public/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1680857432055},{"_id":"public/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1680857432055},{"_id":"public/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1680857432055},{"_id":"public/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1680857432055},{"_id":"public/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1680857432055},{"_id":"public/js/third-party/tags/mermaid.js","hash":"f27d817b0c2138dd3215b1f46af0753f60a008f3","modified":1680857432055},{"_id":"public/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1680857432055},{"_id":"public/css/main.css","hash":"9a404a49d874a6cda0827139198eb2cba6e37405","modified":1680857432055},{"_id":"public/js/utils.js","hash":"5e1cf39de050964e97fb3ba0825aeec7f4bc36dd","modified":1680857432055},{"_id":"public/2023/04/07/Ubuntu-Nodejs/1b20eb77d85e7959657003b7b219a44065b0876d.png","hash":"4c470fc0a265cb7adbf4148b478a6d617d1c8279","modified":1680857432055},{"_id":"public/2023/04/07/Ubuntu-Nodejs/2023-04-07-15-31-01-Screenshot from 2023-04-07 15-30-53.png","hash":"5accee79ee52949f6e61674997ef81c213296076","modified":1680857432055},{"_id":"public/2023/04/02/SingleChip/2023-04-07-16-44-34-Screenshot from 2023-04-07 15-47-51.png","hash":"cd8a29cbfb9485256fae756650dfee5a74984a83","modified":1680857432055},{"_id":"public/2023/04/02/SingleChip/5dd629b107312e0c0f858dd937af777ac3045bcd.png","hash":"cd8a29cbfb9485256fae756650dfee5a74984a83","modified":1680857432055},{"_id":"public/2023/04/02/SingleChip/2023-04-07-15-48-18-Screenshot from 2023-04-07 15-47-51.png","hash":"cd8a29cbfb9485256fae756650dfee5a74984a83","modified":1680857432055},{"_id":"source/_posts/SingleChip/2023-04-07-17-11-07-Screenshot from 2023-04-07 17-10-50.png","hash":"7450fca37eb18343abf09714f7397dd82f204e3d","modified":1680858667162},{"_id":"public/2023/04/02/SingleChip/2023-04-07-17-11-07-Screenshot from 2023-04-07 17-10-50.png","hash":"7450fca37eb18343abf09714f7397dd82f204e3d","modified":1680858677728}],"Category":[],"Data":[],"Page":[{"title":"tags","date":"2023-03-18T12:47:51.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2023-03-18 20:47:51\ntype: tags\n---\n","updated":"2023-04-05T12:12:02.610Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clg3qntas0000xz8i3xw555xk","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"ET框架TulipBubble实现逻辑","date":"2023-03-23T11:54:39.000Z","_content":"\n* **登录注册逻辑**\n  \n  * UI\n    \n    有关脚本\n    \n    > UIEventType.cs\n    > \n    > TulipLobbyFactory.cs\n    > \n    > TulipLobbyComponent.cs\n    \n    UIEventType.cs：注册创建UI的事件去调用TulipLobbyFactory\n    \n    TulipLobbyFactory.cs：创建UI的事件给UI添加TulipLobbyComponent组件\n    \n    TulipLobbyComponent.cs：获取UI中的信息，给登录/注册按钮添加事件\n  \n  <!--more-->\n  \n  * 网络\n    \n    <img title=\"\" src=\"ET框架TulipBubble实现逻辑/2023-03-23-21-05-52-image.png\" alt=\"\" data-align=\"center\">\n    \n    有关脚本\n    \n    > - 前端\n    >   \n    >   TulipHelper.cs\n    > \n    > - 后端\n    >   \n    >   - Realm\n    >     \n    >     A0002_LoginHandler.cs\n    >     \n    >     A0001_RegisterHandler.cs\n    >   \n    >   - Gate\n    >     \n    >     A0006_GetLoginKey.cs\n    >     \n    >     A0003_LoginGateHandler.cs\n    \n    TulipHelper.cs：不多说，向Realm发送登录{account,password}和注册请求{account,password}；发送登录后接收到Realm服的Gate服ip地址和Key后向Gate服发送登录请求{key}\n    \n    <br/>\n    \n    A0002_LoginHandler.cs：\n    \n    > 接收C登录请求{account,password}\n    > \n    > 判断账号密码是否合法\n    > \n    > 如果合法发给G{UserId}请求Key\n    > \n    > 回复C{GateIP,Key}\n    \n    A0006_GetLoginKey.cs：\n    \n    > 接收R{UserID}\n    > \n    > 利用UserID在SeesionKeyComponent中绑定UserId和Key\n    > \n    > 回复R{Key}\n    \n    A0001_RegisterHandler.cs:\n    \n    > 接收C注册请求{account,password}\n    > \n    > 判断账号是否合法\n    > \n    > 如果合法将AccountInfo和UserInfo保存到数据库\n    > \n    > 回复C{注册成功}\n    \n    A0003_LoginGateHandler.cs：\n    \n    > 接收C登录请求{key}\n    > \n    > 验证Key合法性\n    > \n    > 如果合法将UserId和Key解绑\n    > \n    > 使用UserId创建User\n    > \n    > 添加User到UserComponent\n    > \n    > Session添加SessionUserComponent 绑定Seession和User\n    > \n    > Session添加MailBoxComponent 通过MailBox进行actor通信\n    > \n    > 设置User的参数GateAppID，GateSessionID，ActorID\n    > \n    > 回复C{UserID}\n","source":"_posts/ET框架TulipBubble实现逻辑.md","raw":"---\ntitle: ET框架TulipBubble实现逻辑\ndate: 2023-03-23 19:54:39\ntags: \n---\n\n* **登录注册逻辑**\n  \n  * UI\n    \n    有关脚本\n    \n    > UIEventType.cs\n    > \n    > TulipLobbyFactory.cs\n    > \n    > TulipLobbyComponent.cs\n    \n    UIEventType.cs：注册创建UI的事件去调用TulipLobbyFactory\n    \n    TulipLobbyFactory.cs：创建UI的事件给UI添加TulipLobbyComponent组件\n    \n    TulipLobbyComponent.cs：获取UI中的信息，给登录/注册按钮添加事件\n  \n  <!--more-->\n  \n  * 网络\n    \n    <img title=\"\" src=\"ET框架TulipBubble实现逻辑/2023-03-23-21-05-52-image.png\" alt=\"\" data-align=\"center\">\n    \n    有关脚本\n    \n    > - 前端\n    >   \n    >   TulipHelper.cs\n    > \n    > - 后端\n    >   \n    >   - Realm\n    >     \n    >     A0002_LoginHandler.cs\n    >     \n    >     A0001_RegisterHandler.cs\n    >   \n    >   - Gate\n    >     \n    >     A0006_GetLoginKey.cs\n    >     \n    >     A0003_LoginGateHandler.cs\n    \n    TulipHelper.cs：不多说，向Realm发送登录{account,password}和注册请求{account,password}；发送登录后接收到Realm服的Gate服ip地址和Key后向Gate服发送登录请求{key}\n    \n    <br/>\n    \n    A0002_LoginHandler.cs：\n    \n    > 接收C登录请求{account,password}\n    > \n    > 判断账号密码是否合法\n    > \n    > 如果合法发给G{UserId}请求Key\n    > \n    > 回复C{GateIP,Key}\n    \n    A0006_GetLoginKey.cs：\n    \n    > 接收R{UserID}\n    > \n    > 利用UserID在SeesionKeyComponent中绑定UserId和Key\n    > \n    > 回复R{Key}\n    \n    A0001_RegisterHandler.cs:\n    \n    > 接收C注册请求{account,password}\n    > \n    > 判断账号是否合法\n    > \n    > 如果合法将AccountInfo和UserInfo保存到数据库\n    > \n    > 回复C{注册成功}\n    \n    A0003_LoginGateHandler.cs：\n    \n    > 接收C登录请求{key}\n    > \n    > 验证Key合法性\n    > \n    > 如果合法将UserId和Key解绑\n    > \n    > 使用UserId创建User\n    > \n    > 添加User到UserComponent\n    > \n    > Session添加SessionUserComponent 绑定Seession和User\n    > \n    > Session添加MailBoxComponent 通过MailBox进行actor通信\n    > \n    > 设置User的参数GateAppID，GateSessionID，ActorID\n    > \n    > 回复C{UserID}\n","slug":"ET框架TulipBubble实现逻辑","published":1,"updated":"2023-04-07T07:19:22.670Z","_id":"clg3qntau0001xz8i2xeu6h1x","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li><strong>登录注册逻辑</strong><ul>\n<li>UI有关脚本<blockquote>\n<p>UIEventType.cs</p>\n<p>TulipLobbyFactory.cs</p>\n<p>TulipLobbyComponent.cs</p>\n</blockquote>\nUIEventType.cs：注册创建UI的事件去调用TulipLobbyFactoryTulipLobbyFactory.cs：创建UI的事件给UI添加TulipLobbyComponent组件TulipLobbyComponent.cs：获取UI中的信息，给登录/注册按钮添加事件</li>\n</ul>\n<span id=\"more\"></span>\n\n<ul>\n<li>网络<img title src=\"/2023/03/23/ET%E6%A1%86%E6%9E%B6TulipBubble%E5%AE%9E%E7%8E%B0%E9%80%BB%E8%BE%91/2023-03-23-21-05-52-image.png\" alt data-align=\"center\">\n\n有关脚本<blockquote>\n<ul>\n<li><p>前端</p>\n<p>TulipHelper.cs</p>\n</li>\n<li><p>后端</p>\n<ul>\n<li><p>Realm</p>\n<p>A0002_LoginHandler.cs</p>\n<p>A0001_RegisterHandler.cs</p>\n</li>\n<li><p>Gate</p>\n<p>A0006_GetLoginKey.cs</p>\n<p>A0003_LoginGateHandler.cs</p>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>\nTulipHelper.cs：不多说，向Realm发送登录{account,password}和注册请求{account,password}；发送登录后接收到Realm服的Gate服ip地址和Key后向Gate服发送登录请求{key}<br>\n\nA0002_LoginHandler.cs：<blockquote>\n<p>接收C登录请求{account,password}</p>\n<p>判断账号密码是否合法</p>\n<p>如果合法发给G{UserId}请求Key</p>\n<p>回复C{GateIP,Key}</p>\n</blockquote>\nA0006_GetLoginKey.cs：<blockquote>\n<p>接收R{UserID}</p>\n<p>利用UserID在SeesionKeyComponent中绑定UserId和Key</p>\n<p>回复R{Key}</p>\n</blockquote>\nA0001_RegisterHandler.cs:<blockquote>\n<p>接收C注册请求{account,password}</p>\n<p>判断账号是否合法</p>\n<p>如果合法将AccountInfo和UserInfo保存到数据库</p>\n<p>回复C{注册成功}</p>\n</blockquote>\nA0003_LoginGateHandler.cs：<blockquote>\n<p>接收C登录请求{key}</p>\n<p>验证Key合法性</p>\n<p>如果合法将UserId和Key解绑</p>\n<p>使用UserId创建User</p>\n<p>添加User到UserComponent</p>\n<p>Session添加SessionUserComponent 绑定Seession和User</p>\n<p>Session添加MailBoxComponent 通过MailBox进行actor通信</p>\n<p>设置User的参数GateAppID，GateSessionID，ActorID</p>\n<p>回复C{UserID}</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<ul>\n<li><strong>登录注册逻辑</strong><ul>\n<li>UI有关脚本<blockquote>\n<p>UIEventType.cs</p>\n<p>TulipLobbyFactory.cs</p>\n<p>TulipLobbyComponent.cs</p>\n</blockquote>\nUIEventType.cs：注册创建UI的事件去调用TulipLobbyFactoryTulipLobbyFactory.cs：创建UI的事件给UI添加TulipLobbyComponent组件TulipLobbyComponent.cs：获取UI中的信息，给登录/注册按钮添加事件</li>\n</ul></li></ul>","more":"<ul>\n<li>网络<img title src=\"/2023/03/23/ET%E6%A1%86%E6%9E%B6TulipBubble%E5%AE%9E%E7%8E%B0%E9%80%BB%E8%BE%91/2023-03-23-21-05-52-image.png\" alt data-align=\"center\">\n\n有关脚本<blockquote>\n<ul>\n<li><p>前端</p>\n<p>TulipHelper.cs</p>\n</li>\n<li><p>后端</p>\n<ul>\n<li><p>Realm</p>\n<p>A0002_LoginHandler.cs</p>\n<p>A0001_RegisterHandler.cs</p>\n</li>\n<li><p>Gate</p>\n<p>A0006_GetLoginKey.cs</p>\n<p>A0003_LoginGateHandler.cs</p>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>\nTulipHelper.cs：不多说，向Realm发送登录{account,password}和注册请求{account,password}；发送登录后接收到Realm服的Gate服ip地址和Key后向Gate服发送登录请求{key}<br>\n\nA0002_LoginHandler.cs：<blockquote>\n<p>接收C登录请求{account,password}</p>\n<p>判断账号密码是否合法</p>\n<p>如果合法发给G{UserId}请求Key</p>\n<p>回复C{GateIP,Key}</p>\n</blockquote>\nA0006_GetLoginKey.cs：<blockquote>\n<p>接收R{UserID}</p>\n<p>利用UserID在SeesionKeyComponent中绑定UserId和Key</p>\n<p>回复R{Key}</p>\n</blockquote>\nA0001_RegisterHandler.cs:<blockquote>\n<p>接收C注册请求{account,password}</p>\n<p>判断账号是否合法</p>\n<p>如果合法将AccountInfo和UserInfo保存到数据库</p>\n<p>回复C{注册成功}</p>\n</blockquote>\nA0003_LoginGateHandler.cs：<blockquote>\n<p>接收C登录请求{key}</p>\n<p>验证Key合法性</p>\n<p>如果合法将UserId和Key解绑</p>\n<p>使用UserId创建User</p>\n<p>添加User到UserComponent</p>\n<p>Session添加SessionUserComponent 绑定Seession和User</p>\n<p>Session添加MailBoxComponent 通过MailBox进行actor通信</p>\n<p>设置User的参数GateAppID，GateSessionID，ActorID</p>\n<p>回复C{UserID}</p>\n</blockquote>\n</li>\n</ul>\n\n"},{"title":"ET框架初步理解","date":"2023-03-20T11:42:31.000Z","_content":"\n**ET版本5.0**\n\n**项目文件与配置文件**\n\n* 前端\n  \n  ![](ET框架初步理解/4a45803c69ed8b7283f933aa6e1748973976ef4c.png)\n\n（关注）Bundles：制作的AssetBundles资源放在这个目录。\n\n（不关注）Editor：是自定义的一些unity编辑器中使用的一些扩展工具。\n\n<!--more-->\n\n（核心网络库）ET.Core：是ETCore框架的核心代码库，前后端相同并共用的。\n\n（当然关注）Model：是当前游戏项目本身的全部代码，是自己项目的代码。\n\n（不关注）Plugins：Unity生成的为游戏发布到各平台而准备的插件。\n\n（关注）Res：一些Config文本文件，FairyGUI导入的原始素材\n\n（不关注）Resources：游戏预制体目录\n\n（关注）Scenes：项目的场景文件\n\n（不关注）ThirdParty：需要用到的第三方C#调用库，mongo，Litjson，Google.Protobuf，FairyGUI\n\n* 后端\n  \n  ![](ET框架初步理解/7845ce3fdee147fca9d5c7fe4d86a890b717ecfe.png)\n\n（关注）App项目：ETCore网格框架的启动项目，里面只有一个Program.cs文件\n\n（关注）HotFix项目：后端的System与Handler代码，是我们项目后端主要的开发阵地，主要是调用ET.Core项目中的组件和类，来使用全部逻辑与同步请求及返回\n\n（关注）ET.Core项目：ETCore网络框架的核心组件与类，自己项目的功能组件与实体和其它类。\n\n   后端配置文件\n\n![](ET框架初步理解/6e285ffc782c8443b1070964510e9530573f6c2d.png)\n\n**重要知识点**\n\n* ETCore的使用\n\nUnity项目中，只需要要包含ET.Core项目（核心，与服务端代码一样），就能使用ET来进行网络请求与通信，Model项目中包含了少量现成提供可复用的组件，自己游戏的代码可以放在Model中，也可以另外创建一个项目引用ET.Core与Model即可。\n\n需要引用ThirdParty项目，这里有mongo,protobuf,fairgui这些第三方sdk。\n\n服务端项目中，系统逻辑与Handler都在Hotfix项目中编写，你自己项目的服务端代码主要在这里。后端ET.Core项目中可以加自己游戏的实体，组件，系统类。\n\nHandler是请求的响应，与功能逻辑实现的地方。System是组件的扩展方法，来帮助把需要的组件加入到系统的生命周期里（start,load,awake,update等）。\n\n消息指令与消息体在ET.Core项目中 \\ET.Core\\Module\\Message\\目录下。\n\n* Session使用\n\n用地址创建session \n\n远程地址：127.0.0.1:10002\n\n```C#\nSession sessionRealm = Game.Scene.GetComponent<NetOuterComponent>().Create(\"127.0.0.1:10002\");\nSession sessionRealm = Game.Scene.GetComponent<NetOuterComponent>().Create(GlobalConfigComponent.Instance.GlobalProto.Address);\n```\n\nGlobalConfigComponent.Instance.GlobalProto.Address就是配置文件中获取到像上面的远程地址。\n\n用IPEndPoint创建session \n\npublic IPEndPoint(long address, int port);\n\n```C#\nIPEndPoint realmIPEndPoint = new IPEndPoint(Int64.Parse(\"127.0.0.1\"),10002);\nSession realmSession = Game.Scene.GetComponent<NetOuterComponent>().Create(realmIPEndPoint);\n```\n\n不需要返回发送消息 session.Send\n\nSend方法的参数是一个消息体\n\n```C#\nrealmSession.Send(new A0004_PlayerOnline_G2R() { UserID = user.UserID, GateAppID = config.StartConfig.AppId });\n```\n\n发送请求获得返回 session.Call\n\nCall方法的参数是一个请求消息体，返回一个响应消息体\n\n```C#\nA1002_SetUserInfo_G2C SetUserInfo_Ack = (A1002_SetUserInfo_G2C)await SessionComponent.Instance.Session.Call(SetUserInfo_Req);\n```\n\n* 消息指令、消息体\n\n消息体，是把消息内容的不同字段构建一个消息体类型的实例，用实例属性来使用消息数据。\n\nET是先用数据构建消息体实例，把消息对象序列化为json或profobuf数据进行传送，收到消息再反序列化为消息对象在程序中使用。\n\n消息与handler命名参考举例：消息名需要先知道他是什么功能，再怎么往来。消息处理handler需要先知道从哪来，再是什么功能。方便开发时保持思路清晰。\n\n[功能表达]+[往来] ：GetUserInfo_C2G，GetUserInfo_G2C\n\n当然如果你更习惯统一：C2G_TestMessage\n\n如果是IActorMessage ：Actor_MatchSucess_M2G\n\n收到消息后处理handler ：M2G_MatchSucess_Handler\n\n认证服务Realm：R ，网关服务Gate：G，地图服务Map：M，客户端Client：C\n\n消息指令与消息体定义\n\nmessage C2G_TestMessage // IRequest\n\n请求名后面带上 // IRequest 这样生成的消息体就会继承IRequest\n\nmessage G2C_TestMessage // IResponse\n\n返回名后面带上 //IResponse 这样生成的消息体就会继承IResponse\n\n```Json\n//测试向服务器返回消息\nmessage G2C_TestMessage // IResponse\n{\n    int32 RpcId = 90;\n    int32 Error = 91;\n    string Message = 92;\n}\n```\n\nHotfixMessage.cs，HotfixOpcode.cs，InnerMessage.cs，InnerOpcode.cs，OuterMessage.cs，OuterOpcode.cs\n\n> InnerMessage：不同服务之间通信消息\n> \n> OuterMessage：前后端通信消息\n> \n> HotfixMessage：前后端通信消息，无热更的ETCore来说与OuterMessage没区别\n\n* 实体间Actor通信\n\n理解为什么要用actor通信：\n\nEntity.Id是实体的身份证号，instanceID是居住证号，实体instanceID是会换的，比如到了别的地图。actor系统会保存你的身份证和你在哪个地图的居住证。如果用居住证能找到你，就用instanceId把消息发给你了，如果找不到，就会用身份证找到你新的居住证，再把消息发给你。\n\n```C#\n //网关上的user实体是不是变动的，加消息组件，没有参数也没有AddLoaction()\n user.AddComponent<MailBoxComponent>();\n //session实体是客户端与网关的连接session，向此实体发消息，会转发到客户端，加消息组件带MailboxType.GateSession参数\n session.AddComponent<MailBoxComponent, string>(MailboxType.GateSession);\n //room,gamer实体会迁移地图，加消息组件有AddLoaction()\n room.AddComponent<MailBoxComponent>().AddLocation();\n newgamer.AddComponent<MailBoxComponent>().AddLocation();\n```\n\nET.Core事件\n\nHandler特性\n\n[MessageHandler(AppType.Gate)] \n\nUIFactory特性\n\n[UIFactory(FUIType.SetUserInfo)]\n\n创建实体或组件","source":"_posts/ET框架初步理解.md","raw":"---\ntitle: ET框架初步理解\ndate: 2023-03-20 19:42:31\ntags:\n\n---\n\n**ET版本5.0**\n\n**项目文件与配置文件**\n\n* 前端\n  \n  ![](ET框架初步理解/4a45803c69ed8b7283f933aa6e1748973976ef4c.png)\n\n（关注）Bundles：制作的AssetBundles资源放在这个目录。\n\n（不关注）Editor：是自定义的一些unity编辑器中使用的一些扩展工具。\n\n<!--more-->\n\n（核心网络库）ET.Core：是ETCore框架的核心代码库，前后端相同并共用的。\n\n（当然关注）Model：是当前游戏项目本身的全部代码，是自己项目的代码。\n\n（不关注）Plugins：Unity生成的为游戏发布到各平台而准备的插件。\n\n（关注）Res：一些Config文本文件，FairyGUI导入的原始素材\n\n（不关注）Resources：游戏预制体目录\n\n（关注）Scenes：项目的场景文件\n\n（不关注）ThirdParty：需要用到的第三方C#调用库，mongo，Litjson，Google.Protobuf，FairyGUI\n\n* 后端\n  \n  ![](ET框架初步理解/7845ce3fdee147fca9d5c7fe4d86a890b717ecfe.png)\n\n（关注）App项目：ETCore网格框架的启动项目，里面只有一个Program.cs文件\n\n（关注）HotFix项目：后端的System与Handler代码，是我们项目后端主要的开发阵地，主要是调用ET.Core项目中的组件和类，来使用全部逻辑与同步请求及返回\n\n（关注）ET.Core项目：ETCore网络框架的核心组件与类，自己项目的功能组件与实体和其它类。\n\n   后端配置文件\n\n![](ET框架初步理解/6e285ffc782c8443b1070964510e9530573f6c2d.png)\n\n**重要知识点**\n\n* ETCore的使用\n\nUnity项目中，只需要要包含ET.Core项目（核心，与服务端代码一样），就能使用ET来进行网络请求与通信，Model项目中包含了少量现成提供可复用的组件，自己游戏的代码可以放在Model中，也可以另外创建一个项目引用ET.Core与Model即可。\n\n需要引用ThirdParty项目，这里有mongo,protobuf,fairgui这些第三方sdk。\n\n服务端项目中，系统逻辑与Handler都在Hotfix项目中编写，你自己项目的服务端代码主要在这里。后端ET.Core项目中可以加自己游戏的实体，组件，系统类。\n\nHandler是请求的响应，与功能逻辑实现的地方。System是组件的扩展方法，来帮助把需要的组件加入到系统的生命周期里（start,load,awake,update等）。\n\n消息指令与消息体在ET.Core项目中 \\ET.Core\\Module\\Message\\目录下。\n\n* Session使用\n\n用地址创建session \n\n远程地址：127.0.0.1:10002\n\n```C#\nSession sessionRealm = Game.Scene.GetComponent<NetOuterComponent>().Create(\"127.0.0.1:10002\");\nSession sessionRealm = Game.Scene.GetComponent<NetOuterComponent>().Create(GlobalConfigComponent.Instance.GlobalProto.Address);\n```\n\nGlobalConfigComponent.Instance.GlobalProto.Address就是配置文件中获取到像上面的远程地址。\n\n用IPEndPoint创建session \n\npublic IPEndPoint(long address, int port);\n\n```C#\nIPEndPoint realmIPEndPoint = new IPEndPoint(Int64.Parse(\"127.0.0.1\"),10002);\nSession realmSession = Game.Scene.GetComponent<NetOuterComponent>().Create(realmIPEndPoint);\n```\n\n不需要返回发送消息 session.Send\n\nSend方法的参数是一个消息体\n\n```C#\nrealmSession.Send(new A0004_PlayerOnline_G2R() { UserID = user.UserID, GateAppID = config.StartConfig.AppId });\n```\n\n发送请求获得返回 session.Call\n\nCall方法的参数是一个请求消息体，返回一个响应消息体\n\n```C#\nA1002_SetUserInfo_G2C SetUserInfo_Ack = (A1002_SetUserInfo_G2C)await SessionComponent.Instance.Session.Call(SetUserInfo_Req);\n```\n\n* 消息指令、消息体\n\n消息体，是把消息内容的不同字段构建一个消息体类型的实例，用实例属性来使用消息数据。\n\nET是先用数据构建消息体实例，把消息对象序列化为json或profobuf数据进行传送，收到消息再反序列化为消息对象在程序中使用。\n\n消息与handler命名参考举例：消息名需要先知道他是什么功能，再怎么往来。消息处理handler需要先知道从哪来，再是什么功能。方便开发时保持思路清晰。\n\n[功能表达]+[往来] ：GetUserInfo_C2G，GetUserInfo_G2C\n\n当然如果你更习惯统一：C2G_TestMessage\n\n如果是IActorMessage ：Actor_MatchSucess_M2G\n\n收到消息后处理handler ：M2G_MatchSucess_Handler\n\n认证服务Realm：R ，网关服务Gate：G，地图服务Map：M，客户端Client：C\n\n消息指令与消息体定义\n\nmessage C2G_TestMessage // IRequest\n\n请求名后面带上 // IRequest 这样生成的消息体就会继承IRequest\n\nmessage G2C_TestMessage // IResponse\n\n返回名后面带上 //IResponse 这样生成的消息体就会继承IResponse\n\n```Json\n//测试向服务器返回消息\nmessage G2C_TestMessage // IResponse\n{\n    int32 RpcId = 90;\n    int32 Error = 91;\n    string Message = 92;\n}\n```\n\nHotfixMessage.cs，HotfixOpcode.cs，InnerMessage.cs，InnerOpcode.cs，OuterMessage.cs，OuterOpcode.cs\n\n> InnerMessage：不同服务之间通信消息\n> \n> OuterMessage：前后端通信消息\n> \n> HotfixMessage：前后端通信消息，无热更的ETCore来说与OuterMessage没区别\n\n* 实体间Actor通信\n\n理解为什么要用actor通信：\n\nEntity.Id是实体的身份证号，instanceID是居住证号，实体instanceID是会换的，比如到了别的地图。actor系统会保存你的身份证和你在哪个地图的居住证。如果用居住证能找到你，就用instanceId把消息发给你了，如果找不到，就会用身份证找到你新的居住证，再把消息发给你。\n\n```C#\n //网关上的user实体是不是变动的，加消息组件，没有参数也没有AddLoaction()\n user.AddComponent<MailBoxComponent>();\n //session实体是客户端与网关的连接session，向此实体发消息，会转发到客户端，加消息组件带MailboxType.GateSession参数\n session.AddComponent<MailBoxComponent, string>(MailboxType.GateSession);\n //room,gamer实体会迁移地图，加消息组件有AddLoaction()\n room.AddComponent<MailBoxComponent>().AddLocation();\n newgamer.AddComponent<MailBoxComponent>().AddLocation();\n```\n\nET.Core事件\n\nHandler特性\n\n[MessageHandler(AppType.Gate)] \n\nUIFactory特性\n\n[UIFactory(FUIType.SetUserInfo)]\n\n创建实体或组件","slug":"ET框架初步理解","published":1,"updated":"2023-04-05T12:12:02.594Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clg3qntaw0002xz8i8lklhaqt","content":"<p><strong>ET版本5.0</strong></p>\n<p><strong>项目文件与配置文件</strong></p>\n<ul>\n<li>前端<img src=\"/2023/03/20/ET%E6%A1%86%E6%9E%B6%E5%88%9D%E6%AD%A5%E7%90%86%E8%A7%A3/4a45803c69ed8b7283f933aa6e1748973976ef4c.png\"></li>\n</ul>\n<p>（关注）Bundles：制作的AssetBundles资源放在这个目录。</p>\n<p>（不关注）Editor：是自定义的一些unity编辑器中使用的一些扩展工具。</p>\n<span id=\"more\"></span>\n\n<p>（核心网络库）ET.Core：是ETCore框架的核心代码库，前后端相同并共用的。</p>\n<p>（当然关注）Model：是当前游戏项目本身的全部代码，是自己项目的代码。</p>\n<p>（不关注）Plugins：Unity生成的为游戏发布到各平台而准备的插件。</p>\n<p>（关注）Res：一些Config文本文件，FairyGUI导入的原始素材</p>\n<p>（不关注）Resources：游戏预制体目录</p>\n<p>（关注）Scenes：项目的场景文件</p>\n<p>（不关注）ThirdParty：需要用到的第三方C#调用库，mongo，Litjson，Google.Protobuf，FairyGUI</p>\n<ul>\n<li>后端<img src=\"/2023/03/20/ET%E6%A1%86%E6%9E%B6%E5%88%9D%E6%AD%A5%E7%90%86%E8%A7%A3/7845ce3fdee147fca9d5c7fe4d86a890b717ecfe.png\"></li>\n</ul>\n<p>（关注）App项目：ETCore网格框架的启动项目，里面只有一个Program.cs文件</p>\n<p>（关注）HotFix项目：后端的System与Handler代码，是我们项目后端主要的开发阵地，主要是调用ET.Core项目中的组件和类，来使用全部逻辑与同步请求及返回</p>\n<p>（关注）ET.Core项目：ETCore网络框架的核心组件与类，自己项目的功能组件与实体和其它类。</p>\n<p>   后端配置文件</p>\n<p><img src=\"/2023/03/20/ET%E6%A1%86%E6%9E%B6%E5%88%9D%E6%AD%A5%E7%90%86%E8%A7%A3/6e285ffc782c8443b1070964510e9530573f6c2d.png\"></p>\n<p><strong>重要知识点</strong></p>\n<ul>\n<li>ETCore的使用</li>\n</ul>\n<p>Unity项目中，只需要要包含ET.Core项目（核心，与服务端代码一样），就能使用ET来进行网络请求与通信，Model项目中包含了少量现成提供可复用的组件，自己游戏的代码可以放在Model中，也可以另外创建一个项目引用ET.Core与Model即可。</p>\n<p>需要引用ThirdParty项目，这里有mongo,protobuf,fairgui这些第三方sdk。</p>\n<p>服务端项目中，系统逻辑与Handler都在Hotfix项目中编写，你自己项目的服务端代码主要在这里。后端ET.Core项目中可以加自己游戏的实体，组件，系统类。</p>\n<p>Handler是请求的响应，与功能逻辑实现的地方。System是组件的扩展方法，来帮助把需要的组件加入到系统的生命周期里（start,load,awake,update等）。</p>\n<p>消息指令与消息体在ET.Core项目中 \\ET.Core\\Module\\Message\\目录下。</p>\n<ul>\n<li>Session使用</li>\n</ul>\n<p>用地址创建session </p>\n<p>远程地址：127.0.0.1:10002</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Session sessionRealm = Game.Scene.GetComponent&lt;NetOuterComponent&gt;().Create(<span class=\"string\">&quot;127.0.0.1:10002&quot;</span>);</span><br><span class=\"line\">Session sessionRealm = Game.Scene.GetComponent&lt;NetOuterComponent&gt;().Create(GlobalConfigComponent.Instance.GlobalProto.Address);</span><br></pre></td></tr></table></figure>\n\n<p>GlobalConfigComponent.Instance.GlobalProto.Address就是配置文件中获取到像上面的远程地址。</p>\n<p>用IPEndPoint创建session </p>\n<p>public IPEndPoint(long address, int port);</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IPEndPoint realmIPEndPoint = <span class=\"keyword\">new</span> IPEndPoint(Int64.Parse(<span class=\"string\">&quot;127.0.0.1&quot;</span>),<span class=\"number\">10002</span>);</span><br><span class=\"line\">Session realmSession = Game.Scene.GetComponent&lt;NetOuterComponent&gt;().Create(realmIPEndPoint);</span><br></pre></td></tr></table></figure>\n\n<p>不需要返回发送消息 session.Send</p>\n<p>Send方法的参数是一个消息体</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">realmSession.Send(<span class=\"keyword\">new</span> A0004_PlayerOnline_G2R() &#123; UserID = user.UserID, GateAppID = config.StartConfig.AppId &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>发送请求获得返回 session.Call</p>\n<p>Call方法的参数是一个请求消息体，返回一个响应消息体</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A1002_SetUserInfo_G2C SetUserInfo_Ack = (A1002_SetUserInfo_G2C)<span class=\"keyword\">await</span> SessionComponent.Instance.Session.Call(SetUserInfo_Req);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>消息指令、消息体</li>\n</ul>\n<p>消息体，是把消息内容的不同字段构建一个消息体类型的实例，用实例属性来使用消息数据。</p>\n<p>ET是先用数据构建消息体实例，把消息对象序列化为json或profobuf数据进行传送，收到消息再反序列化为消息对象在程序中使用。</p>\n<p>消息与handler命名参考举例：消息名需要先知道他是什么功能，再怎么往来。消息处理handler需要先知道从哪来，再是什么功能。方便开发时保持思路清晰。</p>\n<p>[功能表达]+[往来] ：GetUserInfo_C2G，GetUserInfo_G2C</p>\n<p>当然如果你更习惯统一：C2G_TestMessage</p>\n<p>如果是IActorMessage ：Actor_MatchSucess_M2G</p>\n<p>收到消息后处理handler ：M2G_MatchSucess_Handler</p>\n<p>认证服务Realm：R ，网关服务Gate：G，地图服务Map：M，客户端Client：C</p>\n<p>消息指令与消息体定义</p>\n<p>message C2G_TestMessage // IRequest</p>\n<p>请求名后面带上 // IRequest 这样生成的消息体就会继承IRequest</p>\n<p>message G2C_TestMessage // IResponse</p>\n<p>返回名后面带上 //IResponse 这样生成的消息体就会继承IResponse</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//测试向服务器返回消息</span></span><br><span class=\"line\">message G2C_TestMessage <span class=\"comment\">// IResponse</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    int32 RpcId = <span class=\"number\">90</span>;</span><br><span class=\"line\">    int32 Error = <span class=\"number\">91</span>;</span><br><span class=\"line\">    string Message = <span class=\"number\">92</span>;</span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>HotfixMessage.cs，HotfixOpcode.cs，InnerMessage.cs，InnerOpcode.cs，OuterMessage.cs，OuterOpcode.cs</p>\n<blockquote>\n<p>InnerMessage：不同服务之间通信消息</p>\n<p>OuterMessage：前后端通信消息</p>\n<p>HotfixMessage：前后端通信消息，无热更的ETCore来说与OuterMessage没区别</p>\n</blockquote>\n<ul>\n<li>实体间Actor通信</li>\n</ul>\n<p>理解为什么要用actor通信：</p>\n<p>Entity.Id是实体的身份证号，instanceID是居住证号，实体instanceID是会换的，比如到了别的地图。actor系统会保存你的身份证和你在哪个地图的居住证。如果用居住证能找到你，就用instanceId把消息发给你了，如果找不到，就会用身份证找到你新的居住证，再把消息发给你。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//网关上的user实体是不是变动的，加消息组件，没有参数也没有AddLoaction()</span></span><br><span class=\"line\">user.AddComponent&lt;MailBoxComponent&gt;();</span><br><span class=\"line\"><span class=\"comment\">//session实体是客户端与网关的连接session，向此实体发消息，会转发到客户端，加消息组件带MailboxType.GateSession参数</span></span><br><span class=\"line\">session.AddComponent&lt;MailBoxComponent, <span class=\"built_in\">string</span>&gt;(MailboxType.GateSession);</span><br><span class=\"line\"><span class=\"comment\">//room,gamer实体会迁移地图，加消息组件有AddLoaction()</span></span><br><span class=\"line\">room.AddComponent&lt;MailBoxComponent&gt;().AddLocation();</span><br><span class=\"line\">newgamer.AddComponent&lt;MailBoxComponent&gt;().AddLocation();</span><br></pre></td></tr></table></figure>\n\n<p>ET.Core事件</p>\n<p>Handler特性</p>\n<p>[MessageHandler(AppType.Gate)] </p>\n<p>UIFactory特性</p>\n<p>[UIFactory(FUIType.SetUserInfo)]</p>\n<p>创建实体或组件</p>\n","site":{"data":{}},"excerpt":"<p><strong>ET版本5.0</strong></p>\n<p><strong>项目文件与配置文件</strong></p>\n<ul>\n<li>前端<img src=\"/2023/03/20/ET%E6%A1%86%E6%9E%B6%E5%88%9D%E6%AD%A5%E7%90%86%E8%A7%A3/4a45803c69ed8b7283f933aa6e1748973976ef4c.png\"></li>\n</ul>\n<p>（关注）Bundles：制作的AssetBundles资源放在这个目录。</p>\n<p>（不关注）Editor：是自定义的一些unity编辑器中使用的一些扩展工具。</p>","more":"<p>（核心网络库）ET.Core：是ETCore框架的核心代码库，前后端相同并共用的。</p>\n<p>（当然关注）Model：是当前游戏项目本身的全部代码，是自己项目的代码。</p>\n<p>（不关注）Plugins：Unity生成的为游戏发布到各平台而准备的插件。</p>\n<p>（关注）Res：一些Config文本文件，FairyGUI导入的原始素材</p>\n<p>（不关注）Resources：游戏预制体目录</p>\n<p>（关注）Scenes：项目的场景文件</p>\n<p>（不关注）ThirdParty：需要用到的第三方C#调用库，mongo，Litjson，Google.Protobuf，FairyGUI</p>\n<ul>\n<li>后端<img src=\"/2023/03/20/ET%E6%A1%86%E6%9E%B6%E5%88%9D%E6%AD%A5%E7%90%86%E8%A7%A3/7845ce3fdee147fca9d5c7fe4d86a890b717ecfe.png\"></li>\n</ul>\n<p>（关注）App项目：ETCore网格框架的启动项目，里面只有一个Program.cs文件</p>\n<p>（关注）HotFix项目：后端的System与Handler代码，是我们项目后端主要的开发阵地，主要是调用ET.Core项目中的组件和类，来使用全部逻辑与同步请求及返回</p>\n<p>（关注）ET.Core项目：ETCore网络框架的核心组件与类，自己项目的功能组件与实体和其它类。</p>\n<p>   后端配置文件</p>\n<p><img src=\"/2023/03/20/ET%E6%A1%86%E6%9E%B6%E5%88%9D%E6%AD%A5%E7%90%86%E8%A7%A3/6e285ffc782c8443b1070964510e9530573f6c2d.png\"></p>\n<p><strong>重要知识点</strong></p>\n<ul>\n<li>ETCore的使用</li>\n</ul>\n<p>Unity项目中，只需要要包含ET.Core项目（核心，与服务端代码一样），就能使用ET来进行网络请求与通信，Model项目中包含了少量现成提供可复用的组件，自己游戏的代码可以放在Model中，也可以另外创建一个项目引用ET.Core与Model即可。</p>\n<p>需要引用ThirdParty项目，这里有mongo,protobuf,fairgui这些第三方sdk。</p>\n<p>服务端项目中，系统逻辑与Handler都在Hotfix项目中编写，你自己项目的服务端代码主要在这里。后端ET.Core项目中可以加自己游戏的实体，组件，系统类。</p>\n<p>Handler是请求的响应，与功能逻辑实现的地方。System是组件的扩展方法，来帮助把需要的组件加入到系统的生命周期里（start,load,awake,update等）。</p>\n<p>消息指令与消息体在ET.Core项目中 \\ET.Core\\Module\\Message\\目录下。</p>\n<ul>\n<li>Session使用</li>\n</ul>\n<p>用地址创建session </p>\n<p>远程地址：127.0.0.1:10002</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Session sessionRealm = Game.Scene.GetComponent&lt;NetOuterComponent&gt;().Create(<span class=\"string\">&quot;127.0.0.1:10002&quot;</span>);</span><br><span class=\"line\">Session sessionRealm = Game.Scene.GetComponent&lt;NetOuterComponent&gt;().Create(GlobalConfigComponent.Instance.GlobalProto.Address);</span><br></pre></td></tr></table></figure>\n\n<p>GlobalConfigComponent.Instance.GlobalProto.Address就是配置文件中获取到像上面的远程地址。</p>\n<p>用IPEndPoint创建session </p>\n<p>public IPEndPoint(long address, int port);</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IPEndPoint realmIPEndPoint = <span class=\"keyword\">new</span> IPEndPoint(Int64.Parse(<span class=\"string\">&quot;127.0.0.1&quot;</span>),<span class=\"number\">10002</span>);</span><br><span class=\"line\">Session realmSession = Game.Scene.GetComponent&lt;NetOuterComponent&gt;().Create(realmIPEndPoint);</span><br></pre></td></tr></table></figure>\n\n<p>不需要返回发送消息 session.Send</p>\n<p>Send方法的参数是一个消息体</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">realmSession.Send(<span class=\"keyword\">new</span> A0004_PlayerOnline_G2R() &#123; UserID = user.UserID, GateAppID = config.StartConfig.AppId &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>发送请求获得返回 session.Call</p>\n<p>Call方法的参数是一个请求消息体，返回一个响应消息体</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A1002_SetUserInfo_G2C SetUserInfo_Ack = (A1002_SetUserInfo_G2C)<span class=\"keyword\">await</span> SessionComponent.Instance.Session.Call(SetUserInfo_Req);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>消息指令、消息体</li>\n</ul>\n<p>消息体，是把消息内容的不同字段构建一个消息体类型的实例，用实例属性来使用消息数据。</p>\n<p>ET是先用数据构建消息体实例，把消息对象序列化为json或profobuf数据进行传送，收到消息再反序列化为消息对象在程序中使用。</p>\n<p>消息与handler命名参考举例：消息名需要先知道他是什么功能，再怎么往来。消息处理handler需要先知道从哪来，再是什么功能。方便开发时保持思路清晰。</p>\n<p>[功能表达]+[往来] ：GetUserInfo_C2G，GetUserInfo_G2C</p>\n<p>当然如果你更习惯统一：C2G_TestMessage</p>\n<p>如果是IActorMessage ：Actor_MatchSucess_M2G</p>\n<p>收到消息后处理handler ：M2G_MatchSucess_Handler</p>\n<p>认证服务Realm：R ，网关服务Gate：G，地图服务Map：M，客户端Client：C</p>\n<p>消息指令与消息体定义</p>\n<p>message C2G_TestMessage // IRequest</p>\n<p>请求名后面带上 // IRequest 这样生成的消息体就会继承IRequest</p>\n<p>message G2C_TestMessage // IResponse</p>\n<p>返回名后面带上 //IResponse 这样生成的消息体就会继承IResponse</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//测试向服务器返回消息</span></span><br><span class=\"line\">message G2C_TestMessage <span class=\"comment\">// IResponse</span></span><br><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    int32 RpcId = <span class=\"number\">90</span>;</span><br><span class=\"line\">    int32 Error = <span class=\"number\">91</span>;</span><br><span class=\"line\">    string Message = <span class=\"number\">92</span>;</span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>HotfixMessage.cs，HotfixOpcode.cs，InnerMessage.cs，InnerOpcode.cs，OuterMessage.cs，OuterOpcode.cs</p>\n<blockquote>\n<p>InnerMessage：不同服务之间通信消息</p>\n<p>OuterMessage：前后端通信消息</p>\n<p>HotfixMessage：前后端通信消息，无热更的ETCore来说与OuterMessage没区别</p>\n</blockquote>\n<ul>\n<li>实体间Actor通信</li>\n</ul>\n<p>理解为什么要用actor通信：</p>\n<p>Entity.Id是实体的身份证号，instanceID是居住证号，实体instanceID是会换的，比如到了别的地图。actor系统会保存你的身份证和你在哪个地图的居住证。如果用居住证能找到你，就用instanceId把消息发给你了，如果找不到，就会用身份证找到你新的居住证，再把消息发给你。</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//网关上的user实体是不是变动的，加消息组件，没有参数也没有AddLoaction()</span></span><br><span class=\"line\">user.AddComponent&lt;MailBoxComponent&gt;();</span><br><span class=\"line\"><span class=\"comment\">//session实体是客户端与网关的连接session，向此实体发消息，会转发到客户端，加消息组件带MailboxType.GateSession参数</span></span><br><span class=\"line\">session.AddComponent&lt;MailBoxComponent, <span class=\"built_in\">string</span>&gt;(MailboxType.GateSession);</span><br><span class=\"line\"><span class=\"comment\">//room,gamer实体会迁移地图，加消息组件有AddLoaction()</span></span><br><span class=\"line\">room.AddComponent&lt;MailBoxComponent&gt;().AddLocation();</span><br><span class=\"line\">newgamer.AddComponent&lt;MailBoxComponent&gt;().AddLocation();</span><br></pre></td></tr></table></figure>\n\n<p>ET.Core事件</p>\n<p>Handler特性</p>\n<p>[MessageHandler(AppType.Gate)] </p>\n<p>UIFactory特性</p>\n<p>[UIFactory(FUIType.SetUserInfo)]</p>\n<p>创建实体或组件</p>"},{"title":"Github使用","date":"2023-03-16T11:33:42.000Z","_content":"\n![](Github使用/fc261c3347d67a16ae3d5eef1b72182071954565.png)\n\n**常用的命令**\n\n1. 克隆仓库\n   \n   ```bash\n   $ git clone <repo> <directory>\n   ```\n   \n   * repo:Git 仓库\n   \n   * directory:本地目录\n\n<!-- more -->\n\n* 初始化仓库\n  \n  ```bash\n  $ git init <directory>\n  ```\n  \n  * directory:本地目录\n\n* 查看仓库状态\n  \n  ```bash\n  $ git status\n  ```\n\n* 添加文件\n  \n  ```bash\n  $ git add [file1] [file2] ...\n  $ git add [dir]\n  ```\n  \n  * file:文件\n  * dir:文件夹\n\n* 删除文件\n  \n  ```bash\n  $ git rm [-f | --force] [-n] [-r] [--cached] [--ignore-unmatch] [--quiet] [--pathspec-from-file=<file> [--pathspec-file-nul]] [--] [<pathspec>…​]\n  ```\n  \n  * f:覆盖最新的检测\n  * n/dry-run:不在硬盘上删除文件，只在仓库中删除文件\n  * r:递归删除文件夹\n  * cached:使用此选项仅从索引中取消和删除路径。工作树文件，无论是否修改，都将保持不变\n  * ignore-unmatch:即使没有匹配的文件，也会以0状态退出\n  * q/quiet:不打印输出\n  * pathspec:要删除的文件\n\n* 移动文件\n  \n  ```bash\n  $ git mv [-v] [-f] [-n] [-k] <source> <destination>\n  $ git mv [-v] [-f] [-n] [-k] <source> ... <destination directory>\n  ```\n  \n  * v/verbose:打印被移除文件的名称\n  * f/force:强制覆盖目标文件\n  * n/dry-run:只说明会做什么\n  * k:跳过重命名\n\n* 比较状态\n  \n  ```bash\n  $ git diff [file] 显示暂存区和工作区的差异\n  $ git diff --cached/staged [file] 显示暂存区和上一次提交(commit)的差异\n  $ git diff [first-branch]...[second-branch]\n  ```\n\n* 提交命令\n  \n  ```bash\n  $ git commit -m [message]\n  ```\n  \n  * message：可以是一些备注信息。\n\n* 回退版本\n  \n  ```bash\n  $ git reset [--soft | --mixed | --hard] [HEAD]\n  ```\n  \n  * mixed：为默认，可以不用带该参数，用于重置暂存区的文件与上一次的提交(commit)保持一致，工作区文件内容保持不变\n  * soft 参数用于回退到某个版本\n  * hard 参数撤销工作区中所有未提交的修改内容，将暂存区与工作区都回到上一次版本，并删除之前的所有信息提交\n\n* 分支相关\n  \n  ```bash\n  \\#列出本地所有分支\n  git branch\n  \\#列出所有远程分支\n  git branch -r\n  \\#新建一个分支，但依然停留在当前分支\n  git branch 分支名\n  \\#新建一个分支，并切换到该分支\n  git checkout -b 分支名\n  \\#合并指定分支到当前分支\n  git merge 分支名\n  \\#删除分支\n  git branch -d 分支名\n  \\#删除远程分支\n  git push origin --delete 分支名\n  git branch -dr 分支名\n  ```\n\n**提交代码**\n\n![](Github使用/86324066a24e3eb32af8305f91c0a064582ae9d5.png)\n\n向Github提交代码的两种情况\n\n1. 本地没有 Git 仓库，将远程仓库clone到本地\n   \n    通过clone命令创建的本地仓库，其本身就是一个 Git 仓库了，不用我们再进行\n    init初始化操作啦，而且自动关联远程仓库。我们只需要在这个仓库进行修改或者\n    添加等操作，然后commit即可。\n   \n   ```bash\n   $ git clone \"仓库地址\"\n   $ git push origin main\n   ```\n\n2. 本地有 Git 仓库，并且我们已经进行了多次commit操作\n   \n    进入仓库,关联远程仓库，origin为远程仓库的名字\n   \n   ```bash\n   $ git remote add origin 仓库地址\n   ```\n   \n    同步远程仓库和本地仓库\n   \n   ```bash\n   $ git pull origin main\n   ```\n   \n   强调:在向远程仓库提交代码的时候，一定要先进行pull操作，再进行push操作，防止本地仓库与远程仓库不同步导致冲突的问题，尤其是第二种提交代码的情况，很容易就出现问题。\n\n**实际使用**\n\n转载自[原文](https://blog.csdn.net/nrsc272420199/article/details/85219097)\n1.远程仓库只有一个master分支的情况\n   需要用到的命令\n\n```bash\ngit pull----------------从远程仓库拉取代码到本地\ngit stash---------------将你修改后的代码存储到本地(一个栈结构)-->一般会在git pull码失败时使用\ngit stash pop-----------将你stash到本地的代码与重新git pull下的代码合并\ngit add XXX-------------将XXX文件加入到暂存区\ngit commit -m \"注释\"----将暂存区的文件提交到本地仓库\ngit push----------------将本地仓库的内容推送到远程仓库\n```\n\n2. 实际场景\n   假设开发者A和开发者B都刚刚从远程仓库checkout了一份代码到本地.\n\nA:\n首先开发者A在README.md文件中进行了如下修改:\n\n![](Github使用/3aa70b0531dc3e2625c09c1ef8eac0078a29f54e.png)然后将修改内容按照如下方式提交到远程仓库:\n![](Github使用/265bf46b38778fb7476094dda85d00debb635e85.png)\n\nB:\n ![](Github使用/5a1f2bfbce2c6557b2d3442934c0a92b8a606944.png)  开发者B此时也要开发代码了,正常来讲,如果开发者B在开发完一个功能需要提交代码之前,肯定要git pull一下代码.比如说开发者B在README.md的第三行里增加了一句话,然后他去git pull代码,结果如下:\n\n**★注意点1★–git监控变化的单位是文件**\n   我不知道大家在这里会不会疑惑,反正我疑惑过很久,明明我在Git Bash里改动的是第二行,在Idea里改动的是第三行,不是说git监测的是变化吗?这里怎么就pull不下来呢?其实git所谓的监控变化,监控的单位是文件,也就是说假如其他开发者改动了XXX文件,并且同步到远程库了,你即使在XXX文件里改动了一个标点,加了一个空格,都无法pull成功.\n   git pull不成功时,你就需要使用git stash命令了,具体解决方式如下:\n\n![](Github使用/578439ae227066f02d1319f645f09b0567c46bd6.png)\n\n![](Github使用/62a3a7a6fbde2da426ced06d782dbd6ee43fb5c4.png)\n\n**★注意点2★–git pull可以把所有你上次push后没操作的文件pull下来**\nA:\n  接着上面的栗子,假设Git Bash用户同步了服务端的代码,并且在没跟IDEA用户商量的情况下,擅自修改了IDEA用户的代码,如下:\n\n![](Github使用/2ac963f71072ecd1cc7f56f9153107153b737a36.png)\n![](Github使用/c96a2283efc6cc31030410ff42e59ac41209443a.png)  并且Git Bash用户还创建了一个新的文件,如下:\n\nB:\n  开发者B如果没有进行开发,或者进行了其他文件的开发,而未对README.md文件进行操作,直接git pull,效果见下图.可以发现,git pull可以把所有你上次push后没操作的文件pull下来,并将你本地的代码变成和远程仓库一样的代码.\n\n![](Github使用/51204e17ea43f7a1992ea9abbf9ecb48768694fa.png)所以奉在pull代码的时候一定要多注意看一下代码有没有被改动过.\n\n3.使用idea的Update Project代替git pull + git stash +git stash pop\n\n![](Github使用/5ea18123f9a50a08ca1fd5562c479b4aa184a2e4.png)然后点击一下OK,就会弹出如下页面:\n\n![](Github使用/6aa5405ba7ffbe9c8760c5891854c1041e688d10.png)   然后双击一下有冲突的文件之后,就会弹出如下页面,自我感觉在这个界面里进行冲突解决,要比注意点1中第一个图,那种解决方式爽一些.\n\n![](Github使用/7e1e6ca628c6bcc92afce94e8ce7a0cd9a491ac1.png)并且解决完冲突后,立刻会弹出如下提示:\n\n![](Github使用/089c68368fd64dc9463fcbb493992b46998e45ad.png)点开提示之后,你就可以看到哪些文件修改了,哪些文件是新增的,而且你肯定会想去看看你原来操作过的文件有没有被updated过,从而避免注意点2中提到的情况.\n![{% asset_img practice12.png git图解 %}](Github使用/dfd1bcd4b5e9efbe1d7e8d52c289e292c4bd2b04.png)\n\n**git merge 相关**\n\n1. 在分支之后未对代码修改\n   \n   ![](Github使用/c81d9e95a6974e43bb3d62b5ce7029b0c535f29d.png)\n\n2. 在分支之对代码修改\n   \n   ![](Github使用/69a4adad5fa74c60aa7fdd3ac358f9bb718b3b4b.png)\n","source":"_posts/Github使用.md","raw":"---\ntitle: Github使用\ndate: 2023-03-16 19:33:42\ntags:\n---\n\n![](Github使用/fc261c3347d67a16ae3d5eef1b72182071954565.png)\n\n**常用的命令**\n\n1. 克隆仓库\n   \n   ```bash\n   $ git clone <repo> <directory>\n   ```\n   \n   * repo:Git 仓库\n   \n   * directory:本地目录\n\n<!-- more -->\n\n* 初始化仓库\n  \n  ```bash\n  $ git init <directory>\n  ```\n  \n  * directory:本地目录\n\n* 查看仓库状态\n  \n  ```bash\n  $ git status\n  ```\n\n* 添加文件\n  \n  ```bash\n  $ git add [file1] [file2] ...\n  $ git add [dir]\n  ```\n  \n  * file:文件\n  * dir:文件夹\n\n* 删除文件\n  \n  ```bash\n  $ git rm [-f | --force] [-n] [-r] [--cached] [--ignore-unmatch] [--quiet] [--pathspec-from-file=<file> [--pathspec-file-nul]] [--] [<pathspec>…​]\n  ```\n  \n  * f:覆盖最新的检测\n  * n/dry-run:不在硬盘上删除文件，只在仓库中删除文件\n  * r:递归删除文件夹\n  * cached:使用此选项仅从索引中取消和删除路径。工作树文件，无论是否修改，都将保持不变\n  * ignore-unmatch:即使没有匹配的文件，也会以0状态退出\n  * q/quiet:不打印输出\n  * pathspec:要删除的文件\n\n* 移动文件\n  \n  ```bash\n  $ git mv [-v] [-f] [-n] [-k] <source> <destination>\n  $ git mv [-v] [-f] [-n] [-k] <source> ... <destination directory>\n  ```\n  \n  * v/verbose:打印被移除文件的名称\n  * f/force:强制覆盖目标文件\n  * n/dry-run:只说明会做什么\n  * k:跳过重命名\n\n* 比较状态\n  \n  ```bash\n  $ git diff [file] 显示暂存区和工作区的差异\n  $ git diff --cached/staged [file] 显示暂存区和上一次提交(commit)的差异\n  $ git diff [first-branch]...[second-branch]\n  ```\n\n* 提交命令\n  \n  ```bash\n  $ git commit -m [message]\n  ```\n  \n  * message：可以是一些备注信息。\n\n* 回退版本\n  \n  ```bash\n  $ git reset [--soft | --mixed | --hard] [HEAD]\n  ```\n  \n  * mixed：为默认，可以不用带该参数，用于重置暂存区的文件与上一次的提交(commit)保持一致，工作区文件内容保持不变\n  * soft 参数用于回退到某个版本\n  * hard 参数撤销工作区中所有未提交的修改内容，将暂存区与工作区都回到上一次版本，并删除之前的所有信息提交\n\n* 分支相关\n  \n  ```bash\n  \\#列出本地所有分支\n  git branch\n  \\#列出所有远程分支\n  git branch -r\n  \\#新建一个分支，但依然停留在当前分支\n  git branch 分支名\n  \\#新建一个分支，并切换到该分支\n  git checkout -b 分支名\n  \\#合并指定分支到当前分支\n  git merge 分支名\n  \\#删除分支\n  git branch -d 分支名\n  \\#删除远程分支\n  git push origin --delete 分支名\n  git branch -dr 分支名\n  ```\n\n**提交代码**\n\n![](Github使用/86324066a24e3eb32af8305f91c0a064582ae9d5.png)\n\n向Github提交代码的两种情况\n\n1. 本地没有 Git 仓库，将远程仓库clone到本地\n   \n    通过clone命令创建的本地仓库，其本身就是一个 Git 仓库了，不用我们再进行\n    init初始化操作啦，而且自动关联远程仓库。我们只需要在这个仓库进行修改或者\n    添加等操作，然后commit即可。\n   \n   ```bash\n   $ git clone \"仓库地址\"\n   $ git push origin main\n   ```\n\n2. 本地有 Git 仓库，并且我们已经进行了多次commit操作\n   \n    进入仓库,关联远程仓库，origin为远程仓库的名字\n   \n   ```bash\n   $ git remote add origin 仓库地址\n   ```\n   \n    同步远程仓库和本地仓库\n   \n   ```bash\n   $ git pull origin main\n   ```\n   \n   强调:在向远程仓库提交代码的时候，一定要先进行pull操作，再进行push操作，防止本地仓库与远程仓库不同步导致冲突的问题，尤其是第二种提交代码的情况，很容易就出现问题。\n\n**实际使用**\n\n转载自[原文](https://blog.csdn.net/nrsc272420199/article/details/85219097)\n1.远程仓库只有一个master分支的情况\n   需要用到的命令\n\n```bash\ngit pull----------------从远程仓库拉取代码到本地\ngit stash---------------将你修改后的代码存储到本地(一个栈结构)-->一般会在git pull码失败时使用\ngit stash pop-----------将你stash到本地的代码与重新git pull下的代码合并\ngit add XXX-------------将XXX文件加入到暂存区\ngit commit -m \"注释\"----将暂存区的文件提交到本地仓库\ngit push----------------将本地仓库的内容推送到远程仓库\n```\n\n2. 实际场景\n   假设开发者A和开发者B都刚刚从远程仓库checkout了一份代码到本地.\n\nA:\n首先开发者A在README.md文件中进行了如下修改:\n\n![](Github使用/3aa70b0531dc3e2625c09c1ef8eac0078a29f54e.png)然后将修改内容按照如下方式提交到远程仓库:\n![](Github使用/265bf46b38778fb7476094dda85d00debb635e85.png)\n\nB:\n ![](Github使用/5a1f2bfbce2c6557b2d3442934c0a92b8a606944.png)  开发者B此时也要开发代码了,正常来讲,如果开发者B在开发完一个功能需要提交代码之前,肯定要git pull一下代码.比如说开发者B在README.md的第三行里增加了一句话,然后他去git pull代码,结果如下:\n\n**★注意点1★–git监控变化的单位是文件**\n   我不知道大家在这里会不会疑惑,反正我疑惑过很久,明明我在Git Bash里改动的是第二行,在Idea里改动的是第三行,不是说git监测的是变化吗?这里怎么就pull不下来呢?其实git所谓的监控变化,监控的单位是文件,也就是说假如其他开发者改动了XXX文件,并且同步到远程库了,你即使在XXX文件里改动了一个标点,加了一个空格,都无法pull成功.\n   git pull不成功时,你就需要使用git stash命令了,具体解决方式如下:\n\n![](Github使用/578439ae227066f02d1319f645f09b0567c46bd6.png)\n\n![](Github使用/62a3a7a6fbde2da426ced06d782dbd6ee43fb5c4.png)\n\n**★注意点2★–git pull可以把所有你上次push后没操作的文件pull下来**\nA:\n  接着上面的栗子,假设Git Bash用户同步了服务端的代码,并且在没跟IDEA用户商量的情况下,擅自修改了IDEA用户的代码,如下:\n\n![](Github使用/2ac963f71072ecd1cc7f56f9153107153b737a36.png)\n![](Github使用/c96a2283efc6cc31030410ff42e59ac41209443a.png)  并且Git Bash用户还创建了一个新的文件,如下:\n\nB:\n  开发者B如果没有进行开发,或者进行了其他文件的开发,而未对README.md文件进行操作,直接git pull,效果见下图.可以发现,git pull可以把所有你上次push后没操作的文件pull下来,并将你本地的代码变成和远程仓库一样的代码.\n\n![](Github使用/51204e17ea43f7a1992ea9abbf9ecb48768694fa.png)所以奉在pull代码的时候一定要多注意看一下代码有没有被改动过.\n\n3.使用idea的Update Project代替git pull + git stash +git stash pop\n\n![](Github使用/5ea18123f9a50a08ca1fd5562c479b4aa184a2e4.png)然后点击一下OK,就会弹出如下页面:\n\n![](Github使用/6aa5405ba7ffbe9c8760c5891854c1041e688d10.png)   然后双击一下有冲突的文件之后,就会弹出如下页面,自我感觉在这个界面里进行冲突解决,要比注意点1中第一个图,那种解决方式爽一些.\n\n![](Github使用/7e1e6ca628c6bcc92afce94e8ce7a0cd9a491ac1.png)并且解决完冲突后,立刻会弹出如下提示:\n\n![](Github使用/089c68368fd64dc9463fcbb493992b46998e45ad.png)点开提示之后,你就可以看到哪些文件修改了,哪些文件是新增的,而且你肯定会想去看看你原来操作过的文件有没有被updated过,从而避免注意点2中提到的情况.\n![{% asset_img practice12.png git图解 %}](Github使用/dfd1bcd4b5e9efbe1d7e8d52c289e292c4bd2b04.png)\n\n**git merge 相关**\n\n1. 在分支之后未对代码修改\n   \n   ![](Github使用/c81d9e95a6974e43bb3d62b5ce7029b0c535f29d.png)\n\n2. 在分支之对代码修改\n   \n   ![](Github使用/69a4adad5fa74c60aa7fdd3ac358f9bb718b3b4b.png)\n","slug":"Github使用","published":1,"updated":"2023-04-05T12:12:02.594Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clg3qntay0003xz8ih1i17w3b","content":"<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/fc261c3347d67a16ae3d5eef1b72182071954565.png\"></p>\n<p><strong>常用的命令</strong></p>\n<ol>\n<li>克隆仓库<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> &lt;repo&gt; &lt;directory&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>repo:Git 仓库</p>\n</li>\n<li><p>directory:本地目录</p>\n</li>\n</ul>\n</li>\n</ol>\n<span id=\"more\"></span>\n\n<ul>\n<li><p>初始化仓库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git init &lt;directory&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>directory:本地目录</li>\n</ul>\n</li>\n<li><p>查看仓库状态</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status</span><br></pre></td></tr></table></figure></li>\n<li><p>添加文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add [file1] [file2] ...</span><br><span class=\"line\">$ git add [<span class=\"built_in\">dir</span>]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>file:文件</li>\n<li>dir:文件夹</li>\n</ul>\n</li>\n<li><p>删除文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">rm</span> [-f | --force] [-n] [-r] [--cached] [--ignore-unmatch] [--quiet] [--pathspec-from-file=&lt;file&gt; [--pathspec-file-nul]] [--] [&lt;pathspec&gt;…​]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>f:覆盖最新的检测</li>\n<li>n/dry-run:不在硬盘上删除文件，只在仓库中删除文件</li>\n<li>r:递归删除文件夹</li>\n<li>cached:使用此选项仅从索引中取消和删除路径。工作树文件，无论是否修改，都将保持不变</li>\n<li>ignore-unmatch:即使没有匹配的文件，也会以0状态退出</li>\n<li>q/quiet:不打印输出</li>\n<li>pathspec:要删除的文件</li>\n</ul>\n</li>\n<li><p>移动文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">mv</span> [-v] [-f] [-n] [-k] &lt;<span class=\"built_in\">source</span>&gt; &lt;destination&gt;</span><br><span class=\"line\">$ git <span class=\"built_in\">mv</span> [-v] [-f] [-n] [-k] &lt;<span class=\"built_in\">source</span>&gt; ... &lt;destination directory&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>v/verbose:打印被移除文件的名称</li>\n<li>f/force:强制覆盖目标文件</li>\n<li>n/dry-run:只说明会做什么</li>\n<li>k:跳过重命名</li>\n</ul>\n</li>\n<li><p>比较状态</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff [file] 显示暂存区和工作区的差异</span><br><span class=\"line\">$ git diff --cached/staged [file] 显示暂存区和上一次提交(commit)的差异</span><br><span class=\"line\">$ git diff [first-branch]...[second-branch]</span><br></pre></td></tr></table></figure></li>\n<li><p>提交命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -m [message]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>message：可以是一些备注信息。</li>\n</ul>\n</li>\n<li><p>回退版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset [--soft | --mixed | --hard] [HEAD]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>mixed：为默认，可以不用带该参数，用于重置暂存区的文件与上一次的提交(commit)保持一致，工作区文件内容保持不变</li>\n<li>soft 参数用于回退到某个版本</li>\n<li>hard 参数撤销工作区中所有未提交的修改内容，将暂存区与工作区都回到上一次版本，并删除之前的所有信息提交</li>\n</ul>\n</li>\n<li><p>分支相关</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\<span class=\"comment\">#列出本地所有分支</span></span><br><span class=\"line\">git branch</span><br><span class=\"line\">\\<span class=\"comment\">#列出所有远程分支</span></span><br><span class=\"line\">git branch -r</span><br><span class=\"line\">\\<span class=\"comment\">#新建一个分支，但依然停留在当前分支</span></span><br><span class=\"line\">git branch 分支名</span><br><span class=\"line\">\\<span class=\"comment\">#新建一个分支，并切换到该分支</span></span><br><span class=\"line\">git checkout -b 分支名</span><br><span class=\"line\">\\<span class=\"comment\">#合并指定分支到当前分支</span></span><br><span class=\"line\">git merge 分支名</span><br><span class=\"line\">\\<span class=\"comment\">#删除分支</span></span><br><span class=\"line\">git branch -d 分支名</span><br><span class=\"line\">\\<span class=\"comment\">#删除远程分支</span></span><br><span class=\"line\">git push origin --delete 分支名</span><br><span class=\"line\">git branch -dr 分支名</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>提交代码</strong></p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/86324066a24e3eb32af8305f91c0a064582ae9d5.png\"></p>\n<p>向Github提交代码的两种情况</p>\n<ol>\n<li><p>本地没有 Git 仓库，将远程仓库clone到本地</p>\n<p> 通过clone命令创建的本地仓库，其本身就是一个 Git 仓库了，不用我们再进行<br> init初始化操作啦，而且自动关联远程仓库。我们只需要在这个仓库进行修改或者<br> 添加等操作，然后commit即可。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> <span class=\"string\">&quot;仓库地址&quot;</span></span><br><span class=\"line\">$ git push origin main</span><br></pre></td></tr></table></figure></li>\n<li><p>本地有 Git 仓库，并且我们已经进行了多次commit操作</p>\n<p> 进入仓库,关联远程仓库，origin为远程仓库的名字</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote add origin 仓库地址</span><br></pre></td></tr></table></figure>\n\n<p> 同步远程仓库和本地仓库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull origin main</span><br></pre></td></tr></table></figure>\n\n<p>强调:在向远程仓库提交代码的时候，一定要先进行pull操作，再进行push操作，防止本地仓库与远程仓库不同步导致冲突的问题，尤其是第二种提交代码的情况，很容易就出现问题。</p>\n</li>\n</ol>\n<p><strong>实际使用</strong></p>\n<p>转载自<a href=\"https://blog.csdn.net/nrsc272420199/article/details/85219097\">原文</a><br>1.远程仓库只有一个master分支的情况<br>   需要用到的命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull----------------从远程仓库拉取代码到本地</span><br><span class=\"line\">git stash---------------将你修改后的代码存储到本地(一个栈结构)--&gt;一般会在git pull码失败时使用</span><br><span class=\"line\">git stash pop-----------将你stash到本地的代码与重新git pull下的代码合并</span><br><span class=\"line\">git add XXX-------------将XXX文件加入到暂存区</span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;注释&quot;</span>----将暂存区的文件提交到本地仓库</span><br><span class=\"line\">git push----------------将本地仓库的内容推送到远程仓库</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>实际场景<br>假设开发者A和开发者B都刚刚从远程仓库checkout了一份代码到本地.</li>\n</ol>\n<p>A:<br>首先开发者A在README.md文件中进行了如下修改:</p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/3aa70b0531dc3e2625c09c1ef8eac0078a29f54e.png\">然后将修改内容按照如下方式提交到远程仓库:<br><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/265bf46b38778fb7476094dda85d00debb635e85.png\"></p>\n<p>B:<br> <img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/5a1f2bfbce2c6557b2d3442934c0a92b8a606944.png\">  开发者B此时也要开发代码了,正常来讲,如果开发者B在开发完一个功能需要提交代码之前,肯定要git pull一下代码.比如说开发者B在README.md的第三行里增加了一句话,然后他去git pull代码,结果如下:</p>\n<p><strong>★注意点1★–git监控变化的单位是文件</strong><br>   我不知道大家在这里会不会疑惑,反正我疑惑过很久,明明我在Git Bash里改动的是第二行,在Idea里改动的是第三行,不是说git监测的是变化吗?这里怎么就pull不下来呢?其实git所谓的监控变化,监控的单位是文件,也就是说假如其他开发者改动了XXX文件,并且同步到远程库了,你即使在XXX文件里改动了一个标点,加了一个空格,都无法pull成功.<br>   git pull不成功时,你就需要使用git stash命令了,具体解决方式如下:</p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/578439ae227066f02d1319f645f09b0567c46bd6.png\"></p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/62a3a7a6fbde2da426ced06d782dbd6ee43fb5c4.png\"></p>\n<p><strong>★注意点2★–git pull可以把所有你上次push后没操作的文件pull下来</strong><br>A:<br>  接着上面的栗子,假设Git Bash用户同步了服务端的代码,并且在没跟IDEA用户商量的情况下,擅自修改了IDEA用户的代码,如下:</p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/2ac963f71072ecd1cc7f56f9153107153b737a36.png\"><br><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/c96a2283efc6cc31030410ff42e59ac41209443a.png\">  并且Git Bash用户还创建了一个新的文件,如下:</p>\n<p>B:<br>  开发者B如果没有进行开发,或者进行了其他文件的开发,而未对README.md文件进行操作,直接git pull,效果见下图.可以发现,git pull可以把所有你上次push后没操作的文件pull下来,并将你本地的代码变成和远程仓库一样的代码.</p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/51204e17ea43f7a1992ea9abbf9ecb48768694fa.png\">所以奉在pull代码的时候一定要多注意看一下代码有没有被改动过.</p>\n<p>3.使用idea的Update Project代替git pull + git stash +git stash pop</p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/5ea18123f9a50a08ca1fd5562c479b4aa184a2e4.png\">然后点击一下OK,就会弹出如下页面:</p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/6aa5405ba7ffbe9c8760c5891854c1041e688d10.png\">   然后双击一下有冲突的文件之后,就会弹出如下页面,自我感觉在这个界面里进行冲突解决,要比注意点1中第一个图,那种解决方式爽一些.</p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/7e1e6ca628c6bcc92afce94e8ce7a0cd9a491ac1.png\">并且解决完冲突后,立刻会弹出如下提示:</p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/089c68368fd64dc9463fcbb493992b46998e45ad.png\">点开提示之后,你就可以看到哪些文件修改了,哪些文件是新增的,而且你肯定会想去看看你原来操作过的文件有没有被updated过,从而避免注意点2中提到的情况.<br><img 16 2023 src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/dfd1bcd4b5e9efbe1d7e8d52c289e292c4bd2b04.png\" alt=\"<img src=\" 03 github%e4%bd%bf%e7%94%a8 practice12.png\" class title=\"git图解\">\"></p>\n<p><strong>git merge 相关</strong></p>\n<ol>\n<li><p>在分支之后未对代码修改</p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/c81d9e95a6974e43bb3d62b5ce7029b0c535f29d.png\"></p>\n</li>\n<li><p>在分支之对代码修改</p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/69a4adad5fa74c60aa7fdd3ac358f9bb718b3b4b.png\"></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/fc261c3347d67a16ae3d5eef1b72182071954565.png\"></p>\n<p><strong>常用的命令</strong></p>\n<ol>\n<li>克隆仓库<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> &lt;repo&gt; &lt;directory&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>repo:Git 仓库</p>\n</li>\n<li><p>directory:本地目录</p>\n</li>\n</ul>\n</li>\n</ol>","more":"<ul>\n<li><p>初始化仓库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git init &lt;directory&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>directory:本地目录</li>\n</ul>\n</li>\n<li><p>查看仓库状态</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status</span><br></pre></td></tr></table></figure></li>\n<li><p>添加文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git add [file1] [file2] ...</span><br><span class=\"line\">$ git add [<span class=\"built_in\">dir</span>]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>file:文件</li>\n<li>dir:文件夹</li>\n</ul>\n</li>\n<li><p>删除文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">rm</span> [-f | --force] [-n] [-r] [--cached] [--ignore-unmatch] [--quiet] [--pathspec-from-file=&lt;file&gt; [--pathspec-file-nul]] [--] [&lt;pathspec&gt;…​]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>f:覆盖最新的检测</li>\n<li>n/dry-run:不在硬盘上删除文件，只在仓库中删除文件</li>\n<li>r:递归删除文件夹</li>\n<li>cached:使用此选项仅从索引中取消和删除路径。工作树文件，无论是否修改，都将保持不变</li>\n<li>ignore-unmatch:即使没有匹配的文件，也会以0状态退出</li>\n<li>q/quiet:不打印输出</li>\n<li>pathspec:要删除的文件</li>\n</ul>\n</li>\n<li><p>移动文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">mv</span> [-v] [-f] [-n] [-k] &lt;<span class=\"built_in\">source</span>&gt; &lt;destination&gt;</span><br><span class=\"line\">$ git <span class=\"built_in\">mv</span> [-v] [-f] [-n] [-k] &lt;<span class=\"built_in\">source</span>&gt; ... &lt;destination directory&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>v/verbose:打印被移除文件的名称</li>\n<li>f/force:强制覆盖目标文件</li>\n<li>n/dry-run:只说明会做什么</li>\n<li>k:跳过重命名</li>\n</ul>\n</li>\n<li><p>比较状态</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git diff [file] 显示暂存区和工作区的差异</span><br><span class=\"line\">$ git diff --cached/staged [file] 显示暂存区和上一次提交(commit)的差异</span><br><span class=\"line\">$ git diff [first-branch]...[second-branch]</span><br></pre></td></tr></table></figure></li>\n<li><p>提交命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git commit -m [message]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>message：可以是一些备注信息。</li>\n</ul>\n</li>\n<li><p>回退版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git reset [--soft | --mixed | --hard] [HEAD]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>mixed：为默认，可以不用带该参数，用于重置暂存区的文件与上一次的提交(commit)保持一致，工作区文件内容保持不变</li>\n<li>soft 参数用于回退到某个版本</li>\n<li>hard 参数撤销工作区中所有未提交的修改内容，将暂存区与工作区都回到上一次版本，并删除之前的所有信息提交</li>\n</ul>\n</li>\n<li><p>分支相关</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\<span class=\"comment\">#列出本地所有分支</span></span><br><span class=\"line\">git branch</span><br><span class=\"line\">\\<span class=\"comment\">#列出所有远程分支</span></span><br><span class=\"line\">git branch -r</span><br><span class=\"line\">\\<span class=\"comment\">#新建一个分支，但依然停留在当前分支</span></span><br><span class=\"line\">git branch 分支名</span><br><span class=\"line\">\\<span class=\"comment\">#新建一个分支，并切换到该分支</span></span><br><span class=\"line\">git checkout -b 分支名</span><br><span class=\"line\">\\<span class=\"comment\">#合并指定分支到当前分支</span></span><br><span class=\"line\">git merge 分支名</span><br><span class=\"line\">\\<span class=\"comment\">#删除分支</span></span><br><span class=\"line\">git branch -d 分支名</span><br><span class=\"line\">\\<span class=\"comment\">#删除远程分支</span></span><br><span class=\"line\">git push origin --delete 分支名</span><br><span class=\"line\">git branch -dr 分支名</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>提交代码</strong></p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/86324066a24e3eb32af8305f91c0a064582ae9d5.png\"></p>\n<p>向Github提交代码的两种情况</p>\n<ol>\n<li><p>本地没有 Git 仓库，将远程仓库clone到本地</p>\n<p> 通过clone命令创建的本地仓库，其本身就是一个 Git 仓库了，不用我们再进行<br> init初始化操作啦，而且自动关联远程仓库。我们只需要在这个仓库进行修改或者<br> 添加等操作，然后commit即可。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> <span class=\"string\">&quot;仓库地址&quot;</span></span><br><span class=\"line\">$ git push origin main</span><br></pre></td></tr></table></figure></li>\n<li><p>本地有 Git 仓库，并且我们已经进行了多次commit操作</p>\n<p> 进入仓库,关联远程仓库，origin为远程仓库的名字</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote add origin 仓库地址</span><br></pre></td></tr></table></figure>\n\n<p> 同步远程仓库和本地仓库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git pull origin main</span><br></pre></td></tr></table></figure>\n\n<p>强调:在向远程仓库提交代码的时候，一定要先进行pull操作，再进行push操作，防止本地仓库与远程仓库不同步导致冲突的问题，尤其是第二种提交代码的情况，很容易就出现问题。</p>\n</li>\n</ol>\n<p><strong>实际使用</strong></p>\n<p>转载自<a href=\"https://blog.csdn.net/nrsc272420199/article/details/85219097\">原文</a><br>1.远程仓库只有一个master分支的情况<br>   需要用到的命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull----------------从远程仓库拉取代码到本地</span><br><span class=\"line\">git stash---------------将你修改后的代码存储到本地(一个栈结构)--&gt;一般会在git pull码失败时使用</span><br><span class=\"line\">git stash pop-----------将你stash到本地的代码与重新git pull下的代码合并</span><br><span class=\"line\">git add XXX-------------将XXX文件加入到暂存区</span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;注释&quot;</span>----将暂存区的文件提交到本地仓库</span><br><span class=\"line\">git push----------------将本地仓库的内容推送到远程仓库</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>实际场景<br>假设开发者A和开发者B都刚刚从远程仓库checkout了一份代码到本地.</li>\n</ol>\n<p>A:<br>首先开发者A在README.md文件中进行了如下修改:</p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/3aa70b0531dc3e2625c09c1ef8eac0078a29f54e.png\">然后将修改内容按照如下方式提交到远程仓库:<br><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/265bf46b38778fb7476094dda85d00debb635e85.png\"></p>\n<p>B:<br> <img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/5a1f2bfbce2c6557b2d3442934c0a92b8a606944.png\">  开发者B此时也要开发代码了,正常来讲,如果开发者B在开发完一个功能需要提交代码之前,肯定要git pull一下代码.比如说开发者B在README.md的第三行里增加了一句话,然后他去git pull代码,结果如下:</p>\n<p><strong>★注意点1★–git监控变化的单位是文件</strong><br>   我不知道大家在这里会不会疑惑,反正我疑惑过很久,明明我在Git Bash里改动的是第二行,在Idea里改动的是第三行,不是说git监测的是变化吗?这里怎么就pull不下来呢?其实git所谓的监控变化,监控的单位是文件,也就是说假如其他开发者改动了XXX文件,并且同步到远程库了,你即使在XXX文件里改动了一个标点,加了一个空格,都无法pull成功.<br>   git pull不成功时,你就需要使用git stash命令了,具体解决方式如下:</p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/578439ae227066f02d1319f645f09b0567c46bd6.png\"></p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/62a3a7a6fbde2da426ced06d782dbd6ee43fb5c4.png\"></p>\n<p><strong>★注意点2★–git pull可以把所有你上次push后没操作的文件pull下来</strong><br>A:<br>  接着上面的栗子,假设Git Bash用户同步了服务端的代码,并且在没跟IDEA用户商量的情况下,擅自修改了IDEA用户的代码,如下:</p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/2ac963f71072ecd1cc7f56f9153107153b737a36.png\"><br><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/c96a2283efc6cc31030410ff42e59ac41209443a.png\">  并且Git Bash用户还创建了一个新的文件,如下:</p>\n<p>B:<br>  开发者B如果没有进行开发,或者进行了其他文件的开发,而未对README.md文件进行操作,直接git pull,效果见下图.可以发现,git pull可以把所有你上次push后没操作的文件pull下来,并将你本地的代码变成和远程仓库一样的代码.</p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/51204e17ea43f7a1992ea9abbf9ecb48768694fa.png\">所以奉在pull代码的时候一定要多注意看一下代码有没有被改动过.</p>\n<p>3.使用idea的Update Project代替git pull + git stash +git stash pop</p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/5ea18123f9a50a08ca1fd5562c479b4aa184a2e4.png\">然后点击一下OK,就会弹出如下页面:</p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/6aa5405ba7ffbe9c8760c5891854c1041e688d10.png\">   然后双击一下有冲突的文件之后,就会弹出如下页面,自我感觉在这个界面里进行冲突解决,要比注意点1中第一个图,那种解决方式爽一些.</p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/7e1e6ca628c6bcc92afce94e8ce7a0cd9a491ac1.png\">并且解决完冲突后,立刻会弹出如下提示:</p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/089c68368fd64dc9463fcbb493992b46998e45ad.png\">点开提示之后,你就可以看到哪些文件修改了,哪些文件是新增的,而且你肯定会想去看看你原来操作过的文件有没有被updated过,从而避免注意点2中提到的情况.<br><img 16 2023 src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/dfd1bcd4b5e9efbe1d7e8d52c289e292c4bd2b04.png\" alt=\"<img src=\" 03 github%e4%bd%bf%e7%94%a8 practice12.png\" class title=\"git图解\">\"></p>\n<p><strong>git merge 相关</strong></p>\n<ol>\n<li><p>在分支之后未对代码修改</p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/c81d9e95a6974e43bb3d62b5ce7029b0c535f29d.png\"></p>\n</li>\n<li><p>在分支之对代码修改</p>\n<p><img src=\"/2023/03/16/Github%E4%BD%BF%E7%94%A8/69a4adad5fa74c60aa7fdd3ac358f9bb718b3b4b.png\"></p>\n</li>\n</ol>"},{"title":"嵌入式与单片机实验课答案","date":"2023-04-01T18:02:14.000Z","_content":"\n# 第一次实验\n\n## 实验基本要求\n\n  ![](SingleChip/2023-04-02-02-05-40-image.png)\n\n<!--more-->\n\n## 写取平均值脚本\n\n  创建项目文件\n\n  ![Screenshot from 2023-04-02 00-47-22.png](SingleChip/53dd30183091b0bb68dfbdb15031cc2dfa2e0306.png)\n\n```bash\nmkdir Project //在用户目录下（~）创建Project文件夹\ncd Project/  \nmkdir Homework //在Project目录下创建Homework文件夹\ncd Homework/\nmkdir 10 //此时实验的项目地址\ncd 10\n```\n\n     \n\n  使用vim创建mean.sh文件\n\n```bash\nvim mean.sh \n```\n\n  如果出现这种情况\n  ![](SingleChip/4c9eeaf452c81e4203aab3ab35f203b530e08202.png)\n\n```bash\nsudo apt install vim\n```\n\n  安装完后在执行vim mean.sh，执行完后界面为\n\n  ![Screenshot from 2023-04-02 01-14-51.png](SingleChip/426941f16f054370a2e48c0b9334b919349fd85a.png)\n\n    按i键进入插入模式\n\n  输入代码\n\n```bash\n#!/bin/bash\ntotal=0\ncount=0\ninputfile='1000ValuesCalcMean'\nwhile read line;do\n    total=$((total+line)）\n    count=$[$count+1]\ndone < $inputfile\necho $[$total/$count] > mean_result_学号_名字.txt\n```\n\n      ![](SingleChip/d5a14db6ef5b8ee6e4e4628c1290b38445a7835e.png)\n\n  输入完后按esc键退出插入模式，输入:wq退出vim\n\n```bash\nsudo chmod 777 mean.sh //给mean.sh权限\n./mean.sh              //执行mean.sh\n```\n\n  执行完后10文件夹内出现 mean_result_学号_名字.txt 文件\n\n  ![](SingleChip/57037c8bea42c86053227fe549874b419653b56c.png)\n\n  内容为 平均数\n\n  创建ReadMe.md\n\n```bash\nvim ReadMe.md\n```\n\n  进入后直接:wq退出\n\n  ![Screenshot from 2023-04-02 01-14-51.png](SingleChip/426941f16f054370a2e48c0b9334b919349fd85a.png)\n\n  看到文件夹内多出了文件ReaMe.md，双击\n\n  ![Screenshot from 2023-04-02 01-16-19.png](SingleChip/54c588817fcd205435a974f1d8077220d5485bf4.png)\n\n  在文本编辑器内写入以下示例后保存\n\n  ![Screenshot from 2023-04-02 01-21-06.png](SingleChip/62d506ea99c99e2d95a5c5d0b00410291b1a7de4.png)\n\n  打包成.tgz格式的压缩包(别忘了传图片)\n\n```bash\ntar -czvf 压缩包的名字.tgz 你要压缩的第一个文件 第二个 ....\n```\n\n  ![Screenshot from 2023-04-02 01-22-26.png](SingleChip/ba71358b9ca3c9a533af1de889672b443827b2b5.png)\n\n  进入学习通上交即可\n\n## 进阶要求\n\n  代码修改为\n\n  ![Screenshot from 2023-04-02 01-54-33.png](SingleChip/08a01404c19e5459d57c8e384f5eaf22869a43eb.png)\n\n  执行命令改为\n\n```bash\n./mean.sh 1000ValuesCalcMean\n```\n\n  执行完后压缩上交即可(别忘了在ReadMe中说明使用了进阶要求)\n\n# 第二次实验\n\n## 实验要求\n\n  ![](SingleChip/2023-04-07-15-48-18-Screenshot%20from%202023-04-07%2015-47-51.png)\n\n  基本要求只需要配置SCP和NFS，配置SCP和NFS的文件时候添加上自己的学号截图，使用SCP和NFS的时候截图并放在Word里,把word和压缩后的配置文件上交即可\n\n## 配置SCP\n\n  我使用的termux，就是老师发在群里的那个app\n\n  如果你是第一次安装termux\n\n```bash\n//termux 上执行\napt update && apt upgrade \n```\n\n  安装Openssh\n\n```bash\n//termux 上执行\npkg install openssh\n```\n\n  安装成功后可以测试ssh的连接\n\n```bash\n//termux\n\n//给自己的用户设置密码\npasswd\n//打开ssh服务端\nsshd\n\n//ubuntu\n\nssh -p 8022 user@hostname_or_ip\n//user是你在termux上的用户可以在termux上执行whoami查看\n//host_or_ip是的你ip地址，确保你的termux和ubuntu在统一局域网下\n//手机按wifi查看你的ipv4地址\n//也可以在termux执行ifconfig查看wlan0网络适配器的inet\n```\n\n  连接成功后,在ubuntu上随便创建一个文件测试SCP,新开一个终端\n\n```bash\n//ubuntu\n\nscp -P 8022 SourceFile user@hostname_or_ip:TargetPath\n//SourFile是你要发送的文件\n//TargPath是要发送到移动的路径，termux最好用当前用户的路径，例如./ (termux没有root用户权限)\n//usr是termux的用户名\n//host_or_ip是的你ip地址\n\n//在你连接termux的ssh终端或者termux上查看文件是否发送过来，如果Target是./\n\nls ~\n```\n\n  截图保存\n\n## NFS\n\n我使用的是我购买的服务器，你可以采用windos和虚拟机，或者虚拟机之间通信\n\n```bash\nsudo apt-get install nfs-kernel-server #安装NFS服务器端\nsudo apt-get install nfs-common        #安装NFS客户端\n```\n\n**在服务器上**\n\n* 设置本地目录权限\n\n```bash\nsudo mkdir /nfs\nsudo chmod -R 777 /nfs\n```\n\n* 添加目录的绝对路径到共享\n\n```bash\nvim /etc/exports\n#添加\n/nfs *(rw,async,no_subtree_check,no_root_squash)\n#学号名字\n```\n\n* 启动NFS服务\n\n```bash\nsudo /usr/sbin/exportfs -arf \nsudo /etc/init.d/nfs-kernel-server start\n```\n\n**在客户端上**\n\n* NFS服务测试\n\n```bash\nsudo mount -t nfs 192.168.12.123:/nfs /mnt -o nolock\n#如果挂载成功，在/mnt目录下能看到/nfsroot目录下的内容\n```\n\n截图,把exports复制一份\n\n## 提交\n\n这样就完成的基本要求\n\n* 把配置文件压缩\n\n* 把图放到word，别忘加标题\n\n* 把这个表复制到word\n\n![](SingleChip/2023-04-07-17-11-07-Screenshot%20from%202023-04-07%2017-10-50.png)\n\n提交即可\n\n### 进阶要求\n\n可以参考我的git的使用\n\n进阶没时间写了,找个其他时间再写\n\n这是我实验二的[文件]([HomeWork_1: 单片机嵌入式作业000000 - Gitee.com](https://gitee.com/Exiaozhang/home-work_1/tree/master/19))包括了进阶要求的文件,可以参考着改改,不会可以线下问我,或者在我的评论区给我留言\n","source":"_posts/SingleChip.md","raw":"---\ntitle: 嵌入式与单片机实验课答案\ndate: 2023-04-02 02:02:14\ntags:\n---\n\n# 第一次实验\n\n## 实验基本要求\n\n  ![](SingleChip/2023-04-02-02-05-40-image.png)\n\n<!--more-->\n\n## 写取平均值脚本\n\n  创建项目文件\n\n  ![Screenshot from 2023-04-02 00-47-22.png](SingleChip/53dd30183091b0bb68dfbdb15031cc2dfa2e0306.png)\n\n```bash\nmkdir Project //在用户目录下（~）创建Project文件夹\ncd Project/  \nmkdir Homework //在Project目录下创建Homework文件夹\ncd Homework/\nmkdir 10 //此时实验的项目地址\ncd 10\n```\n\n     \n\n  使用vim创建mean.sh文件\n\n```bash\nvim mean.sh \n```\n\n  如果出现这种情况\n  ![](SingleChip/4c9eeaf452c81e4203aab3ab35f203b530e08202.png)\n\n```bash\nsudo apt install vim\n```\n\n  安装完后在执行vim mean.sh，执行完后界面为\n\n  ![Screenshot from 2023-04-02 01-14-51.png](SingleChip/426941f16f054370a2e48c0b9334b919349fd85a.png)\n\n    按i键进入插入模式\n\n  输入代码\n\n```bash\n#!/bin/bash\ntotal=0\ncount=0\ninputfile='1000ValuesCalcMean'\nwhile read line;do\n    total=$((total+line)）\n    count=$[$count+1]\ndone < $inputfile\necho $[$total/$count] > mean_result_学号_名字.txt\n```\n\n      ![](SingleChip/d5a14db6ef5b8ee6e4e4628c1290b38445a7835e.png)\n\n  输入完后按esc键退出插入模式，输入:wq退出vim\n\n```bash\nsudo chmod 777 mean.sh //给mean.sh权限\n./mean.sh              //执行mean.sh\n```\n\n  执行完后10文件夹内出现 mean_result_学号_名字.txt 文件\n\n  ![](SingleChip/57037c8bea42c86053227fe549874b419653b56c.png)\n\n  内容为 平均数\n\n  创建ReadMe.md\n\n```bash\nvim ReadMe.md\n```\n\n  进入后直接:wq退出\n\n  ![Screenshot from 2023-04-02 01-14-51.png](SingleChip/426941f16f054370a2e48c0b9334b919349fd85a.png)\n\n  看到文件夹内多出了文件ReaMe.md，双击\n\n  ![Screenshot from 2023-04-02 01-16-19.png](SingleChip/54c588817fcd205435a974f1d8077220d5485bf4.png)\n\n  在文本编辑器内写入以下示例后保存\n\n  ![Screenshot from 2023-04-02 01-21-06.png](SingleChip/62d506ea99c99e2d95a5c5d0b00410291b1a7de4.png)\n\n  打包成.tgz格式的压缩包(别忘了传图片)\n\n```bash\ntar -czvf 压缩包的名字.tgz 你要压缩的第一个文件 第二个 ....\n```\n\n  ![Screenshot from 2023-04-02 01-22-26.png](SingleChip/ba71358b9ca3c9a533af1de889672b443827b2b5.png)\n\n  进入学习通上交即可\n\n## 进阶要求\n\n  代码修改为\n\n  ![Screenshot from 2023-04-02 01-54-33.png](SingleChip/08a01404c19e5459d57c8e384f5eaf22869a43eb.png)\n\n  执行命令改为\n\n```bash\n./mean.sh 1000ValuesCalcMean\n```\n\n  执行完后压缩上交即可(别忘了在ReadMe中说明使用了进阶要求)\n\n# 第二次实验\n\n## 实验要求\n\n  ![](SingleChip/2023-04-07-15-48-18-Screenshot%20from%202023-04-07%2015-47-51.png)\n\n  基本要求只需要配置SCP和NFS，配置SCP和NFS的文件时候添加上自己的学号截图，使用SCP和NFS的时候截图并放在Word里,把word和压缩后的配置文件上交即可\n\n## 配置SCP\n\n  我使用的termux，就是老师发在群里的那个app\n\n  如果你是第一次安装termux\n\n```bash\n//termux 上执行\napt update && apt upgrade \n```\n\n  安装Openssh\n\n```bash\n//termux 上执行\npkg install openssh\n```\n\n  安装成功后可以测试ssh的连接\n\n```bash\n//termux\n\n//给自己的用户设置密码\npasswd\n//打开ssh服务端\nsshd\n\n//ubuntu\n\nssh -p 8022 user@hostname_or_ip\n//user是你在termux上的用户可以在termux上执行whoami查看\n//host_or_ip是的你ip地址，确保你的termux和ubuntu在统一局域网下\n//手机按wifi查看你的ipv4地址\n//也可以在termux执行ifconfig查看wlan0网络适配器的inet\n```\n\n  连接成功后,在ubuntu上随便创建一个文件测试SCP,新开一个终端\n\n```bash\n//ubuntu\n\nscp -P 8022 SourceFile user@hostname_or_ip:TargetPath\n//SourFile是你要发送的文件\n//TargPath是要发送到移动的路径，termux最好用当前用户的路径，例如./ (termux没有root用户权限)\n//usr是termux的用户名\n//host_or_ip是的你ip地址\n\n//在你连接termux的ssh终端或者termux上查看文件是否发送过来，如果Target是./\n\nls ~\n```\n\n  截图保存\n\n## NFS\n\n我使用的是我购买的服务器，你可以采用windos和虚拟机，或者虚拟机之间通信\n\n```bash\nsudo apt-get install nfs-kernel-server #安装NFS服务器端\nsudo apt-get install nfs-common        #安装NFS客户端\n```\n\n**在服务器上**\n\n* 设置本地目录权限\n\n```bash\nsudo mkdir /nfs\nsudo chmod -R 777 /nfs\n```\n\n* 添加目录的绝对路径到共享\n\n```bash\nvim /etc/exports\n#添加\n/nfs *(rw,async,no_subtree_check,no_root_squash)\n#学号名字\n```\n\n* 启动NFS服务\n\n```bash\nsudo /usr/sbin/exportfs -arf \nsudo /etc/init.d/nfs-kernel-server start\n```\n\n**在客户端上**\n\n* NFS服务测试\n\n```bash\nsudo mount -t nfs 192.168.12.123:/nfs /mnt -o nolock\n#如果挂载成功，在/mnt目录下能看到/nfsroot目录下的内容\n```\n\n截图,把exports复制一份\n\n## 提交\n\n这样就完成的基本要求\n\n* 把配置文件压缩\n\n* 把图放到word，别忘加标题\n\n* 把这个表复制到word\n\n![](SingleChip/2023-04-07-17-11-07-Screenshot%20from%202023-04-07%2017-10-50.png)\n\n提交即可\n\n### 进阶要求\n\n可以参考我的git的使用\n\n进阶没时间写了,找个其他时间再写\n\n这是我实验二的[文件]([HomeWork_1: 单片机嵌入式作业000000 - Gitee.com](https://gitee.com/Exiaozhang/home-work_1/tree/master/19))包括了进阶要求的文件,可以参考着改改,不会可以线下问我,或者在我的评论区给我留言\n","slug":"SingleChip","published":1,"updated":"2023-04-07T09:11:12.750Z","_id":"clg3qntay0004xz8i7zwl0tqy","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"第一次实验\"><a href=\"#第一次实验\" class=\"headerlink\" title=\"第一次实验\"></a>第一次实验</h1><h2 id=\"实验基本要求\"><a href=\"#实验基本要求\" class=\"headerlink\" title=\"实验基本要求\"></a>实验基本要求</h2><p>  <img src=\"/2023/04/02/SingleChip/2023-04-02-02-05-40-image.png\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"写取平均值脚本\"><a href=\"#写取平均值脚本\" class=\"headerlink\" title=\"写取平均值脚本\"></a>写取平均值脚本</h2><p>  创建项目文件</p>\n<p>  <img src=\"/2023/04/02/SingleChip/53dd30183091b0bb68dfbdb15031cc2dfa2e0306.png\" alt=\"Screenshot from 2023-04-02 00-47-22.png\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> Project //在用户目录下（~）创建Project文件夹</span><br><span class=\"line\"><span class=\"built_in\">cd</span> Project/  </span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> Homework //在Project目录下创建Homework文件夹</span><br><span class=\"line\"><span class=\"built_in\">cd</span> Homework/</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> 10 //此时实验的项目地址</span><br><span class=\"line\"><span class=\"built_in\">cd</span> 10</span><br></pre></td></tr></table></figure>\n\n<p>     </p>\n<p>  使用vim创建mean.sh文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim mean.sh </span><br></pre></td></tr></table></figure>\n\n<p>  如果出现这种情况<br>  <img src=\"/2023/04/02/SingleChip/4c9eeaf452c81e4203aab3ab35f203b530e08202.png\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install vim</span><br></pre></td></tr></table></figure>\n\n<p>  安装完后在执行vim mean.sh，执行完后界面为</p>\n<p>  <img src=\"/2023/04/02/SingleChip/426941f16f054370a2e48c0b9334b919349fd85a.png\" alt=\"Screenshot from 2023-04-02 01-14-51.png\"></p>\n<p>    按i键进入插入模式</p>\n<p>  输入代码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">total=0</span><br><span class=\"line\">count=0</span><br><span class=\"line\">inputfile=<span class=\"string\">&#x27;1000ValuesCalcMean&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"built_in\">read</span> line;<span class=\"keyword\">do</span></span><br><span class=\"line\">    total=$((total+line)）</span><br><span class=\"line\">    count=$[<span class=\"variable\">$count</span>+<span class=\"number\">1</span>]</span><br><span class=\"line\">done &lt; <span class=\"variable\">$inputfile</span></span><br><span class=\"line\">echo $[<span class=\"variable\">$total</span>/<span class=\"variable\">$count</span>] &gt; mean_result_学号_名字.txt</span><br></pre></td></tr></table></figure>\n\n<p>      <img src=\"/2023/04/02/SingleChip/d5a14db6ef5b8ee6e4e4628c1290b38445a7835e.png\"></p>\n<p>  输入完后按esc键退出插入模式，输入:wq退出vim</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">chmod</span> 777 mean.sh //给mean.sh权限</span><br><span class=\"line\">./mean.sh              //执行mean.sh</span><br></pre></td></tr></table></figure>\n\n<p>  执行完后10文件夹内出现 mean_result_学号_名字.txt 文件</p>\n<p>  <img src=\"/2023/04/02/SingleChip/57037c8bea42c86053227fe549874b419653b56c.png\"></p>\n<p>  内容为 平均数</p>\n<p>  创建ReadMe.md</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ReadMe.md</span><br></pre></td></tr></table></figure>\n\n<p>  进入后直接:wq退出</p>\n<p>  <img src=\"/2023/04/02/SingleChip/426941f16f054370a2e48c0b9334b919349fd85a.png\" alt=\"Screenshot from 2023-04-02 01-14-51.png\"></p>\n<p>  看到文件夹内多出了文件ReaMe.md，双击</p>\n<p>  <img src=\"/2023/04/02/SingleChip/54c588817fcd205435a974f1d8077220d5485bf4.png\" alt=\"Screenshot from 2023-04-02 01-16-19.png\"></p>\n<p>  在文本编辑器内写入以下示例后保存</p>\n<p>  <img src=\"/2023/04/02/SingleChip/62d506ea99c99e2d95a5c5d0b00410291b1a7de4.png\" alt=\"Screenshot from 2023-04-02 01-21-06.png\"></p>\n<p>  打包成.tgz格式的压缩包(别忘了传图片)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -czvf 压缩包的名字.tgz 你要压缩的第一个文件 第二个 ....</span><br></pre></td></tr></table></figure>\n\n<p>  <img src=\"/2023/04/02/SingleChip/ba71358b9ca3c9a533af1de889672b443827b2b5.png\" alt=\"Screenshot from 2023-04-02 01-22-26.png\"></p>\n<p>  进入学习通上交即可</p>\n<h2 id=\"进阶要求\"><a href=\"#进阶要求\" class=\"headerlink\" title=\"进阶要求\"></a>进阶要求</h2><p>  代码修改为</p>\n<p>  <img src=\"/2023/04/02/SingleChip/08a01404c19e5459d57c8e384f5eaf22869a43eb.png\" alt=\"Screenshot from 2023-04-02 01-54-33.png\"></p>\n<p>  执行命令改为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./mean.sh 1000ValuesCalcMean</span><br></pre></td></tr></table></figure>\n\n<p>  执行完后压缩上交即可(别忘了在ReadMe中说明使用了进阶要求)</p>\n<h1 id=\"第二次实验\"><a href=\"#第二次实验\" class=\"headerlink\" title=\"第二次实验\"></a>第二次实验</h1><h2 id=\"实验要求\"><a href=\"#实验要求\" class=\"headerlink\" title=\"实验要求\"></a>实验要求</h2><p>  <img src=\"/2023/04/02/SingleChip/2023-04-07-15-48-18-Screenshot%20from%202023-04-07%2015-47-51.png\"></p>\n<p>  基本要求只需要配置SCP和NFS，配置SCP和NFS的文件时候添加上自己的学号截图，使用SCP和NFS的时候截图并放在Word里,把word和压缩后的配置文件上交即可</p>\n<h2 id=\"配置SCP\"><a href=\"#配置SCP\" class=\"headerlink\" title=\"配置SCP\"></a>配置SCP</h2><p>  我使用的termux，就是老师发在群里的那个app</p>\n<p>  如果你是第一次安装termux</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//termux 上执行</span><br><span class=\"line\">apt update &amp;&amp; apt upgrade </span><br></pre></td></tr></table></figure>\n\n<p>  安装Openssh</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//termux 上执行</span><br><span class=\"line\">pkg install openssh</span><br></pre></td></tr></table></figure>\n\n<p>  安装成功后可以测试ssh的连接</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//termux</span><br><span class=\"line\"></span><br><span class=\"line\">//给自己的用户设置密码</span><br><span class=\"line\">passwd</span><br><span class=\"line\">//打开ssh服务端</span><br><span class=\"line\">sshd</span><br><span class=\"line\"></span><br><span class=\"line\">//ubuntu</span><br><span class=\"line\"></span><br><span class=\"line\">ssh -p 8022 user@hostname_or_ip</span><br><span class=\"line\">//user是你在termux上的用户可以在termux上执行<span class=\"built_in\">whoami</span>查看</span><br><span class=\"line\">//host_or_ip是的你ip地址，确保你的termux和ubuntu在统一局域网下</span><br><span class=\"line\">//手机按wifi查看你的ipv4地址</span><br><span class=\"line\">//也可以在termux执行ifconfig查看wlan0网络适配器的inet</span><br></pre></td></tr></table></figure>\n\n<p>  连接成功后,在ubuntu上随便创建一个文件测试SCP,新开一个终端</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//ubuntu</span><br><span class=\"line\"></span><br><span class=\"line\">scp -P 8022 SourceFile user@hostname_or_ip:TargetPath</span><br><span class=\"line\">//SourFile是你要发送的文件</span><br><span class=\"line\">//TargPath是要发送到移动的路径，termux最好用当前用户的路径，例如./ (termux没有root用户权限)</span><br><span class=\"line\">//usr是termux的用户名</span><br><span class=\"line\">//host_or_ip是的你ip地址</span><br><span class=\"line\"></span><br><span class=\"line\">//在你连接termux的ssh终端或者termux上查看文件是否发送过来，如果Target是./</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">ls</span> ~</span><br></pre></td></tr></table></figure>\n\n<p>  截图保存</p>\n<h2 id=\"NFS\"><a href=\"#NFS\" class=\"headerlink\" title=\"NFS\"></a>NFS</h2><p>我使用的是我购买的服务器，你可以采用windos和虚拟机，或者虚拟机之间通信</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install nfs-kernel-server <span class=\"comment\">#安装NFS服务器端</span></span><br><span class=\"line\">sudo apt-get install nfs-common        <span class=\"comment\">#安装NFS客户端</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>在服务器上</strong></p>\n<ul>\n<li>设置本地目录权限</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> /nfs</span><br><span class=\"line\">sudo <span class=\"built_in\">chmod</span> -R 777 /nfs</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>添加目录的绝对路径到共享</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/exports</span><br><span class=\"line\"><span class=\"comment\">#添加</span></span><br><span class=\"line\">/nfs *(rw,async,no_subtree_check,no_root_squash)</span><br><span class=\"line\"><span class=\"comment\">#学号名字</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>启动NFS服务</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo /usr/sbin/exportfs -arf </span><br><span class=\"line\">sudo /etc/init.d/nfs-kernel-server start</span><br></pre></td></tr></table></figure>\n\n<p><strong>在客户端上</strong></p>\n<ul>\n<li>NFS服务测试</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mount -t nfs 192.168.12.123:/nfs /mnt -o nolock</span><br><span class=\"line\"><span class=\"comment\">#如果挂载成功，在/mnt目录下能看到/nfsroot目录下的内容</span></span><br></pre></td></tr></table></figure>\n\n<p>截图,把exports复制一份</p>\n<h2 id=\"提交\"><a href=\"#提交\" class=\"headerlink\" title=\"提交\"></a>提交</h2><p>这样就完成的基本要求</p>\n<ul>\n<li><p>把配置文件压缩</p>\n</li>\n<li><p>把图放到word，别忘加标题</p>\n</li>\n<li><p>把这个表复制到word</p>\n</li>\n</ul>\n<p><img src=\"/2023/04/02/SingleChip/2023-04-07-17-11-07-Screenshot%20from%202023-04-07%2017-10-50.png\"></p>\n<p>提交即可</p>\n<h3 id=\"进阶要求-1\"><a href=\"#进阶要求-1\" class=\"headerlink\" title=\"进阶要求\"></a>进阶要求</h3><p>可以参考我的git的使用</p>\n<p>进阶没时间写了,找个其他时间再写</p>\n<p>这是我实验二的[文件](<a href=\"https://gitee.com/Exiaozhang/home-work_1/tree/master/19\">HomeWork_1: 单片机嵌入式作业000000 - Gitee.com</a>)包括了进阶要求的文件,可以参考着改改,不会可以线下问我,或者在我的评论区给我留言</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"第一次实验\"><a href=\"#第一次实验\" class=\"headerlink\" title=\"第一次实验\"></a>第一次实验</h1><h2 id=\"实验基本要求\"><a href=\"#实验基本要求\" class=\"headerlink\" title=\"实验基本要求\"></a>实验基本要求</h2><p>  <img src=\"/2023/04/02/SingleChip/2023-04-02-02-05-40-image.png\"></p>","more":"<h2 id=\"写取平均值脚本\"><a href=\"#写取平均值脚本\" class=\"headerlink\" title=\"写取平均值脚本\"></a>写取平均值脚本</h2><p>  创建项目文件</p>\n<p>  <img src=\"/2023/04/02/SingleChip/53dd30183091b0bb68dfbdb15031cc2dfa2e0306.png\" alt=\"Screenshot from 2023-04-02 00-47-22.png\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> Project //在用户目录下（~）创建Project文件夹</span><br><span class=\"line\"><span class=\"built_in\">cd</span> Project/  </span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> Homework //在Project目录下创建Homework文件夹</span><br><span class=\"line\"><span class=\"built_in\">cd</span> Homework/</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> 10 //此时实验的项目地址</span><br><span class=\"line\"><span class=\"built_in\">cd</span> 10</span><br></pre></td></tr></table></figure>\n\n<p>     </p>\n<p>  使用vim创建mean.sh文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim mean.sh </span><br></pre></td></tr></table></figure>\n\n<p>  如果出现这种情况<br>  <img src=\"/2023/04/02/SingleChip/4c9eeaf452c81e4203aab3ab35f203b530e08202.png\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install vim</span><br></pre></td></tr></table></figure>\n\n<p>  安装完后在执行vim mean.sh，执行完后界面为</p>\n<p>  <img src=\"/2023/04/02/SingleChip/426941f16f054370a2e48c0b9334b919349fd85a.png\" alt=\"Screenshot from 2023-04-02 01-14-51.png\"></p>\n<p>    按i键进入插入模式</p>\n<p>  输入代码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">total=0</span><br><span class=\"line\">count=0</span><br><span class=\"line\">inputfile=<span class=\"string\">&#x27;1000ValuesCalcMean&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"built_in\">read</span> line;<span class=\"keyword\">do</span></span><br><span class=\"line\">    total=$((total+line)）</span><br><span class=\"line\">    count=$[<span class=\"variable\">$count</span>+<span class=\"number\">1</span>]</span><br><span class=\"line\">done &lt; <span class=\"variable\">$inputfile</span></span><br><span class=\"line\">echo $[<span class=\"variable\">$total</span>/<span class=\"variable\">$count</span>] &gt; mean_result_学号_名字.txt</span><br></pre></td></tr></table></figure>\n\n<p>      <img src=\"/2023/04/02/SingleChip/d5a14db6ef5b8ee6e4e4628c1290b38445a7835e.png\"></p>\n<p>  输入完后按esc键退出插入模式，输入:wq退出vim</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">chmod</span> 777 mean.sh //给mean.sh权限</span><br><span class=\"line\">./mean.sh              //执行mean.sh</span><br></pre></td></tr></table></figure>\n\n<p>  执行完后10文件夹内出现 mean_result_学号_名字.txt 文件</p>\n<p>  <img src=\"/2023/04/02/SingleChip/57037c8bea42c86053227fe549874b419653b56c.png\"></p>\n<p>  内容为 平均数</p>\n<p>  创建ReadMe.md</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ReadMe.md</span><br></pre></td></tr></table></figure>\n\n<p>  进入后直接:wq退出</p>\n<p>  <img src=\"/2023/04/02/SingleChip/426941f16f054370a2e48c0b9334b919349fd85a.png\" alt=\"Screenshot from 2023-04-02 01-14-51.png\"></p>\n<p>  看到文件夹内多出了文件ReaMe.md，双击</p>\n<p>  <img src=\"/2023/04/02/SingleChip/54c588817fcd205435a974f1d8077220d5485bf4.png\" alt=\"Screenshot from 2023-04-02 01-16-19.png\"></p>\n<p>  在文本编辑器内写入以下示例后保存</p>\n<p>  <img src=\"/2023/04/02/SingleChip/62d506ea99c99e2d95a5c5d0b00410291b1a7de4.png\" alt=\"Screenshot from 2023-04-02 01-21-06.png\"></p>\n<p>  打包成.tgz格式的压缩包(别忘了传图片)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -czvf 压缩包的名字.tgz 你要压缩的第一个文件 第二个 ....</span><br></pre></td></tr></table></figure>\n\n<p>  <img src=\"/2023/04/02/SingleChip/ba71358b9ca3c9a533af1de889672b443827b2b5.png\" alt=\"Screenshot from 2023-04-02 01-22-26.png\"></p>\n<p>  进入学习通上交即可</p>\n<h2 id=\"进阶要求\"><a href=\"#进阶要求\" class=\"headerlink\" title=\"进阶要求\"></a>进阶要求</h2><p>  代码修改为</p>\n<p>  <img src=\"/2023/04/02/SingleChip/08a01404c19e5459d57c8e384f5eaf22869a43eb.png\" alt=\"Screenshot from 2023-04-02 01-54-33.png\"></p>\n<p>  执行命令改为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./mean.sh 1000ValuesCalcMean</span><br></pre></td></tr></table></figure>\n\n<p>  执行完后压缩上交即可(别忘了在ReadMe中说明使用了进阶要求)</p>\n<h1 id=\"第二次实验\"><a href=\"#第二次实验\" class=\"headerlink\" title=\"第二次实验\"></a>第二次实验</h1><h2 id=\"实验要求\"><a href=\"#实验要求\" class=\"headerlink\" title=\"实验要求\"></a>实验要求</h2><p>  <img src=\"/2023/04/02/SingleChip/2023-04-07-15-48-18-Screenshot%20from%202023-04-07%2015-47-51.png\"></p>\n<p>  基本要求只需要配置SCP和NFS，配置SCP和NFS的文件时候添加上自己的学号截图，使用SCP和NFS的时候截图并放在Word里,把word和压缩后的配置文件上交即可</p>\n<h2 id=\"配置SCP\"><a href=\"#配置SCP\" class=\"headerlink\" title=\"配置SCP\"></a>配置SCP</h2><p>  我使用的termux，就是老师发在群里的那个app</p>\n<p>  如果你是第一次安装termux</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//termux 上执行</span><br><span class=\"line\">apt update &amp;&amp; apt upgrade </span><br></pre></td></tr></table></figure>\n\n<p>  安装Openssh</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//termux 上执行</span><br><span class=\"line\">pkg install openssh</span><br></pre></td></tr></table></figure>\n\n<p>  安装成功后可以测试ssh的连接</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//termux</span><br><span class=\"line\"></span><br><span class=\"line\">//给自己的用户设置密码</span><br><span class=\"line\">passwd</span><br><span class=\"line\">//打开ssh服务端</span><br><span class=\"line\">sshd</span><br><span class=\"line\"></span><br><span class=\"line\">//ubuntu</span><br><span class=\"line\"></span><br><span class=\"line\">ssh -p 8022 user@hostname_or_ip</span><br><span class=\"line\">//user是你在termux上的用户可以在termux上执行<span class=\"built_in\">whoami</span>查看</span><br><span class=\"line\">//host_or_ip是的你ip地址，确保你的termux和ubuntu在统一局域网下</span><br><span class=\"line\">//手机按wifi查看你的ipv4地址</span><br><span class=\"line\">//也可以在termux执行ifconfig查看wlan0网络适配器的inet</span><br></pre></td></tr></table></figure>\n\n<p>  连接成功后,在ubuntu上随便创建一个文件测试SCP,新开一个终端</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//ubuntu</span><br><span class=\"line\"></span><br><span class=\"line\">scp -P 8022 SourceFile user@hostname_or_ip:TargetPath</span><br><span class=\"line\">//SourFile是你要发送的文件</span><br><span class=\"line\">//TargPath是要发送到移动的路径，termux最好用当前用户的路径，例如./ (termux没有root用户权限)</span><br><span class=\"line\">//usr是termux的用户名</span><br><span class=\"line\">//host_or_ip是的你ip地址</span><br><span class=\"line\"></span><br><span class=\"line\">//在你连接termux的ssh终端或者termux上查看文件是否发送过来，如果Target是./</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">ls</span> ~</span><br></pre></td></tr></table></figure>\n\n<p>  截图保存</p>\n<h2 id=\"NFS\"><a href=\"#NFS\" class=\"headerlink\" title=\"NFS\"></a>NFS</h2><p>我使用的是我购买的服务器，你可以采用windos和虚拟机，或者虚拟机之间通信</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install nfs-kernel-server <span class=\"comment\">#安装NFS服务器端</span></span><br><span class=\"line\">sudo apt-get install nfs-common        <span class=\"comment\">#安装NFS客户端</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>在服务器上</strong></p>\n<ul>\n<li>设置本地目录权限</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> /nfs</span><br><span class=\"line\">sudo <span class=\"built_in\">chmod</span> -R 777 /nfs</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>添加目录的绝对路径到共享</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/exports</span><br><span class=\"line\"><span class=\"comment\">#添加</span></span><br><span class=\"line\">/nfs *(rw,async,no_subtree_check,no_root_squash)</span><br><span class=\"line\"><span class=\"comment\">#学号名字</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>启动NFS服务</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo /usr/sbin/exportfs -arf </span><br><span class=\"line\">sudo /etc/init.d/nfs-kernel-server start</span><br></pre></td></tr></table></figure>\n\n<p><strong>在客户端上</strong></p>\n<ul>\n<li>NFS服务测试</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mount -t nfs 192.168.12.123:/nfs /mnt -o nolock</span><br><span class=\"line\"><span class=\"comment\">#如果挂载成功，在/mnt目录下能看到/nfsroot目录下的内容</span></span><br></pre></td></tr></table></figure>\n\n<p>截图,把exports复制一份</p>\n<h2 id=\"提交\"><a href=\"#提交\" class=\"headerlink\" title=\"提交\"></a>提交</h2><p>这样就完成的基本要求</p>\n<ul>\n<li><p>把配置文件压缩</p>\n</li>\n<li><p>把图放到word，别忘加标题</p>\n</li>\n<li><p>把这个表复制到word</p>\n</li>\n</ul>\n<p><img src=\"/2023/04/02/SingleChip/2023-04-07-17-11-07-Screenshot%20from%202023-04-07%2017-10-50.png\"></p>\n<p>提交即可</p>\n<h3 id=\"进阶要求-1\"><a href=\"#进阶要求-1\" class=\"headerlink\" title=\"进阶要求\"></a>进阶要求</h3><p>可以参考我的git的使用</p>\n<p>进阶没时间写了,找个其他时间再写</p>\n<p>这是我实验二的[文件](<a href=\"https://gitee.com/Exiaozhang/home-work_1/tree/master/19\">HomeWork_1: 单片机嵌入式作业000000 - Gitee.com</a>)包括了进阶要求的文件,可以参考着改改,不会可以线下问我,或者在我的评论区给我留言</p>"},{"title":"冷战历史","date":"2023-02-24T16:19:15.000Z","_content":"\n<img title=\"\" src=\"videos/b4c79bb4937a8fe3e059d09f307c0293b448d348.jpg\" alt=\"\" data-align=\"center\">\n\n<!-- more -->\n\n我的第一篇博客慢慢更新冷战历史\n\n* 冷战的起源\n  \n  * 斯大林与1943年共产国际的解体\n    \n    &nbsp;&nbsp;1943年5月，作为世界革命大本营的共产国际（第三国际）突然宣布解散，这是国际共产主义运动历史上一件具有标志性的事件。就组织形式而言，第三国际是一个共产党世界性的统一机构，各国党只是它的一个支部。共产国际解散后，各国共产党都独立了。虽然到中苏分裂之前，国际共运还是以莫斯科为中心继续存在，但是其组织形式和活动方式发生了根本性改变——共产党情报局只是欧洲九国共产党的协调和指挥机构，而苏共二十大以后各国共产党都是通过召开会议来统一他们的政策和行动。就斗争任务而言，共产国际在理论和逻辑上始终以发动世界革命为己任，而在共产党情报局那里，所谓世界革命战略充其量只是莫斯科动员各国人民支持和援助苏联的口号，苏共二十大则明确提出了“和平共处”的外交路线。\n\n**冷战热斗背景演讲**\n\n<div style=\"position: relative; width: 100%; height: 0; padding-bottom: 75%;\"><iframe \nsrc=\"//player.bilibili.com/player.html?aid=427826505&bvid=BV1YG411s7L1&cid=756709475&page=1\" scrolling=\"no\" border=\"0\" \nframeborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"position: absolute; width: 100%; \nheight: 100%; left: 0; top: 0;\"> </iframe></div>\n","source":"_posts/videos.md","raw":"---\ntitle: 冷战历史\ndate: 2023-2-25 00:19:15\ntags: ['冷战','历史','美国','苏联']\n\n---\n\n<img title=\"\" src=\"videos/b4c79bb4937a8fe3e059d09f307c0293b448d348.jpg\" alt=\"\" data-align=\"center\">\n\n<!-- more -->\n\n我的第一篇博客慢慢更新冷战历史\n\n* 冷战的起源\n  \n  * 斯大林与1943年共产国际的解体\n    \n    &nbsp;&nbsp;1943年5月，作为世界革命大本营的共产国际（第三国际）突然宣布解散，这是国际共产主义运动历史上一件具有标志性的事件。就组织形式而言，第三国际是一个共产党世界性的统一机构，各国党只是它的一个支部。共产国际解散后，各国共产党都独立了。虽然到中苏分裂之前，国际共运还是以莫斯科为中心继续存在，但是其组织形式和活动方式发生了根本性改变——共产党情报局只是欧洲九国共产党的协调和指挥机构，而苏共二十大以后各国共产党都是通过召开会议来统一他们的政策和行动。就斗争任务而言，共产国际在理论和逻辑上始终以发动世界革命为己任，而在共产党情报局那里，所谓世界革命战略充其量只是莫斯科动员各国人民支持和援助苏联的口号，苏共二十大则明确提出了“和平共处”的外交路线。\n\n**冷战热斗背景演讲**\n\n<div style=\"position: relative; width: 100%; height: 0; padding-bottom: 75%;\"><iframe \nsrc=\"//player.bilibili.com/player.html?aid=427826505&bvid=BV1YG411s7L1&cid=756709475&page=1\" scrolling=\"no\" border=\"0\" \nframeborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"position: absolute; width: 100%; \nheight: 100%; left: 0; top: 0;\"> </iframe></div>\n","slug":"videos","published":1,"updated":"2023-04-05T12:12:02.610Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clg3qntaz0005xz8ics6s21rg","content":"<img title src=\"/2023/02/25/videos/b4c79bb4937a8fe3e059d09f307c0293b448d348.jpg\" alt data-align=\"center\">\n\n<span id=\"more\"></span>\n\n<p>我的第一篇博客慢慢更新冷战历史</p>\n<ul>\n<li>冷战的起源<ul>\n<li>斯大林与1943年共产国际的解体&nbsp;&nbsp;1943年5月，作为世界革命大本营的共产国际（第三国际）突然宣布解散，这是国际共产主义运动历史上一件具有标志性的事件。就组织形式而言，第三国际是一个共产党世界性的统一机构，各国党只是它的一个支部。共产国际解散后，各国共产党都独立了。虽然到中苏分裂之前，国际共运还是以莫斯科为中心继续存在，但是其组织形式和活动方式发生了根本性改变——共产党情报局只是欧洲九国共产党的协调和指挥机构，而苏共二十大以后各国共产党都是通过召开会议来统一他们的政策和行动。就斗争任务而言，共产国际在理论和逻辑上始终以发动世界革命为己任，而在共产党情报局那里，所谓世界革命战略充其量只是莫斯科动员各国人民支持和援助苏联的口号，苏共二十大则明确提出了“和平共处”的外交路线。</li>\n</ul>\n</li>\n</ul>\n<p><strong>冷战热斗背景演讲</strong></p>\n<div style=\"position: relative; width: 100%; height: 0; padding-bottom: 75%;\"><iframe src=\"//player.bilibili.com/player.html?aid=427826505&bvid=BV1YG411s7L1&cid=756709475&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"position: absolute; width: 100%; \nheight: 100%; left: 0; top: 0;\"> </iframe></div>\n","site":{"data":{}},"excerpt":"<img title src=\"/2023/02/25/videos/b4c79bb4937a8fe3e059d09f307c0293b448d348.jpg\" alt data-align=\"center\">","more":"<p>我的第一篇博客慢慢更新冷战历史</p>\n<ul>\n<li>冷战的起源<ul>\n<li>斯大林与1943年共产国际的解体&nbsp;&nbsp;1943年5月，作为世界革命大本营的共产国际（第三国际）突然宣布解散，这是国际共产主义运动历史上一件具有标志性的事件。就组织形式而言，第三国际是一个共产党世界性的统一机构，各国党只是它的一个支部。共产国际解散后，各国共产党都独立了。虽然到中苏分裂之前，国际共运还是以莫斯科为中心继续存在，但是其组织形式和活动方式发生了根本性改变——共产党情报局只是欧洲九国共产党的协调和指挥机构，而苏共二十大以后各国共产党都是通过召开会议来统一他们的政策和行动。就斗争任务而言，共产国际在理论和逻辑上始终以发动世界革命为己任，而在共产党情报局那里，所谓世界革命战略充其量只是莫斯科动员各国人民支持和援助苏联的口号，苏共二十大则明确提出了“和平共处”的外交路线。</li>\n</ul>\n</li>\n</ul>\n<p><strong>冷战热斗背景演讲</strong></p>\n<div style=\"position: relative; width: 100%; height: 0; padding-bottom: 75%;\"><iframe src=\"//player.bilibili.com/player.html?aid=427826505&bvid=BV1YG411s7L1&cid=756709475&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" style=\"position: absolute; width: 100%; \nheight: 100%; left: 0; top: 0;\"> </iframe></div>"},{"title":"在Ubuntu中装Node中遇到的坑","date":"2023-04-07T07:21:44.000Z","_content":"\n# 在Ubuntu中装Nodejs\n\n```bash\ncurl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash - &&\\\nsudo apt-get install -y nodejs\n```\n\n![](Ubuntu-Nodejs/2023-04-07-15-31-01-Screenshot%20from%202023-04-07%2015-30-53.png)\n\n<!--more-->\n\n结果报出GPG error:NO_PUBKEY \n\n* 首先我尝试了\n\n```bash\nsudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys YOURKEY\n//把YOURKEY替换为报错提示的那个\n```\n\n* 继续执行安装代码，报出同样的错误\n  \n  ![](Ubuntu-Nodejs/2023-04-07-15-36-35-Screenshot%20from%202023-04-07%2015-36-21.png)\n\n* 根据这个警告，判断apt可能没有信任deb.Nodesoure.com,执行以下代码\n\n```bash\n//找到这个仓库所在的sourelist,我是ubuntu20.4,路径可能不太一样，但都差不多\nvim /etc/apt/sources.list.d/nodesource.list\n//修改\ndeb [trusted=yes] https://deb.nodesource.com/node_18.x focal main\n```\n\n* 再次执行安装成功\n  \n  ![Screenshot from 2023-04-05 21-36-31.png](Ubuntu-Nodejs/1b20eb77d85e7959657003b7b219a44065b0876d.png)\n","source":"_posts/Ubuntu-Nodejs.md","raw":"---\ntitle: 在Ubuntu中装Node中遇到的坑\ndate: 2023-04-07 15:21:44\ntags:\n---\n\n# 在Ubuntu中装Nodejs\n\n```bash\ncurl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash - &&\\\nsudo apt-get install -y nodejs\n```\n\n![](Ubuntu-Nodejs/2023-04-07-15-31-01-Screenshot%20from%202023-04-07%2015-30-53.png)\n\n<!--more-->\n\n结果报出GPG error:NO_PUBKEY \n\n* 首先我尝试了\n\n```bash\nsudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys YOURKEY\n//把YOURKEY替换为报错提示的那个\n```\n\n* 继续执行安装代码，报出同样的错误\n  \n  ![](Ubuntu-Nodejs/2023-04-07-15-36-35-Screenshot%20from%202023-04-07%2015-36-21.png)\n\n* 根据这个警告，判断apt可能没有信任deb.Nodesoure.com,执行以下代码\n\n```bash\n//找到这个仓库所在的sourelist,我是ubuntu20.4,路径可能不太一样，但都差不多\nvim /etc/apt/sources.list.d/nodesource.list\n//修改\ndeb [trusted=yes] https://deb.nodesource.com/node_18.x focal main\n```\n\n* 再次执行安装成功\n  \n  ![Screenshot from 2023-04-05 21-36-31.png](Ubuntu-Nodejs/1b20eb77d85e7959657003b7b219a44065b0876d.png)\n","slug":"Ubuntu-Nodejs","published":1,"updated":"2023-04-07T08:52:13.954Z","_id":"clg6b47e00000l88i203r5qy5","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"在Ubuntu中装Nodejs\"><a href=\"#在Ubuntu中装Nodejs\" class=\"headerlink\" title=\"在Ubuntu中装Nodejs\"></a>在Ubuntu中装Nodejs</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash - &amp;&amp;\\</span><br><span class=\"line\">sudo apt-get install -y nodejs</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/04/07/Ubuntu-Nodejs/2023-04-07-15-31-01-Screenshot%20from%202023-04-07%2015-30-53.png\"></p>\n<span id=\"more\"></span>\n\n<p>结果报出GPG error:NO_PUBKEY </p>\n<ul>\n<li>首先我尝试了</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys YOURKEY</span><br><span class=\"line\">//把YOURKEY替换为报错提示的那个</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>继续执行安装代码，报出同样的错误</p>\n<p><img src=\"/2023/04/07/Ubuntu-Nodejs/2023-04-07-15-36-35-Screenshot%20from%202023-04-07%2015-36-21.png\"></p>\n</li>\n<li><p>根据这个警告，判断apt可能没有信任deb.Nodesoure.com,执行以下代码</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//找到这个仓库所在的sourelist,我是ubuntu20.4,路径可能不太一样，但都差不多</span><br><span class=\"line\">vim /etc/apt/sources.list.d/nodesource.list</span><br><span class=\"line\">//修改</span><br><span class=\"line\">deb [trusted=<span class=\"built_in\">yes</span>] https://deb.nodesource.com/node_18.x focal main</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>再次执行安装成功<img src=\"/2023/04/07/Ubuntu-Nodejs/1b20eb77d85e7959657003b7b219a44065b0876d.png\" alt=\"Screenshot from 2023-04-05 21-36-31.png\"></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"在Ubuntu中装Nodejs\"><a href=\"#在Ubuntu中装Nodejs\" class=\"headerlink\" title=\"在Ubuntu中装Nodejs\"></a>在Ubuntu中装Nodejs</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash - &amp;&amp;\\</span><br><span class=\"line\">sudo apt-get install -y nodejs</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2023/04/07/Ubuntu-Nodejs/2023-04-07-15-31-01-Screenshot%20from%202023-04-07%2015-30-53.png\"></p>","more":"<p>结果报出GPG error:NO_PUBKEY </p>\n<ul>\n<li>首先我尝试了</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys YOURKEY</span><br><span class=\"line\">//把YOURKEY替换为报错提示的那个</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>继续执行安装代码，报出同样的错误</p>\n<p><img src=\"/2023/04/07/Ubuntu-Nodejs/2023-04-07-15-36-35-Screenshot%20from%202023-04-07%2015-36-21.png\"></p>\n</li>\n<li><p>根据这个警告，判断apt可能没有信任deb.Nodesoure.com,执行以下代码</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//找到这个仓库所在的sourelist,我是ubuntu20.4,路径可能不太一样，但都差不多</span><br><span class=\"line\">vim /etc/apt/sources.list.d/nodesource.list</span><br><span class=\"line\">//修改</span><br><span class=\"line\">deb [trusted=<span class=\"built_in\">yes</span>] https://deb.nodesource.com/node_18.x focal main</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>再次执行安装成功<img src=\"/2023/04/07/Ubuntu-Nodejs/1b20eb77d85e7959657003b7b219a44065b0876d.png\" alt=\"Screenshot from 2023-04-05 21-36-31.png\"></li>\n</ul>"}],"PostAsset":[{"_id":"source/_posts/ET框架TulipBubble实现逻辑/2023-03-23-21-05-52-image.png","slug":"2023-03-23-21-05-52-image.png","post":"clg3qntau0001xz8i2xeu6h1x","modified":0,"renderable":0},{"_id":"source/_posts/ET框架初步理解/4a45803c69ed8b7283f933aa6e1748973976ef4c.png","slug":"4a45803c69ed8b7283f933aa6e1748973976ef4c.png","post":"clg3qntaw0002xz8i8lklhaqt","modified":0,"renderable":0},{"_id":"source/_posts/ET框架初步理解/6e285ffc782c8443b1070964510e9530573f6c2d.png","slug":"6e285ffc782c8443b1070964510e9530573f6c2d.png","post":"clg3qntaw0002xz8i8lklhaqt","modified":0,"renderable":0},{"_id":"source/_posts/ET框架初步理解/7845ce3fdee147fca9d5c7fe4d86a890b717ecfe.png","slug":"7845ce3fdee147fca9d5c7fe4d86a890b717ecfe.png","post":"clg3qntaw0002xz8i8lklhaqt","modified":0,"renderable":0},{"_id":"source/_posts/ET框架初步理解/BackConfig.png","slug":"BackConfig.png","post":"clg3qntaw0002xz8i8lklhaqt","modified":0,"renderable":0},{"_id":"source/_posts/ET框架初步理解/BackEnd.png","slug":"BackEnd.png","post":"clg3qntaw0002xz8i8lklhaqt","modified":0,"renderable":0},{"_id":"source/_posts/ET框架初步理解/front.png","slug":"front.png","post":"clg3qntaw0002xz8i8lklhaqt","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/089c68368fd64dc9463fcbb493992b46998e45ad.png","slug":"089c68368fd64dc9463fcbb493992b46998e45ad.png","post":"clg3qntay0003xz8ih1i17w3b","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/10.png","slug":"10.png","post":"clg3qntay0003xz8ih1i17w3b","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/13.png","slug":"13.png","post":"clg3qntay0003xz8ih1i17w3b","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/14.png","slug":"14.png","post":"clg3qntay0003xz8ih1i17w3b","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/15.png","slug":"15.png","post":"clg3qntay0003xz8ih1i17w3b","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/265bf46b38778fb7476094dda85d00debb635e85.png","slug":"265bf46b38778fb7476094dda85d00debb635e85.png","post":"clg3qntay0003xz8ih1i17w3b","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/2ac963f71072ecd1cc7f56f9153107153b737a36.png","slug":"2ac963f71072ecd1cc7f56f9153107153b737a36.png","post":"clg3qntay0003xz8ih1i17w3b","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/3aa70b0531dc3e2625c09c1ef8eac0078a29f54e.png","slug":"3aa70b0531dc3e2625c09c1ef8eac0078a29f54e.png","post":"clg3qntay0003xz8ih1i17w3b","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/51204e17ea43f7a1992ea9abbf9ecb48768694fa.png","slug":"51204e17ea43f7a1992ea9abbf9ecb48768694fa.png","post":"clg3qntay0003xz8ih1i17w3b","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/578439ae227066f02d1319f645f09b0567c46bd6.png","slug":"578439ae227066f02d1319f645f09b0567c46bd6.png","post":"clg3qntay0003xz8ih1i17w3b","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/5a1f2bfbce2c6557b2d3442934c0a92b8a606944.png","slug":"5a1f2bfbce2c6557b2d3442934c0a92b8a606944.png","post":"clg3qntay0003xz8ih1i17w3b","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/5ea18123f9a50a08ca1fd5562c479b4aa184a2e4.png","slug":"5ea18123f9a50a08ca1fd5562c479b4aa184a2e4.png","post":"clg3qntay0003xz8ih1i17w3b","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/62a3a7a6fbde2da426ced06d782dbd6ee43fb5c4.png","slug":"62a3a7a6fbde2da426ced06d782dbd6ee43fb5c4.png","post":"clg3qntay0003xz8ih1i17w3b","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/69a4adad5fa74c60aa7fdd3ac358f9bb718b3b4b.png","slug":"69a4adad5fa74c60aa7fdd3ac358f9bb718b3b4b.png","post":"clg3qntay0003xz8ih1i17w3b","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/6aa5405ba7ffbe9c8760c5891854c1041e688d10.png","slug":"6aa5405ba7ffbe9c8760c5891854c1041e688d10.png","post":"clg3qntay0003xz8ih1i17w3b","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/7e1e6ca628c6bcc92afce94e8ce7a0cd9a491ac1.png","slug":"7e1e6ca628c6bcc92afce94e8ce7a0cd9a491ac1.png","post":"clg3qntay0003xz8ih1i17w3b","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/86324066a24e3eb32af8305f91c0a064582ae9d5.png","slug":"86324066a24e3eb32af8305f91c0a064582ae9d5.png","post":"clg3qntay0003xz8ih1i17w3b","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/c81d9e95a6974e43bb3d62b5ce7029b0c535f29d.png","slug":"c81d9e95a6974e43bb3d62b5ce7029b0c535f29d.png","post":"clg3qntay0003xz8ih1i17w3b","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/c96a2283efc6cc31030410ff42e59ac41209443a.png","slug":"c96a2283efc6cc31030410ff42e59ac41209443a.png","post":"clg3qntay0003xz8ih1i17w3b","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/dfd1bcd4b5e9efbe1d7e8d52c289e292c4bd2b04.png","slug":"dfd1bcd4b5e9efbe1d7e8d52c289e292c4bd2b04.png","post":"clg3qntay0003xz8ih1i17w3b","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/fc261c3347d67a16ae3d5eef1b72182071954565.png","slug":"fc261c3347d67a16ae3d5eef1b72182071954565.png","post":"clg3qntay0003xz8ih1i17w3b","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/git.png","slug":"git.png","post":"clg3qntay0003xz8ih1i17w3b","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/git01.png","slug":"git01.png","post":"clg3qntay0003xz8ih1i17w3b","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/practice00.png","slug":"practice00.png","post":"clg3qntay0003xz8ih1i17w3b","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/practice01.png","slug":"practice01.png","post":"clg3qntay0003xz8ih1i17w3b","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/practice02.png","slug":"practice02.png","post":"clg3qntay0003xz8ih1i17w3b","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/practice03.png","slug":"practice03.png","post":"clg3qntay0003xz8ih1i17w3b","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/practice04.png","slug":"practice04.png","post":"clg3qntay0003xz8ih1i17w3b","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/practice05.png","slug":"practice05.png","post":"clg3qntay0003xz8ih1i17w3b","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/practice06.png","slug":"practice06.png","post":"clg3qntay0003xz8ih1i17w3b","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/practice07.png","slug":"practice07.png","post":"clg3qntay0003xz8ih1i17w3b","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/practice08.png","slug":"practice08.png","post":"clg3qntay0003xz8ih1i17w3b","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/practice09.png","slug":"practice09.png","post":"clg3qntay0003xz8ih1i17w3b","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/practice11.png","slug":"practice11.png","post":"clg3qntay0003xz8ih1i17w3b","modified":0,"renderable":0},{"_id":"source/_posts/Github使用/practice12.png","slug":"practice12.png","post":"clg3qntay0003xz8ih1i17w3b","modified":0,"renderable":0},{"_id":"source/_posts/SingleChip/08a01404c19e5459d57c8e384f5eaf22869a43eb.png","slug":"08a01404c19e5459d57c8e384f5eaf22869a43eb.png","post":"clg3qntay0004xz8i7zwl0tqy","modified":0,"renderable":0},{"_id":"source/_posts/SingleChip/2023-04-02-02-04-46-image.png","slug":"2023-04-02-02-04-46-image.png","post":"clg3qntay0004xz8i7zwl0tqy","modified":0,"renderable":0},{"_id":"source/_posts/SingleChip/2023-04-02-02-04-59-image.png","slug":"2023-04-02-02-04-59-image.png","post":"clg3qntay0004xz8i7zwl0tqy","modified":0,"renderable":0},{"_id":"source/_posts/SingleChip/2023-04-02-02-05-40-image.png","slug":"2023-04-02-02-05-40-image.png","post":"clg3qntay0004xz8i7zwl0tqy","modified":0,"renderable":0},{"_id":"source/_posts/SingleChip/426941f16f054370a2e48c0b9334b919349fd85a.png","slug":"426941f16f054370a2e48c0b9334b919349fd85a.png","post":"clg3qntay0004xz8i7zwl0tqy","modified":0,"renderable":0},{"_id":"source/_posts/SingleChip/4c9eeaf452c81e4203aab3ab35f203b530e08202.png","slug":"4c9eeaf452c81e4203aab3ab35f203b530e08202.png","post":"clg3qntay0004xz8i7zwl0tqy","modified":0,"renderable":0},{"_id":"source/_posts/SingleChip/53dd30183091b0bb68dfbdb15031cc2dfa2e0306.png","slug":"53dd30183091b0bb68dfbdb15031cc2dfa2e0306.png","post":"clg3qntay0004xz8i7zwl0tqy","modified":0,"renderable":0},{"_id":"source/_posts/SingleChip/54c588817fcd205435a974f1d8077220d5485bf4.png","slug":"54c588817fcd205435a974f1d8077220d5485bf4.png","post":"clg3qntay0004xz8i7zwl0tqy","modified":0,"renderable":0},{"_id":"source/_posts/SingleChip/57037c8bea42c86053227fe549874b419653b56c.png","slug":"57037c8bea42c86053227fe549874b419653b56c.png","post":"clg3qntay0004xz8i7zwl0tqy","modified":0,"renderable":0},{"_id":"source/_posts/SingleChip/62d506ea99c99e2d95a5c5d0b00410291b1a7de4.png","slug":"62d506ea99c99e2d95a5c5d0b00410291b1a7de4.png","post":"clg3qntay0004xz8i7zwl0tqy","modified":0,"renderable":0},{"_id":"source/_posts/SingleChip/ba71358b9ca3c9a533af1de889672b443827b2b5.png","slug":"ba71358b9ca3c9a533af1de889672b443827b2b5.png","post":"clg3qntay0004xz8i7zwl0tqy","modified":0,"renderable":0},{"_id":"source/_posts/SingleChip/d5a14db6ef5b8ee6e4e4628c1290b38445a7835e.png","slug":"d5a14db6ef5b8ee6e4e4628c1290b38445a7835e.png","post":"clg3qntay0004xz8i7zwl0tqy","modified":0,"renderable":0},{"_id":"source/_posts/videos/CodWar.jpg","slug":"CodWar.jpg","post":"clg3qntaz0005xz8ics6s21rg","modified":0,"renderable":0},{"_id":"source/_posts/videos/b4c79bb4937a8fe3e059d09f307c0293b448d348.jpg","slug":"b4c79bb4937a8fe3e059d09f307c0293b448d348.jpg","post":"clg3qntaz0005xz8ics6s21rg","modified":0,"renderable":0},{"_id":"source/_posts/SingleChip/2023-04-07-15-48-18-Screenshot from 2023-04-07 15-47-51.png","slug":"2023-04-07-15-48-18-Screenshot from 2023-04-07 15-47-51.png","post":"clg3qntay0004xz8i7zwl0tqy","modified":0,"renderable":0},{"_id":"source/_posts/SingleChip/2023-04-07-16-44-34-Screenshot from 2023-04-07 15-47-51.png","slug":"2023-04-07-16-44-34-Screenshot from 2023-04-07 15-47-51.png","post":"clg3qntay0004xz8i7zwl0tqy","modified":0,"renderable":0},{"_id":"source/_posts/SingleChip/5dd629b107312e0c0f858dd937af777ac3045bcd.png","slug":"5dd629b107312e0c0f858dd937af777ac3045bcd.png","post":"clg3qntay0004xz8i7zwl0tqy","modified":0,"renderable":0},{"_id":"source/_posts/Ubuntu-Nodejs/1b20eb77d85e7959657003b7b219a44065b0876d.png","slug":"1b20eb77d85e7959657003b7b219a44065b0876d.png","post":"clg6b47e00000l88i203r5qy5","modified":0,"renderable":0},{"_id":"source/_posts/Ubuntu-Nodejs/2023-04-07-15-31-01-Screenshot from 2023-04-07 15-30-53.png","slug":"2023-04-07-15-31-01-Screenshot from 2023-04-07 15-30-53.png","post":"clg6b47e00000l88i203r5qy5","modified":0,"renderable":0},{"_id":"source/_posts/Ubuntu-Nodejs/2023-04-07-15-36-35-Screenshot from 2023-04-07 15-36-21.png","slug":"2023-04-07-15-36-35-Screenshot from 2023-04-07 15-36-21.png","post":"clg6b47e00000l88i203r5qy5","modified":0,"renderable":0},{"_id":"source/_posts/SingleChip/2023-04-07-17-11-07-Screenshot from 2023-04-07 17-10-50.png","slug":"2023-04-07-17-11-07-Screenshot from 2023-04-07 17-10-50.png","post":"clg3qntay0004xz8i7zwl0tqy","modified":1,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"clg3qntaz0005xz8ics6s21rg","tag_id":"clg3qntb00006xz8i2i6xeakp","_id":"clg3qntb2000axz8i9pixgv1d"},{"post_id":"clg3qntaz0005xz8ics6s21rg","tag_id":"clg3qntb10007xz8i5m6jfdv0","_id":"clg3qntb2000bxz8i4pad4pyo"},{"post_id":"clg3qntaz0005xz8ics6s21rg","tag_id":"clg3qntb10008xz8i9olbcrzl","_id":"clg3qntb2000cxz8i68b53ewc"},{"post_id":"clg3qntaz0005xz8ics6s21rg","tag_id":"clg3qntb20009xz8i6syn5gjr","_id":"clg3qntb2000dxz8i6wzkfu22"}],"Tag":[{"name":"冷战","_id":"clg3qntb00006xz8i2i6xeakp"},{"name":"历史","_id":"clg3qntb10007xz8i5m6jfdv0"},{"name":"美国","_id":"clg3qntb10008xz8i9olbcrzl"},{"name":"苏联","_id":"clg3qntb20009xz8i6syn5gjr"}]}}